
part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  00804000  00804000  0000026e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003389  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f2b  00000000  00000000  000036c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a5  00000000  00000000  000065ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  00006b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001769  00000000  00000000  00006c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000004c  00000000  00000000  00008375  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000083c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	ac 31       	cpi	r26, 0x1C	; 28
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
 114:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <SPI_rtc_ds1306_config>:
// the ds1306.
//******************************************************************************

void SPI_rtc_ds1306_config (void){
	
			PORTA_DIR = 0xF0;
 11c:	80 ef       	ldi	r24, 0xF0	; 240
 11e:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
			PORTC_DIR = 0x02;
 122:	82 e0       	ldi	r24, 0x02	; 2
 124:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
			
			PORTC_OUT = 0x00;
 128:	10 92 44 04 	sts	0x0444, r1	; 0x800444 <__TEXT_REGION_LENGTH__+0x7e0444>
				//configures SPI
			SPI0_CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm;
 12c:	81 e2       	ldi	r24, 0x21	; 33
 12e:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
			SPI0_CTRLB = SPI_MODE0_bm;
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	80 93 41 09 	sts	0x0941, r24	; 0x800941 <__TEXT_REGION_LENGTH__+0x7e0941>
 138:	08 95       	ret

0000013a <block_write_RTC>:


void block_write_RTC (volatile unsigned char *array_ptr, 
unsigned char strt_addr, unsigned char count){
	
		PORTC_OUT |= 0x02;
 13a:	e4 e4       	ldi	r30, 0x44	; 68
 13c:	f4 e0       	ldi	r31, 0x04	; 4
 13e:	80 81       	ld	r24, Z
 140:	82 60       	ori	r24, 0x02	; 2
 142:	80 83       	st	Z, r24
		SPI0.DATA = strt_addr;
 144:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 148:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 14c:	80 38       	cpi	r24, 0x80	; 128
 14e:	e1 f7       	brne	.-8      	; 0x148 <block_write_RTC+0xe>
 150:	20 e0       	ldi	r18, 0x00	; 0
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	06 c0       	rjmp	.+12     	; 0x162 <block_write_RTC+0x28>
		for(int i = 0;i<count;i++)
{
	//SPI0.DATA = *(array_ptr + i);
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 156:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 15a:	80 38       	cpi	r24, 0x80	; 128
 15c:	e1 f7       	brne	.-8      	; 0x156 <block_write_RTC+0x1c>
unsigned char strt_addr, unsigned char count){
	
		PORTC_OUT |= 0x02;
		SPI0.DATA = strt_addr;
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
		for(int i = 0;i<count;i++)
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	3f 4f       	sbci	r19, 0xFF	; 255
 162:	84 2f       	mov	r24, r20
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	28 17       	cp	r18, r24
 168:	39 07       	cpc	r19, r25
 16a:	ac f3       	brlt	.-22     	; 0x156 <block_write_RTC+0x1c>
			
	//array_ptr++;
	
	}//		SPI0.DATA = data_RTC;

		PORTC_OUT &= 0xFD;
 16c:	e4 e4       	ldi	r30, 0x44	; 68
 16e:	f4 e0       	ldi	r31, 0x04	; 4
 170:	80 81       	ld	r24, Z
 172:	8d 7f       	andi	r24, 0xFD	; 253
 174:	80 83       	st	Z, r24
 176:	08 95       	ret

00000178 <block_read_RTC>:
	
}
void block_read_RTC(volatile unsigned char *array_ptr, 
unsigned char strt_addr, unsigned char count){
	
	PORTC_OUT |= 0x02;
 178:	e4 e4       	ldi	r30, 0x44	; 68
 17a:	f4 e0       	ldi	r31, 0x04	; 4
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
	SPI0.DATA = strt_addr;
 182:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 186:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 18a:	80 38       	cpi	r24, 0x80	; 128
 18c:	e1 f7       	brne	.-8      	; 0x186 <block_read_RTC+0xe>
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	0b c0       	rjmp	.+22     	; 0x1aa <block_read_RTC+0x32>
	for(int i = 0;i<count;i++)
	{
		
	
		SPI0.DATA = 0x01;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 19a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 19e:	80 38       	cpi	r24, 0x80	; 128
 1a0:	e1 f7       	brne	.-8      	; 0x19a <block_read_RTC+0x22>
		array_ptr = SPI0.DATA;
 1a2:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
unsigned char strt_addr, unsigned char count){
	
	PORTC_OUT |= 0x02;
	SPI0.DATA = strt_addr;
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
	for(int i = 0;i<count;i++)
 1a6:	2f 5f       	subi	r18, 0xFF	; 255
 1a8:	3f 4f       	sbci	r19, 0xFF	; 255
 1aa:	84 2f       	mov	r24, r20
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	28 17       	cp	r18, r24
 1b0:	39 07       	cpc	r19, r25
 1b2:	84 f3       	brlt	.-32     	; 0x194 <block_read_RTC+0x1c>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
		array_ptr = SPI0.DATA;
		array_ptr++;
		
	}
	PORTC_OUT &= 0xFD;
 1b4:	e4 e4       	ldi	r30, 0x44	; 68
 1b6:	f4 e0       	ldi	r31, 0x04	; 4
 1b8:	80 81       	ld	r24, Z
 1ba:	8d 7f       	andi	r24, 0xFD	; 253
 1bc:	80 83       	st	Z, r24
 1be:	08 95       	ret

000001c0 <write_read_RTC_test>:
// just written and places the result in a global array named RTC_byte[]. The
// function repeats this write/read sequence 10 times. The locations written are
// 0xA0 through 0xA9 and the corresponding locations read are 0x20 through 0x29.
//**************************************************************************
void write_read_RTC_test() {
	SPI_rtc_ds1306_config();
 1c0:	0e 94 8e 00 	call	0x11c	; 0x11c <SPI_rtc_ds1306_config>
	//RTC_time_date_write()	
     block_write_RTC (RTC_time_date_write, RTCWrite, 7);
 1c4:	47 e0       	ldi	r20, 0x07	; 7
 1c6:	60 e8       	ldi	r22, 0x80	; 128
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e4       	ldi	r25, 0x40	; 64
 1cc:	0e 94 9d 00 	call	0x13a	; 0x13a <block_write_RTC>
	   block_read_RTC (RTC_time_date_read, RTCRead, 7);
 1d0:	47 e0       	ldi	r20, 0x07	; 7
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	85 e1       	ldi	r24, 0x15	; 21
 1d6:	90 e4       	ldi	r25, 0x40	; 64
 1d8:	0e 94 bc 00 	call	0x178	; 0x178 <block_read_RTC>
 1dc:	08 95       	ret

000001de <main>:
	
	
	
	while (1)
	{
	write_read_RTC_test();	
 1de:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <write_read_RTC_test>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f e7       	ldi	r18, 0x7F	; 127
 1e4:	8a e1       	ldi	r24, 0x1A	; 26
 1e6:	96 e0       	ldi	r25, 0x06	; 6
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0xa>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x14>
 1f2:	00 00       	nop
 1f4:	f4 cf       	rjmp	.-24     	; 0x1de <main>

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
