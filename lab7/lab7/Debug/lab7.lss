
lab7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00804000  00804000  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331c  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e7c  00000000  00000000  000035f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000414  00000000  00000000  0000646c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00006880  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018d2  00000000  00000000  000068b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ba  00000000  00000000  00008186  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a3 30       	cpi	r26, 0x03	; 3
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 cb 00 	call	0x196	; 0x196 <main>
 114:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <asynch_test>:
    }
}

 void asynch_test(char c) {

	temp = USART3_STATUS;	 
 11c:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 120:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <temp>
	temp &= SPI_DREIF_bm;
 124:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <temp>
 128:	90 72       	andi	r25, 0x20	; 32
 12a:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <temp>
	//polls DRIEF to determine if you can write
	while(temp != SPI_DREIF_bm){
 12e:	0d c0       	rjmp	.+26     	; 0x14a <asynch_test+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 130:	9d e0       	ldi	r25, 0x0D	; 13
 132:	9a 95       	dec	r25
 134:	f1 f7       	brne	.-4      	; 0x132 <asynch_test+0x16>
 136:	00 00       	nop
	_delay_us(10);
	temp = USART3_STATUS;
 138:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 13c:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <temp>
	temp &= SPI_DREIF_bm;
 140:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <temp>
 144:	90 72       	andi	r25, 0x20	; 32
 146:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <temp>
 void asynch_test(char c) {

	temp = USART3_STATUS;	 
	temp &= SPI_DREIF_bm;
	//polls DRIEF to determine if you can write
	while(temp != SPI_DREIF_bm){
 14a:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <temp>
 14e:	90 32       	cpi	r25, 0x20	; 32
 150:	79 f7       	brne	.-34     	; 0x130 <asynch_test+0x14>
	temp = USART3_STATUS;
	temp &= SPI_DREIF_bm;
	
	}	 
	
	pass = (uint8_t)c;
 152:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
	USART3.TXDATAL = pass;
 156:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 15a:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
	
	temp = USART3_STATUS;
 15e:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 162:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <temp>
	temp &= SPI_TXCIF_bm;
 166:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <temp>
 16a:	80 74       	andi	r24, 0x40	; 64
 16c:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <temp>
	//polls TXCIF to check if transmit is complete
	while(temp != SPI_TXCIF_bm){
 170:	0d c0       	rjmp	.+26     	; 0x18c <asynch_test+0x70>
 172:	8d e0       	ldi	r24, 0x0D	; 13
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <asynch_test+0x58>
 178:	00 00       	nop
		_delay_us(10);
		temp = USART3_STATUS;
 17a:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 17e:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <temp>
		temp &= SPI_TXCIF_bm;
 182:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <temp>
 186:	80 74       	andi	r24, 0x40	; 64
 188:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <temp>
	USART3.TXDATAL = pass;
	
	temp = USART3_STATUS;
	temp &= SPI_TXCIF_bm;
	//polls TXCIF to check if transmit is complete
	while(temp != SPI_TXCIF_bm){
 18c:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <temp>
 190:	80 34       	cpi	r24, 0x40	; 64
 192:	79 f7       	brne	.-34     	; 0x172 <asynch_test+0x56>
			
	
	
	
	 
 194:	08 95       	ret

00000196 <main>:
 void asynch_test(char );
int main(void)
{
		
	//pls change	
	USART3_BAUD = 10;	
 196:	8a e0       	ldi	r24, 0x0A	; 10
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 19e:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	USART3_CTRLC =  USART_CMODE_ASYNCHRONOUS_gc ||  USART_PMODE_DISABLED_gc
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
	|| USART_CHSIZE_8BIT_gc ||  USART_SBMODE_1BIT_gc ;
			
			
	USART3_CTRLB = USART_RXEN_bm || USART_TXEN_bm;
 1a8:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7e0866>
			
			
			
	PORTB_DIR = 0xFE;
 1ac:	8e ef       	ldi	r24, 0xFE	; 254
 1ae:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	c = 'u';
 1b2:	85 e7       	ldi	r24, 0x75	; 117
 1b4:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <c>


    /* Replace with your application code */
    while (1) 
    {
		asynch_test(c);
 1b8:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <c>
 1bc:	0e 94 8e 00 	call	0x11c	; 0x11c <asynch_test>
 1c0:	fb cf       	rjmp	.-10     	; 0x1b8 <main+0x22>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
