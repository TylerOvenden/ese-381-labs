
A_to_Z_async_Tx.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00804000  0000024e  000002e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000024e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080401a  0080401a  000002fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000032c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003350  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e8b  00000000  00000000  000036e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000042a  00000000  00000000  0000656f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000699c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018e3  00000000  00000000  000069d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cf  00000000  00000000  000082b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00008382  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ee e4       	ldi	r30, 0x4E	; 78
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	aa 31       	cpi	r26, 0x1A	; 26
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	aa e1       	ldi	r26, 0x1A	; 26
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ad 31       	cpi	r26, 0x1D	; 29
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
 12e:	0c 94 25 01 	jmp	0x24a	; 0x24a <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <asynch_test>:
	}
}

void asynch_test(char c) {

	temp = USART3_STATUS;
 136:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 13a:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
	temp &= SPI_DREIF_bm;
 13e:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <temp>
 142:	90 72       	andi	r25, 0x20	; 32
 144:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
	//polls DRIEF to determine if you can write
	while(temp != SPI_DREIF_bm){
 148:	0d c0       	rjmp	.+26     	; 0x164 <asynch_test+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14a:	9d e0       	ldi	r25, 0x0D	; 13
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <asynch_test+0x16>
 150:	00 00       	nop
		_delay_us(10);
		temp = USART3_STATUS;
 152:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 156:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
		temp &= SPI_DREIF_bm;
 15a:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <temp>
 15e:	90 72       	andi	r25, 0x20	; 32
 160:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
void asynch_test(char c) {

	temp = USART3_STATUS;
	temp &= SPI_DREIF_bm;
	//polls DRIEF to determine if you can write
	while(temp != SPI_DREIF_bm){
 164:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <temp>
 168:	90 32       	cpi	r25, 0x20	; 32
 16a:	79 f7       	brne	.-34     	; 0x14a <asynch_test+0x14>
		temp = USART3_STATUS;
		temp &= SPI_DREIF_bm;
		
	}
	
	pass = (uint8_t)c;
 16c:	80 93 1a 40 	sts	0x401A, r24	; 0x80401a <__data_end>
	USART3.TXDATAL = pass;
 170:	90 91 1a 40 	lds	r25, 0x401A	; 0x80401a <__data_end>
 174:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
	
	temp = USART3_STATUS;
 178:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 17c:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
	temp &= SPI_TXCIF_bm;
 180:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <temp>
 184:	90 74       	andi	r25, 0x40	; 64
 186:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
	//polls TXCIF to check if transmit is complete
	while(temp != SPI_TXCIF_bm){
 18a:	0d c0       	rjmp	.+26     	; 0x1a6 <asynch_test+0x70>
 18c:	9d e0       	ldi	r25, 0x0D	; 13
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <asynch_test+0x58>
 192:	00 00       	nop
		_delay_us(10);
		temp = USART3_STATUS;
 194:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 198:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
		temp &= SPI_TXCIF_bm;
 19c:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <temp>
 1a0:	90 74       	andi	r25, 0x40	; 64
 1a2:	90 93 1b 40 	sts	0x401B, r25	; 0x80401b <temp>
	USART3.TXDATAL = pass;
	
	temp = USART3_STATUS;
	temp &= SPI_TXCIF_bm;
	//polls TXCIF to check if transmit is complete
	while(temp != SPI_TXCIF_bm){
 1a6:	90 91 1b 40 	lds	r25, 0x401B	; 0x80401b <temp>
 1aa:	90 34       	cpi	r25, 0x40	; 64
 1ac:	79 f7       	brne	.-34     	; 0x18c <asynch_test+0x56>
		_delay_us(10);
		temp = USART3_STATUS;
		temp &= SPI_TXCIF_bm;
		
	}
	if(c == 'z'){
 1ae:	8a 37       	cpi	r24, 0x7A	; 122
 1b0:	19 f4       	brne	.+6      	; 0x1b8 <asynch_test+0x82>
		
	USART3.TXDATAL = 0x0D;	
 1b2:	8d e0       	ldi	r24, 0x0D	; 13
 1b4:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 1b8:	08 95       	ret

000001ba <main>:
void asynch_test(char );
int main(void)
{
	
	//pls change
	USART3_BAUD = 10;
 1ba:	8a e0       	ldi	r24, 0x0A	; 10
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 1c2:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	USART3_CTRLC =  USART_CMODE_ASYNCHRONOUS_gc ||  USART_PMODE_DISABLED_gc
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
	|| USART_CHSIZE_8BIT_gc ||  USART_SBMODE_1BIT_gc ;
	
	
	USART3_CTRLB = USART_RXEN_bm || USART_TXEN_bm;
 1cc:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7e0866>
	
	
	
	PORTB_DIR = 0xFE;
 1d0:	8e ef       	ldi	r24, 0xFE	; 254
 1d2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	c = 'u';
 1d6:	85 e7       	ldi	r24, 0x75	; 117
 1d8:	80 93 1c 40 	sts	0x401C, r24	; 0x80401c <c>


	int i = 0;
 1dc:	c0 e0       	ldi	r28, 0x00	; 0
 1de:	d0 e0       	ldi	r29, 0x00	; 0
	/* Replace with your application code */
	while (1)
	{
	asynch_test(alpha[i%26]);
 1e0:	ce 01       	movw	r24, r28
 1e2:	6a e1       	ldi	r22, 0x1A	; 26
 1e4:	70 e0       	ldi	r23, 0x00	; 0
 1e6:	0e 94 fd 00 	call	0x1fa	; 0x1fa <__divmodhi4>
 1ea:	fc 01       	movw	r30, r24
 1ec:	e0 50       	subi	r30, 0x00	; 0
 1ee:	f0 4c       	sbci	r31, 0xC0	; 192
 1f0:	80 81       	ld	r24, Z
 1f2:	0e 94 9b 00 	call	0x136	; 0x136 <asynch_test>
	i++;
 1f6:	21 96       	adiw	r28, 0x01	; 1
 1f8:	f3 cf       	rjmp	.-26     	; 0x1e0 <main+0x26>

000001fa <__divmodhi4>:
 1fa:	97 fb       	bst	r25, 7
 1fc:	07 2e       	mov	r0, r23
 1fe:	16 f4       	brtc	.+4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 200:	00 94       	com	r0
 202:	07 d0       	rcall	.+14     	; 0x212 <__divmodhi4_neg1>
 204:	77 fd       	sbrc	r23, 7
 206:	09 d0       	rcall	.+18     	; 0x21a <__divmodhi4_neg2>
 208:	0e 94 11 01 	call	0x222	; 0x222 <__udivmodhi4>
 20c:	07 fc       	sbrc	r0, 7
 20e:	05 d0       	rcall	.+10     	; 0x21a <__divmodhi4_neg2>
 210:	3e f4       	brtc	.+14     	; 0x220 <__divmodhi4_exit>

00000212 <__divmodhi4_neg1>:
 212:	90 95       	com	r25
 214:	81 95       	neg	r24
 216:	9f 4f       	sbci	r25, 0xFF	; 255
 218:	08 95       	ret

0000021a <__divmodhi4_neg2>:
 21a:	70 95       	com	r23
 21c:	61 95       	neg	r22
 21e:	7f 4f       	sbci	r23, 0xFF	; 255

00000220 <__divmodhi4_exit>:
 220:	08 95       	ret

00000222 <__udivmodhi4>:
 222:	aa 1b       	sub	r26, r26
 224:	bb 1b       	sub	r27, r27
 226:	51 e1       	ldi	r21, 0x11	; 17
 228:	07 c0       	rjmp	.+14     	; 0x238 <__udivmodhi4_ep>

0000022a <__udivmodhi4_loop>:
 22a:	aa 1f       	adc	r26, r26
 22c:	bb 1f       	adc	r27, r27
 22e:	a6 17       	cp	r26, r22
 230:	b7 07       	cpc	r27, r23
 232:	10 f0       	brcs	.+4      	; 0x238 <__udivmodhi4_ep>
 234:	a6 1b       	sub	r26, r22
 236:	b7 0b       	sbc	r27, r23

00000238 <__udivmodhi4_ep>:
 238:	88 1f       	adc	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	5a 95       	dec	r21
 23e:	a9 f7       	brne	.-22     	; 0x22a <__udivmodhi4_loop>
 240:	80 95       	com	r24
 242:	90 95       	com	r25
 244:	bc 01       	movw	r22, r24
 246:	cd 01       	movw	r24, r26
 248:	08 95       	ret

0000024a <_exit>:
 24a:	f8 94       	cli

0000024c <__stop_program>:
 24c:	ff cf       	rjmp	.-2      	; 0x24c <__stop_program>
