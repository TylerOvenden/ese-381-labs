
lab10.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00804000  00000b40  00000bd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b40  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003b  00804012  00804012  00000be6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000be6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003929  00000000  00000000  00000cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002f7f  00000000  00000000  00004615  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000727  00000000  00000000  00007594  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  00007cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a46  00000000  00000000  00007db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d6  00000000  00000000  000097f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00009ecc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e0 e4       	ldi	r30, 0x40	; 64
 108:	fb e0       	ldi	r31, 0x0B	; 11
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a2 31       	cpi	r26, 0x12	; 18
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a2 e1       	ldi	r26, 0x12	; 18
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ad 34       	cpi	r26, 0x4D	; 77
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 95 02 	call	0x52a	; 0x52a <main>
 12e:	0c 94 9e 05 	jmp	0xb3c	; 0xb3c <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_adc>:
//
// Revision History     : Initial version
//
//**************************************************************************
void init_adc (void) {
	ADC0_CTRLA = RES12_Bm | ADC_FREERUN_bm;
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f6 e0       	ldi	r31, 0x06	; 6
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
	ADC0_CTRLB = ADC_SAMPNUM_ACC8_gc;
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7e0601>
	ADC0_MUXPOS = ADC_MUXPOS_AIN6_gc;
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
	//turns on enable bit
	ADC0_CTRLA |= ADC_ENABLE_bm;
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
	PORTD_DIR = 0x00; //set PORTD6 as input
 150:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
	//enable pullups
	PORTD_PIN6CTRL = PORT_PULLUPEN_bm;
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <__TEXT_REGION_LENGTH__+0x7e0476>
 15a:	08 95       	ret

0000015c <displayVolt>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
void displayVolt(uint16_t r){
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <displayVolt+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <displayVolt+0x8>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t tem;
	volatile int con;
	//converts voltage to hex by nibble
	for(int i = 0; i<3;i++){
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	29 c0       	rjmp	.+82     	; 0x1c0 <displayVolt+0x64>
	tem = r;
 16e:	89 83       	std	Y+1, r24	; 0x01
 170:	9a 83       	std	Y+2, r25	; 0x02
	//shifts the result by 8,4,0 to the right
	tem <<= (8-(4*i));
 172:	69 81       	ldd	r22, Y+1	; 0x01
 174:	7a 81       	ldd	r23, Y+2	; 0x02
 176:	22 e0       	ldi	r18, 0x02	; 2
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	24 1b       	sub	r18, r20
 17c:	35 0b       	sbc	r19, r21
 17e:	22 0f       	add	r18, r18
 180:	33 1f       	adc	r19, r19
 182:	22 0f       	add	r18, r18
 184:	33 1f       	adc	r19, r19
 186:	fb 01       	movw	r30, r22
 188:	02 c0       	rjmp	.+4      	; 0x18e <displayVolt+0x32>
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	2a 95       	dec	r18
 190:	e2 f7       	brpl	.-8      	; 0x18a <displayVolt+0x2e>
 192:	e9 83       	std	Y+1, r30	; 0x01
 194:	fa 83       	std	Y+2, r31	; 0x02
	//isolates the first nibble
	tem &= 0x000F;
 196:	29 81       	ldd	r18, Y+1	; 0x01
 198:	3a 81       	ldd	r19, Y+2	; 0x02
 19a:	2f 70       	andi	r18, 0x0F	; 15
 19c:	33 27       	eor	r19, r19
 19e:	29 83       	std	Y+1, r18	; 0x01
 1a0:	3a 83       	std	Y+2, r19	; 0x02
	//converts to int
	con = (int)tem;
 1a2:	29 81       	ldd	r18, Y+1	; 0x01
 1a4:	3a 81       	ldd	r19, Y+2	; 0x02
 1a6:	2b 83       	std	Y+3, r18	; 0x03
 1a8:	3c 83       	std	Y+4, r19	; 0x04
	//gets the hex equivalent of this number & adds to
	//temp array of data
	tempHex[i] = hex[con];	
 1aa:	eb 81       	ldd	r30, Y+3	; 0x03
 1ac:	fc 81       	ldd	r31, Y+4	; 0x04
 1ae:	e0 50       	subi	r30, 0x00	; 0
 1b0:	f0 4c       	sbci	r31, 0xC0	; 192
 1b2:	20 81       	ld	r18, Z
 1b4:	fa 01       	movw	r30, r20
 1b6:	e9 5c       	subi	r30, 0xC9	; 201
 1b8:	ff 4b       	sbci	r31, 0xBF	; 191
 1ba:	20 83       	st	Z, r18
//**************************************************************************
void displayVolt(uint16_t r){
	volatile uint16_t tem;
	volatile int con;
	//converts voltage to hex by nibble
	for(int i = 0; i<3;i++){
 1bc:	4f 5f       	subi	r20, 0xFF	; 255
 1be:	5f 4f       	sbci	r21, 0xFF	; 255
 1c0:	43 30       	cpi	r20, 0x03	; 3
 1c2:	51 05       	cpc	r21, r1
 1c4:	a4 f2       	brlt	.-88     	; 0x16e <displayVolt+0x12>
	//temp array of data
	tempHex[i] = hex[con];	
			
	}
//send result to buffer
		sprintf(dsp_buff1, "s", tempHex);
 1c6:	87 e3       	ldi	r24, 0x37	; 55
 1c8:	90 e4       	ldi	r25, 0x40	; 64
 1ca:	9f 93       	push	r25
 1cc:	8f 93       	push	r24
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	90 e4       	ldi	r25, 0x40	; 64
 1d2:	9f 93       	push	r25
 1d4:	8f 93       	push	r24
 1d6:	85 e1       	ldi	r24, 0x15	; 21
 1d8:	90 e4       	ldi	r25, 0x40	; 64
 1da:	9f 93       	push	r25
 1dc:	8f 93       	push	r24
 1de:	0e 94 c1 02 	call	0x582	; 0x582 <sprintf>
}
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	24 96       	adiw	r28, 0x04	; 4
 1f0:	cd bf       	out	0x3d, r28	; 61
 1f2:	de bf       	out	0x3e, r29	; 62
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <convertToBCD>:
//
// Revision History     : Initial version
//
//**************************************************************************
uint32_t convertToBCD(uint16_t val)
{
 1fa:	cf 92       	push	r12
 1fc:	df 92       	push	r13
 1fe:	ef 92       	push	r14
 200:	ff 92       	push	r15
 202:	ac 01       	movw	r20, r24
	uint32_t result = 0;
	int shift = 0;
 204:	e0 e0       	ldi	r30, 0x00	; 0
 206:	f0 e0       	ldi	r31, 0x00	; 0
// Revision History     : Initial version
//
//**************************************************************************
uint32_t convertToBCD(uint16_t val)
{
	uint32_t result = 0;
 208:	c1 2c       	mov	r12, r1
 20a:	d1 2c       	mov	r13, r1
 20c:	76 01       	movw	r14, r12
	int shift = 0;
//loops until value is 0
	while (val > 0)
 20e:	2f c0       	rjmp	.+94     	; 0x26e <__EEPROM_REGION_LENGTH__+0x6e>
	{
		result +=  (val % 10) << shift;
 210:	9a 01       	movw	r18, r20
 212:	ad ec       	ldi	r26, 0xCD	; 205
 214:	bc ec       	ldi	r27, 0xCC	; 204
 216:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 21a:	96 95       	lsr	r25
 21c:	87 95       	ror	r24
 21e:	96 95       	lsr	r25
 220:	87 95       	ror	r24
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	9c 01       	movw	r18, r24
 228:	22 0f       	add	r18, r18
 22a:	33 1f       	adc	r19, r19
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	82 0f       	add	r24, r18
 23a:	93 1f       	adc	r25, r19
 23c:	9a 01       	movw	r18, r20
 23e:	28 1b       	sub	r18, r24
 240:	39 0b       	sbc	r19, r25
 242:	c9 01       	movw	r24, r18
 244:	0e 2e       	mov	r0, r30
 246:	02 c0       	rjmp	.+4      	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 250:	c8 0e       	add	r12, r24
 252:	d9 1e       	adc	r13, r25
 254:	e1 1c       	adc	r14, r1
 256:	f1 1c       	adc	r15, r1
		val = val / 10;
 258:	9a 01       	movw	r18, r20
 25a:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 25e:	ac 01       	movw	r20, r24
 260:	56 95       	lsr	r21
 262:	47 95       	ror	r20
 264:	56 95       	lsr	r21
 266:	47 95       	ror	r20
 268:	56 95       	lsr	r21
 26a:	47 95       	ror	r20
		//adds shift of one nibble
		shift += 4;
 26c:	34 96       	adiw	r30, 0x04	; 4
uint32_t convertToBCD(uint16_t val)
{
	uint32_t result = 0;
	int shift = 0;
//loops until value is 0
	while (val > 0)
 26e:	41 15       	cp	r20, r1
 270:	51 05       	cpc	r21, r1
 272:	71 f6       	brne	.-100    	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
		val = val / 10;
		//adds shift of one nibble
		shift += 4;
	}
	return result;
}
 274:	c7 01       	movw	r24, r14
 276:	b6 01       	movw	r22, r12
 278:	ff 90       	pop	r15
 27a:	ef 90       	pop	r14
 27c:	df 90       	pop	r13
 27e:	cf 90       	pop	r12
 280:	08 95       	ret

00000282 <convert>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
void convert () {
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	cd b7       	in	r28, 0x3d	; 61
 288:	de b7       	in	r29, 0x3e	; 62
 28a:	28 97       	sbiw	r28, 0x08	; 8
 28c:	cd bf       	out	0x3d, r28	; 61
 28e:	de bf       	out	0x3e, r29	; 62
	//start conversion
	ADC0_COMMAND = ADC_STCONV_bm; 
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
	
	//polls for RESRDY flag
	while(ADC0_INTFLAGS != ADC_RESRDY_bm){}
 296:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
 29a:	81 30       	cpi	r24, 0x01	; 1
 29c:	e1 f7       	brne	.-8      	; 0x296 <convert+0x14>
	//takes result of conversion	
	result = ADC0_RES;	
 29e:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 2a2:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
 2a6:	80 93 3a 40 	sts	0x403A, r24	; 0x80403a <result>
 2aa:	90 93 3b 40 	sts	0x403B, r25	; 0x80403b <result+0x1>
	
	displayVolt(result);
 2ae:	80 91 3a 40 	lds	r24, 0x403A	; 0x80403a <result>
 2b2:	90 91 3b 40 	lds	r25, 0x403B	; 0x80403b <result+0x1>
 2b6:	0e 94 ae 00 	call	0x15c	; 0x15c <displayVolt>
	//parses the result to 32 bits for multiplication result
	volatile uint32_t mult = (uint32_t)result;
 2ba:	80 91 3a 40 	lds	r24, 0x403A	; 0x80403a <result>
 2be:	90 91 3b 40 	lds	r25, 0x403B	; 0x80403b <result+0x1>
 2c2:	a0 e0       	ldi	r26, 0x00	; 0
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	89 83       	std	Y+1, r24	; 0x01
 2c8:	9a 83       	std	Y+2, r25	; 0x02
 2ca:	ab 83       	std	Y+3, r26	; 0x03
 2cc:	bc 83       	std	Y+4, r27	; 0x04
	
	//arithmetic for getting vout in mv
	mult = (mult*2500)/4096;
 2ce:	29 81       	ldd	r18, Y+1	; 0x01
 2d0:	3a 81       	ldd	r19, Y+2	; 0x02
 2d2:	4b 81       	ldd	r20, Y+3	; 0x03
 2d4:	5c 81       	ldd	r21, Y+4	; 0x04
 2d6:	a4 ec       	ldi	r26, 0xC4	; 196
 2d8:	b9 e0       	ldi	r27, 0x09	; 9
 2da:	0e 94 b6 02 	call	0x56c	; 0x56c <__muluhisi3>
 2de:	dc 01       	movw	r26, r24
 2e0:	cb 01       	movw	r24, r22
 2e2:	07 2e       	mov	r0, r23
 2e4:	7c e0       	ldi	r23, 0x0C	; 12
 2e6:	b6 95       	lsr	r27
 2e8:	a7 95       	ror	r26
 2ea:	97 95       	ror	r25
 2ec:	87 95       	ror	r24
 2ee:	7a 95       	dec	r23
 2f0:	d1 f7       	brne	.-12     	; 0x2e6 <convert+0x64>
 2f2:	70 2d       	mov	r23, r0
 2f4:	89 83       	std	Y+1, r24	; 0x01
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	ab 83       	std	Y+3, r26	; 0x03
 2fa:	bc 83       	std	Y+4, r27	; 0x04
	
	//checks if result is > or < 500
	//-500 done to get the temperature
	if(mult > 500){
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	ab 81       	ldd	r26, Y+3	; 0x03
 302:	bc 81       	ldd	r27, Y+4	; 0x04
 304:	85 3f       	cpi	r24, 0xF5	; 245
 306:	91 40       	sbci	r25, 0x01	; 1
 308:	a1 05       	cpc	r26, r1
 30a:	b1 05       	cpc	r27, r1
 30c:	68 f0       	brcs	.+26     	; 0x328 <convert+0xa6>
		mult -= 500;
 30e:	89 81       	ldd	r24, Y+1	; 0x01
 310:	9a 81       	ldd	r25, Y+2	; 0x02
 312:	ab 81       	ldd	r26, Y+3	; 0x03
 314:	bc 81       	ldd	r27, Y+4	; 0x04
 316:	84 5f       	subi	r24, 0xF4	; 244
 318:	91 40       	sbci	r25, 0x01	; 1
 31a:	a1 09       	sbc	r26, r1
 31c:	b1 09       	sbc	r27, r1
 31e:	89 83       	std	Y+1, r24	; 0x01
 320:	9a 83       	std	Y+2, r25	; 0x02
 322:	ab 83       	std	Y+3, r26	; 0x03
 324:	bc 83       	std	Y+4, r27	; 0x04
 326:	16 c0       	rjmp	.+44     	; 0x354 <convert+0xd2>
	}
	else {
		//if mult < 500, subtract mult from 500
		//mark variable to signify result is negative
		mult = 500-mult;
 328:	49 81       	ldd	r20, Y+1	; 0x01
 32a:	5a 81       	ldd	r21, Y+2	; 0x02
 32c:	6b 81       	ldd	r22, Y+3	; 0x03
 32e:	7c 81       	ldd	r23, Y+4	; 0x04
 330:	84 ef       	ldi	r24, 0xF4	; 244
 332:	91 e0       	ldi	r25, 0x01	; 1
 334:	a0 e0       	ldi	r26, 0x00	; 0
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	84 1b       	sub	r24, r20
 33a:	95 0b       	sbc	r25, r21
 33c:	a6 0b       	sbc	r26, r22
 33e:	b7 0b       	sbc	r27, r23
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	9a 83       	std	Y+2, r25	; 0x02
 344:	ab 83       	std	Y+3, r26	; 0x03
 346:	bc 83       	std	Y+4, r27	; 0x04
		boolean = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	80 93 12 40 	sts	0x4012, r24	; 0x804012 <__data_end>
 350:	90 93 13 40 	sts	0x4013, r25	; 0x804013 <__data_end+0x1>
	
	
	//converts result to bcd
	//parses to uint16_t since mult would never be > 500
	//from testing
	volatile uint32_t bcd = convertToBCD((uint16_t)mult);
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	9a 81       	ldd	r25, Y+2	; 0x02
 358:	ab 81       	ldd	r26, Y+3	; 0x03
 35a:	bc 81       	ldd	r27, Y+4	; 0x04
 35c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <convertToBCD>
 360:	6d 83       	std	Y+5, r22	; 0x05
 362:	7e 83       	std	Y+6, r23	; 0x06
 364:	8f 83       	std	Y+7, r24	; 0x07
 366:	98 87       	std	Y+8, r25	; 0x08
		
}
 368:	28 96       	adiw	r28, 0x08	; 8
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	df 91       	pop	r29
 370:	cf 91       	pop	r28
 372:	08 95       	ret

00000374 <init_spi_lcd>:
// Revision History     : Initial version
//
//**************************************************************************
void init_spi_lcd (void) {
	
		PORTA_DIR = 0xF0;
 374:	80 ef       	ldi	r24, 0xF0	; 240
 376:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
		PORTC_DIR = 0x01;
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
		//configures SPI
		SPI0_CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm;
 380:	91 e2       	ldi	r25, 0x21	; 33
 382:	90 93 40 09 	sts	0x0940, r25	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
		SPI0_CTRLB = SPI_MODE1_bp;
 386:	80 93 41 09 	sts	0x0941, r24	; 0x800941 <__TEXT_REGION_LENGTH__+0x7e0941>
		SPI0_INTCTRL = SPI_IE_bm;
 38a:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <__TEXT_REGION_LENGTH__+0x7e0942>
		//select DOG
		PORTA_OUT |= 0x80;
 38e:	e4 e0       	ldi	r30, 0x04	; 4
 390:	f4 e0       	ldi	r31, 0x04	; 4
 392:	80 81       	ld	r24, Z
 394:	80 68       	ori	r24, 0x80	; 128
 396:	80 83       	st	Z, r24
 398:	08 95       	ret

0000039a <lcd_spi_transmit_CMD>:
//
// Revision History     : Initial version
//
//**************************************************************************
void lcd_spi_transmit_CMD (unsigned char cmd) {
		PORTA_OUT |= 0x80;
 39a:	e4 e0       	ldi	r30, 0x04	; 4
 39c:	f4 e0       	ldi	r31, 0x04	; 4
 39e:	90 81       	ld	r25, Z
 3a0:	90 68       	ori	r25, 0x80	; 128
 3a2:	90 83       	st	Z, r25
		PORTC_OUT &= 0x00;
 3a4:	e4 e4       	ldi	r30, 0x44	; 68
 3a6:	f4 e0       	ldi	r31, 0x04	; 4
 3a8:	90 81       	ld	r25, Z
 3aa:	10 82       	st	Z, r1
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready 
 3ac:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3b0:	90 38       	cpi	r25, 0x80	; 128
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <lcd_spi_transmit_CMD+0x12>
		SPI0_DATA = cmd;
 3b4:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready		
 3b8:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 3bc:	80 38       	cpi	r24, 0x80	; 128
 3be:	e1 f7       	brne	.-8      	; 0x3b8 <lcd_spi_transmit_CMD+0x1e>
			PORTA_OUT &= 0x7F;	
 3c0:	e4 e0       	ldi	r30, 0x04	; 4
 3c2:	f4 e0       	ldi	r31, 0x04	; 4
 3c4:	80 81       	ld	r24, Z
 3c6:	8f 77       	andi	r24, 0x7F	; 127
 3c8:	80 83       	st	Z, r24
 3ca:	08 95       	ret

000003cc <init_lcd_dog>:
//
//**************************************************************************

void init_lcd_dog (void) {
	
	init_spi_lcd();		//Initialize mcu for LCD SPI
 3cc:	0e 94 ba 01 	call	0x374	; 0x374 <init_spi_lcd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3d0:	8f e3       	ldi	r24, 0x3F	; 63
 3d2:	9c e9       	ldi	r25, 0x9C	; 156
 3d4:	01 97       	sbiw	r24, 0x01	; 1
 3d6:	f1 f7       	brne	.-4      	; 0x3d4 <init_lcd_dog+0x8>
 3d8:	00 c0       	rjmp	.+0      	; 0x3da <init_lcd_dog+0xe>
 3da:	00 00       	nop
	//start_dly_40ms:
	_delay_ms(40);


	//func_set1:
	lcd_spi_transmit_CMD(0x39);   // sedn function set #1
 3dc:	89 e3       	ldi	r24, 0x39	; 57
 3de:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3e2:	95 e3       	ldi	r25, 0x35	; 53
 3e4:	9a 95       	dec	r25
 3e6:	f1 f7       	brne	.-4      	; 0x3e4 <init_lcd_dog+0x18>
 3e8:	00 00       	nop
		_delay_us(40);	//delay for command to be processed


	//func_set2:
	lcd_spi_transmit_CMD(0x39);	//send fuction set #2
 3ea:	89 e3       	ldi	r24, 0x39	; 57
 3ec:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 3f0:	25 e3       	ldi	r18, 0x35	; 53
 3f2:	2a 95       	dec	r18
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <init_lcd_dog+0x26>
 3f6:	00 00       	nop
		_delay_us(40);	//delay for command to be processed


	//bias_set:
	lcd_spi_transmit_CMD(0x1E);	//set bias value.
 3f8:	8e e1       	ldi	r24, 0x1E	; 30
 3fa:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 3fe:	85 e3       	ldi	r24, 0x35	; 53
 400:	8a 95       	dec	r24
 402:	f1 f7       	brne	.-4      	; 0x400 <__LOCK_REGION_LENGTH__>
 404:	00 00       	nop
	_delay_us(40);//delay for command to be processed


	//power_ctrl:
	lcd_spi_transmit_CMD(0x55);	//~ 0x50 nominal for 5V
 406:	85 e5       	ldi	r24, 0x55	; 85
 408:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 40c:	95 e3       	ldi	r25, 0x35	; 53
 40e:	9a 95       	dec	r25
 410:	f1 f7       	brne	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 412:	00 00       	nop
	//~ 0x55 for 3.3V (delicate adjustment).
	_delay_us(40);	//delay for command to be processed


	//follower_ctrl:
	lcd_spi_transmit_CMD(0x6C);	//follower mode on...
 414:	8c e6       	ldi	r24, 0x6C	; 108
 416:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 41a:	2f e7       	ldi	r18, 0x7F	; 127
 41c:	89 ea       	ldi	r24, 0xA9	; 169
 41e:	93 e0       	ldi	r25, 0x03	; 3
 420:	21 50       	subi	r18, 0x01	; 1
 422:	80 40       	sbci	r24, 0x00	; 0
 424:	90 40       	sbci	r25, 0x00	; 0
 426:	e1 f7       	brne	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	00 c0       	rjmp	.+0      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 42a:	00 00       	nop
	_delay_ms(300);	//delay for command to be processed


	//display_on:
	lcd_spi_transmit_CMD(0x0c);	//display on, cursor off, blink off
 42c:	8c e0       	ldi	r24, 0x0C	; 12
 42e:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 432:	25 e3       	ldi	r18, 0x35	; 53
 434:	2a 95       	dec	r18
 436:	f1 f7       	brne	.-4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 438:	00 00       	nop
	_delay_us(40);	//delay for command to be processed


	//clr_display:
	lcd_spi_transmit_CMD(0x01);	//clear display, cursor home
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 440:	85 e3       	ldi	r24, 0x35	; 53
 442:	8a 95       	dec	r24
 444:	f1 f7       	brne	.-4      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 446:	00 00       	nop
	_delay_us(40);	//delay for command to be processed


	//entry_mode:
	lcd_spi_transmit_CMD(0x06);	//clear display, cursor home
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 44e:	95 e3       	ldi	r25, 0x35	; 53
 450:	9a 95       	dec	r25
 452:	f1 f7       	brne	.-4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 454:	00 00       	nop
 456:	08 95       	ret

00000458 <lcd_spi_transmit_DATA>:
//
// Revision History     : Initial version
//
//**************************************************************************
void lcd_spi_transmit_DATA (unsigned char data) {
		PORTA_OUT |= 0x80;
 458:	e4 e0       	ldi	r30, 0x04	; 4
 45a:	f4 e0       	ldi	r31, 0x04	; 4
 45c:	90 81       	ld	r25, Z
 45e:	90 68       	ori	r25, 0x80	; 128
 460:	90 83       	st	Z, r25
		PORTC_OUT |= 0x01;
 462:	e4 e4       	ldi	r30, 0x44	; 68
 464:	f4 e0       	ldi	r31, 0x04	; 4
 466:	90 81       	ld	r25, Z
 468:	91 60       	ori	r25, 0x01	; 1
 46a:	90 83       	st	Z, r25
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 46c:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 470:	90 38       	cpi	r25, 0x80	; 128
 472:	e1 f7       	brne	.-8      	; 0x46c <lcd_spi_transmit_DATA+0x14>
		SPI0_DATA = data;
 474:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 478:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 47c:	80 38       	cpi	r24, 0x80	; 128
 47e:	e1 f7       	brne	.-8      	; 0x478 <lcd_spi_transmit_DATA+0x20>
		PORTA_OUT &= 0x7F;
 480:	e4 e0       	ldi	r30, 0x04	; 4
 482:	f4 e0       	ldi	r31, 0x04	; 4
 484:	80 81       	ld	r24, Z
 486:	8f 77       	andi	r24, 0x7F	; 127
 488:	80 83       	st	Z, r24
 48a:	08 95       	ret

0000048c <update_lcd_dog>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
void update_lcd_dog(void) {
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29

	init_spi_lcd();		//init SPI port for LCD.
 490:	0e 94 ba 01 	call	0x374	; 0x374 <init_spi_lcd>

	// send line 1 to the LCD module.
	lcd_spi_transmit_CMD(0x80);	//init DDRAM addr-ctr
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 49a:	85 e3       	ldi	r24, 0x35	; 53
 49c:	8a 95       	dec	r24
 49e:	f1 f7       	brne	.-4      	; 0x49c <update_lcd_dog+0x10>
 4a0:	00 00       	nop
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4a2:	c0 e0       	ldi	r28, 0x00	; 0
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
 4a6:	0b c0       	rjmp	.+22     	; 0x4be <update_lcd_dog+0x32>
		lcd_spi_transmit_DATA(dsp_buff1[i]);
 4a8:	fe 01       	movw	r30, r28
 4aa:	eb 5e       	subi	r30, 0xEB	; 235
 4ac:	ff 4b       	sbci	r31, 0xBF	; 191
 4ae:	80 81       	ld	r24, Z
 4b0:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_spi_transmit_DATA>
 4b4:	85 e3       	ldi	r24, 0x35	; 53
 4b6:	8a 95       	dec	r24
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <update_lcd_dog+0x2a>
 4ba:	00 00       	nop
	init_spi_lcd();		//init SPI port for LCD.

	// send line 1 to the LCD module.
	lcd_spi_transmit_CMD(0x80);	//init DDRAM addr-ctr
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4bc:	21 96       	adiw	r28, 0x01	; 1
 4be:	c0 31       	cpi	r28, 0x10	; 16
 4c0:	d1 05       	cpc	r29, r1
 4c2:	94 f3       	brlt	.-28     	; 0x4a8 <update_lcd_dog+0x1c>
		lcd_spi_transmit_DATA(dsp_buff1[i]);
		_delay_us(40);
	}
	
	// send line 2 to the LCD module.
	lcd_spi_transmit_CMD(0x90);	//init DDRAM addr-ctr
 4c4:	80 e9       	ldi	r24, 0x90	; 144
 4c6:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 4ca:	85 e3       	ldi	r24, 0x35	; 53
 4cc:	8a 95       	dec	r24
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <update_lcd_dog+0x40>
 4d0:	00 00       	nop
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4d2:	c0 e0       	ldi	r28, 0x00	; 0
 4d4:	d0 e0       	ldi	r29, 0x00	; 0
 4d6:	0b c0       	rjmp	.+22     	; 0x4ee <update_lcd_dog+0x62>
		lcd_spi_transmit_DATA(dsp_buff2[i]);
 4d8:	fe 01       	movw	r30, r28
 4da:	ea 5d       	subi	r30, 0xDA	; 218
 4dc:	ff 4b       	sbci	r31, 0xBF	; 191
 4de:	80 81       	ld	r24, Z
 4e0:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_spi_transmit_DATA>
 4e4:	85 e3       	ldi	r24, 0x35	; 53
 4e6:	8a 95       	dec	r24
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <update_lcd_dog+0x5a>
 4ea:	00 00       	nop
	}
	
	// send line 2 to the LCD module.
	lcd_spi_transmit_CMD(0x90);	//init DDRAM addr-ctr
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4ec:	21 96       	adiw	r28, 0x01	; 1
 4ee:	c0 31       	cpi	r28, 0x10	; 16
 4f0:	d1 05       	cpc	r29, r1
 4f2:	94 f3       	brlt	.-28     	; 0x4d8 <update_lcd_dog+0x4c>
		lcd_spi_transmit_DATA(dsp_buff2[i]);
		_delay_us(40);
	}
	
	// send line 3 to the LCD module.
	lcd_spi_transmit_CMD(0xA0);	//init DDRAM addr-ctr
 4f4:	80 ea       	ldi	r24, 0xA0	; 160
 4f6:	0e 94 cd 01 	call	0x39a	; 0x39a <lcd_spi_transmit_CMD>
 4fa:	85 e3       	ldi	r24, 0x35	; 53
 4fc:	8a 95       	dec	r24
 4fe:	f1 f7       	brne	.-4      	; 0x4fc <update_lcd_dog+0x70>
 500:	00 00       	nop
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 502:	c0 e0       	ldi	r28, 0x00	; 0
 504:	d0 e0       	ldi	r29, 0x00	; 0
 506:	0b c0       	rjmp	.+22     	; 0x51e <update_lcd_dog+0x92>
		lcd_spi_transmit_DATA(dsp_buff3[i]);
 508:	fe 01       	movw	r30, r28
 50a:	e4 5c       	subi	r30, 0xC4	; 196
 50c:	ff 4b       	sbci	r31, 0xBF	; 191
 50e:	80 81       	ld	r24, Z
 510:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_spi_transmit_DATA>
 514:	85 e3       	ldi	r24, 0x35	; 53
 516:	8a 95       	dec	r24
 518:	f1 f7       	brne	.-4      	; 0x516 <update_lcd_dog+0x8a>
 51a:	00 00       	nop
	}
	
	// send line 3 to the LCD module.
	lcd_spi_transmit_CMD(0xA0);	//init DDRAM addr-ctr
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 51c:	21 96       	adiw	r28, 0x01	; 1
 51e:	c0 31       	cpi	r28, 0x10	; 16
 520:	d1 05       	cpc	r29, r1
 522:	94 f3       	brlt	.-28     	; 0x508 <update_lcd_dog+0x7c>
		lcd_spi_transmit_DATA(dsp_buff3[i]);
		_delay_us(40);
	}
}
 524:	df 91       	pop	r29
 526:	cf 91       	pop	r28
 528:	08 95       	ret

0000052a <main>:
volatile uint16_t result;
volatile uint8_t temp;
volatile int boolean = 0;
int main(void) {
	
	init_lcd_dog();
 52a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <init_lcd_dog>
	init_adc();
 52e:	0e 94 9b 00 	call	0x136	; 0x136 <init_adc>
	while(1) {

		convert();
 532:	0e 94 41 01 	call	0x282	; 0x282 <convert>
		update_lcd_dog();
 536:	0e 94 46 02 	call	0x48c	; 0x48c <update_lcd_dog>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53a:	2f e7       	ldi	r18, 0x7F	; 127
 53c:	8a e1       	ldi	r24, 0x1A	; 26
 53e:	96 e0       	ldi	r25, 0x06	; 6
 540:	21 50       	subi	r18, 0x01	; 1
 542:	80 40       	sbci	r24, 0x00	; 0
 544:	90 40       	sbci	r25, 0x00	; 0
 546:	e1 f7       	brne	.-8      	; 0x540 <main+0x16>
 548:	00 c0       	rjmp	.+0      	; 0x54a <main+0x20>
 54a:	00 00       	nop
 54c:	f2 cf       	rjmp	.-28     	; 0x532 <main+0x8>

0000054e <__umulhisi3>:
 54e:	a2 9f       	mul	r26, r18
 550:	b0 01       	movw	r22, r0
 552:	b3 9f       	mul	r27, r19
 554:	c0 01       	movw	r24, r0
 556:	a3 9f       	mul	r26, r19
 558:	70 0d       	add	r23, r0
 55a:	81 1d       	adc	r24, r1
 55c:	11 24       	eor	r1, r1
 55e:	91 1d       	adc	r25, r1
 560:	b2 9f       	mul	r27, r18
 562:	70 0d       	add	r23, r0
 564:	81 1d       	adc	r24, r1
 566:	11 24       	eor	r1, r1
 568:	91 1d       	adc	r25, r1
 56a:	08 95       	ret

0000056c <__muluhisi3>:
 56c:	0e 94 a7 02 	call	0x54e	; 0x54e <__umulhisi3>
 570:	a5 9f       	mul	r26, r21
 572:	90 0d       	add	r25, r0
 574:	b4 9f       	mul	r27, r20
 576:	90 0d       	add	r25, r0
 578:	a4 9f       	mul	r26, r20
 57a:	80 0d       	add	r24, r0
 57c:	91 1d       	adc	r25, r1
 57e:	11 24       	eor	r1, r1
 580:	08 95       	ret

00000582 <sprintf>:
 582:	0f 93       	push	r16
 584:	1f 93       	push	r17
 586:	cf 93       	push	r28
 588:	df 93       	push	r29
 58a:	cd b7       	in	r28, 0x3d	; 61
 58c:	de b7       	in	r29, 0x3e	; 62
 58e:	2e 97       	sbiw	r28, 0x0e	; 14
 590:	cd bf       	out	0x3d, r28	; 61
 592:	de bf       	out	0x3e, r29	; 62
 594:	0d 89       	ldd	r16, Y+21	; 0x15
 596:	1e 89       	ldd	r17, Y+22	; 0x16
 598:	86 e0       	ldi	r24, 0x06	; 6
 59a:	8c 83       	std	Y+4, r24	; 0x04
 59c:	09 83       	std	Y+1, r16	; 0x01
 59e:	1a 83       	std	Y+2, r17	; 0x02
 5a0:	8f ef       	ldi	r24, 0xFF	; 255
 5a2:	9f e7       	ldi	r25, 0x7F	; 127
 5a4:	8d 83       	std	Y+5, r24	; 0x05
 5a6:	9e 83       	std	Y+6, r25	; 0x06
 5a8:	ae 01       	movw	r20, r28
 5aa:	47 5e       	subi	r20, 0xE7	; 231
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	6f 89       	ldd	r22, Y+23	; 0x17
 5b0:	78 8d       	ldd	r23, Y+24	; 0x18
 5b2:	ce 01       	movw	r24, r28
 5b4:	01 96       	adiw	r24, 0x01	; 1
 5b6:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <vfprintf>
 5ba:	ef 81       	ldd	r30, Y+7	; 0x07
 5bc:	f8 85       	ldd	r31, Y+8	; 0x08
 5be:	e0 0f       	add	r30, r16
 5c0:	f1 1f       	adc	r31, r17
 5c2:	10 82       	st	Z, r1
 5c4:	2e 96       	adiw	r28, 0x0e	; 14
 5c6:	cd bf       	out	0x3d, r28	; 61
 5c8:	de bf       	out	0x3e, r29	; 62
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <vfprintf>:
 5d4:	2f 92       	push	r2
 5d6:	3f 92       	push	r3
 5d8:	4f 92       	push	r4
 5da:	5f 92       	push	r5
 5dc:	6f 92       	push	r6
 5de:	7f 92       	push	r7
 5e0:	8f 92       	push	r8
 5e2:	9f 92       	push	r9
 5e4:	af 92       	push	r10
 5e6:	bf 92       	push	r11
 5e8:	cf 92       	push	r12
 5ea:	df 92       	push	r13
 5ec:	ef 92       	push	r14
 5ee:	ff 92       	push	r15
 5f0:	0f 93       	push	r16
 5f2:	1f 93       	push	r17
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	cd b7       	in	r28, 0x3d	; 61
 5fa:	de b7       	in	r29, 0x3e	; 62
 5fc:	2b 97       	sbiw	r28, 0x0b	; 11
 5fe:	cd bf       	out	0x3d, r28	; 61
 600:	de bf       	out	0x3e, r29	; 62
 602:	6c 01       	movw	r12, r24
 604:	7b 01       	movw	r14, r22
 606:	8a 01       	movw	r16, r20
 608:	fc 01       	movw	r30, r24
 60a:	16 82       	std	Z+6, r1	; 0x06
 60c:	17 82       	std	Z+7, r1	; 0x07
 60e:	83 81       	ldd	r24, Z+3	; 0x03
 610:	81 ff       	sbrs	r24, 1
 612:	cc c1       	rjmp	.+920    	; 0x9ac <vfprintf+0x3d8>
 614:	ce 01       	movw	r24, r28
 616:	01 96       	adiw	r24, 0x01	; 1
 618:	3c 01       	movw	r6, r24
 61a:	f6 01       	movw	r30, r12
 61c:	93 81       	ldd	r25, Z+3	; 0x03
 61e:	f7 01       	movw	r30, r14
 620:	93 fd       	sbrc	r25, 3
 622:	85 91       	lpm	r24, Z+
 624:	93 ff       	sbrs	r25, 3
 626:	81 91       	ld	r24, Z+
 628:	7f 01       	movw	r14, r30
 62a:	88 23       	and	r24, r24
 62c:	09 f4       	brne	.+2      	; 0x630 <vfprintf+0x5c>
 62e:	ba c1       	rjmp	.+884    	; 0x9a4 <vfprintf+0x3d0>
 630:	85 32       	cpi	r24, 0x25	; 37
 632:	39 f4       	brne	.+14     	; 0x642 <vfprintf+0x6e>
 634:	93 fd       	sbrc	r25, 3
 636:	85 91       	lpm	r24, Z+
 638:	93 ff       	sbrs	r25, 3
 63a:	81 91       	ld	r24, Z+
 63c:	7f 01       	movw	r14, r30
 63e:	85 32       	cpi	r24, 0x25	; 37
 640:	29 f4       	brne	.+10     	; 0x64c <vfprintf+0x78>
 642:	b6 01       	movw	r22, r12
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 64a:	e7 cf       	rjmp	.-50     	; 0x61a <vfprintf+0x46>
 64c:	91 2c       	mov	r9, r1
 64e:	21 2c       	mov	r2, r1
 650:	31 2c       	mov	r3, r1
 652:	ff e1       	ldi	r31, 0x1F	; 31
 654:	f3 15       	cp	r31, r3
 656:	d8 f0       	brcs	.+54     	; 0x68e <vfprintf+0xba>
 658:	8b 32       	cpi	r24, 0x2B	; 43
 65a:	79 f0       	breq	.+30     	; 0x67a <vfprintf+0xa6>
 65c:	38 f4       	brcc	.+14     	; 0x66c <vfprintf+0x98>
 65e:	80 32       	cpi	r24, 0x20	; 32
 660:	79 f0       	breq	.+30     	; 0x680 <vfprintf+0xac>
 662:	83 32       	cpi	r24, 0x23	; 35
 664:	a1 f4       	brne	.+40     	; 0x68e <vfprintf+0xba>
 666:	23 2d       	mov	r18, r3
 668:	20 61       	ori	r18, 0x10	; 16
 66a:	1d c0       	rjmp	.+58     	; 0x6a6 <vfprintf+0xd2>
 66c:	8d 32       	cpi	r24, 0x2D	; 45
 66e:	61 f0       	breq	.+24     	; 0x688 <vfprintf+0xb4>
 670:	80 33       	cpi	r24, 0x30	; 48
 672:	69 f4       	brne	.+26     	; 0x68e <vfprintf+0xba>
 674:	23 2d       	mov	r18, r3
 676:	21 60       	ori	r18, 0x01	; 1
 678:	16 c0       	rjmp	.+44     	; 0x6a6 <vfprintf+0xd2>
 67a:	83 2d       	mov	r24, r3
 67c:	82 60       	ori	r24, 0x02	; 2
 67e:	38 2e       	mov	r3, r24
 680:	e3 2d       	mov	r30, r3
 682:	e4 60       	ori	r30, 0x04	; 4
 684:	3e 2e       	mov	r3, r30
 686:	2a c0       	rjmp	.+84     	; 0x6dc <vfprintf+0x108>
 688:	f3 2d       	mov	r31, r3
 68a:	f8 60       	ori	r31, 0x08	; 8
 68c:	1d c0       	rjmp	.+58     	; 0x6c8 <vfprintf+0xf4>
 68e:	37 fc       	sbrc	r3, 7
 690:	2d c0       	rjmp	.+90     	; 0x6ec <vfprintf+0x118>
 692:	20 ed       	ldi	r18, 0xD0	; 208
 694:	28 0f       	add	r18, r24
 696:	2a 30       	cpi	r18, 0x0A	; 10
 698:	40 f0       	brcs	.+16     	; 0x6aa <vfprintf+0xd6>
 69a:	8e 32       	cpi	r24, 0x2E	; 46
 69c:	b9 f4       	brne	.+46     	; 0x6cc <vfprintf+0xf8>
 69e:	36 fc       	sbrc	r3, 6
 6a0:	81 c1       	rjmp	.+770    	; 0x9a4 <vfprintf+0x3d0>
 6a2:	23 2d       	mov	r18, r3
 6a4:	20 64       	ori	r18, 0x40	; 64
 6a6:	32 2e       	mov	r3, r18
 6a8:	19 c0       	rjmp	.+50     	; 0x6dc <vfprintf+0x108>
 6aa:	36 fe       	sbrs	r3, 6
 6ac:	06 c0       	rjmp	.+12     	; 0x6ba <vfprintf+0xe6>
 6ae:	8a e0       	ldi	r24, 0x0A	; 10
 6b0:	98 9e       	mul	r9, r24
 6b2:	20 0d       	add	r18, r0
 6b4:	11 24       	eor	r1, r1
 6b6:	92 2e       	mov	r9, r18
 6b8:	11 c0       	rjmp	.+34     	; 0x6dc <vfprintf+0x108>
 6ba:	ea e0       	ldi	r30, 0x0A	; 10
 6bc:	2e 9e       	mul	r2, r30
 6be:	20 0d       	add	r18, r0
 6c0:	11 24       	eor	r1, r1
 6c2:	22 2e       	mov	r2, r18
 6c4:	f3 2d       	mov	r31, r3
 6c6:	f0 62       	ori	r31, 0x20	; 32
 6c8:	3f 2e       	mov	r3, r31
 6ca:	08 c0       	rjmp	.+16     	; 0x6dc <vfprintf+0x108>
 6cc:	8c 36       	cpi	r24, 0x6C	; 108
 6ce:	21 f4       	brne	.+8      	; 0x6d8 <vfprintf+0x104>
 6d0:	83 2d       	mov	r24, r3
 6d2:	80 68       	ori	r24, 0x80	; 128
 6d4:	38 2e       	mov	r3, r24
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <vfprintf+0x108>
 6d8:	88 36       	cpi	r24, 0x68	; 104
 6da:	41 f4       	brne	.+16     	; 0x6ec <vfprintf+0x118>
 6dc:	f7 01       	movw	r30, r14
 6de:	93 fd       	sbrc	r25, 3
 6e0:	85 91       	lpm	r24, Z+
 6e2:	93 ff       	sbrs	r25, 3
 6e4:	81 91       	ld	r24, Z+
 6e6:	7f 01       	movw	r14, r30
 6e8:	81 11       	cpse	r24, r1
 6ea:	b3 cf       	rjmp	.-154    	; 0x652 <vfprintf+0x7e>
 6ec:	98 2f       	mov	r25, r24
 6ee:	9f 7d       	andi	r25, 0xDF	; 223
 6f0:	95 54       	subi	r25, 0x45	; 69
 6f2:	93 30       	cpi	r25, 0x03	; 3
 6f4:	28 f4       	brcc	.+10     	; 0x700 <vfprintf+0x12c>
 6f6:	0c 5f       	subi	r16, 0xFC	; 252
 6f8:	1f 4f       	sbci	r17, 0xFF	; 255
 6fa:	9f e3       	ldi	r25, 0x3F	; 63
 6fc:	99 83       	std	Y+1, r25	; 0x01
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <vfprintf+0x146>
 700:	83 36       	cpi	r24, 0x63	; 99
 702:	31 f0       	breq	.+12     	; 0x710 <vfprintf+0x13c>
 704:	83 37       	cpi	r24, 0x73	; 115
 706:	71 f0       	breq	.+28     	; 0x724 <vfprintf+0x150>
 708:	83 35       	cpi	r24, 0x53	; 83
 70a:	09 f0       	breq	.+2      	; 0x70e <vfprintf+0x13a>
 70c:	59 c0       	rjmp	.+178    	; 0x7c0 <vfprintf+0x1ec>
 70e:	21 c0       	rjmp	.+66     	; 0x752 <vfprintf+0x17e>
 710:	f8 01       	movw	r30, r16
 712:	80 81       	ld	r24, Z
 714:	89 83       	std	Y+1, r24	; 0x01
 716:	0e 5f       	subi	r16, 0xFE	; 254
 718:	1f 4f       	sbci	r17, 0xFF	; 255
 71a:	88 24       	eor	r8, r8
 71c:	83 94       	inc	r8
 71e:	91 2c       	mov	r9, r1
 720:	53 01       	movw	r10, r6
 722:	13 c0       	rjmp	.+38     	; 0x74a <vfprintf+0x176>
 724:	28 01       	movw	r4, r16
 726:	f2 e0       	ldi	r31, 0x02	; 2
 728:	4f 0e       	add	r4, r31
 72a:	51 1c       	adc	r5, r1
 72c:	f8 01       	movw	r30, r16
 72e:	a0 80       	ld	r10, Z
 730:	b1 80       	ldd	r11, Z+1	; 0x01
 732:	36 fe       	sbrs	r3, 6
 734:	03 c0       	rjmp	.+6      	; 0x73c <vfprintf+0x168>
 736:	69 2d       	mov	r22, r9
 738:	70 e0       	ldi	r23, 0x00	; 0
 73a:	02 c0       	rjmp	.+4      	; 0x740 <vfprintf+0x16c>
 73c:	6f ef       	ldi	r22, 0xFF	; 255
 73e:	7f ef       	ldi	r23, 0xFF	; 255
 740:	c5 01       	movw	r24, r10
 742:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <strnlen>
 746:	4c 01       	movw	r8, r24
 748:	82 01       	movw	r16, r4
 74a:	f3 2d       	mov	r31, r3
 74c:	ff 77       	andi	r31, 0x7F	; 127
 74e:	3f 2e       	mov	r3, r31
 750:	16 c0       	rjmp	.+44     	; 0x77e <vfprintf+0x1aa>
 752:	28 01       	movw	r4, r16
 754:	22 e0       	ldi	r18, 0x02	; 2
 756:	42 0e       	add	r4, r18
 758:	51 1c       	adc	r5, r1
 75a:	f8 01       	movw	r30, r16
 75c:	a0 80       	ld	r10, Z
 75e:	b1 80       	ldd	r11, Z+1	; 0x01
 760:	36 fe       	sbrs	r3, 6
 762:	03 c0       	rjmp	.+6      	; 0x76a <vfprintf+0x196>
 764:	69 2d       	mov	r22, r9
 766:	70 e0       	ldi	r23, 0x00	; 0
 768:	02 c0       	rjmp	.+4      	; 0x76e <vfprintf+0x19a>
 76a:	6f ef       	ldi	r22, 0xFF	; 255
 76c:	7f ef       	ldi	r23, 0xFF	; 255
 76e:	c5 01       	movw	r24, r10
 770:	0e 94 ee 04 	call	0x9dc	; 0x9dc <strnlen_P>
 774:	4c 01       	movw	r8, r24
 776:	f3 2d       	mov	r31, r3
 778:	f0 68       	ori	r31, 0x80	; 128
 77a:	3f 2e       	mov	r3, r31
 77c:	82 01       	movw	r16, r4
 77e:	33 fc       	sbrc	r3, 3
 780:	1b c0       	rjmp	.+54     	; 0x7b8 <vfprintf+0x1e4>
 782:	82 2d       	mov	r24, r2
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	88 16       	cp	r8, r24
 788:	99 06       	cpc	r9, r25
 78a:	b0 f4       	brcc	.+44     	; 0x7b8 <vfprintf+0x1e4>
 78c:	b6 01       	movw	r22, r12
 78e:	80 e2       	ldi	r24, 0x20	; 32
 790:	90 e0       	ldi	r25, 0x00	; 0
 792:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 796:	2a 94       	dec	r2
 798:	f4 cf       	rjmp	.-24     	; 0x782 <vfprintf+0x1ae>
 79a:	f5 01       	movw	r30, r10
 79c:	37 fc       	sbrc	r3, 7
 79e:	85 91       	lpm	r24, Z+
 7a0:	37 fe       	sbrs	r3, 7
 7a2:	81 91       	ld	r24, Z+
 7a4:	5f 01       	movw	r10, r30
 7a6:	b6 01       	movw	r22, r12
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 7ae:	21 10       	cpse	r2, r1
 7b0:	2a 94       	dec	r2
 7b2:	21 e0       	ldi	r18, 0x01	; 1
 7b4:	82 1a       	sub	r8, r18
 7b6:	91 08       	sbc	r9, r1
 7b8:	81 14       	cp	r8, r1
 7ba:	91 04       	cpc	r9, r1
 7bc:	71 f7       	brne	.-36     	; 0x79a <vfprintf+0x1c6>
 7be:	e8 c0       	rjmp	.+464    	; 0x990 <vfprintf+0x3bc>
 7c0:	84 36       	cpi	r24, 0x64	; 100
 7c2:	11 f0       	breq	.+4      	; 0x7c8 <vfprintf+0x1f4>
 7c4:	89 36       	cpi	r24, 0x69	; 105
 7c6:	41 f5       	brne	.+80     	; 0x818 <vfprintf+0x244>
 7c8:	f8 01       	movw	r30, r16
 7ca:	37 fe       	sbrs	r3, 7
 7cc:	07 c0       	rjmp	.+14     	; 0x7dc <vfprintf+0x208>
 7ce:	60 81       	ld	r22, Z
 7d0:	71 81       	ldd	r23, Z+1	; 0x01
 7d2:	82 81       	ldd	r24, Z+2	; 0x02
 7d4:	93 81       	ldd	r25, Z+3	; 0x03
 7d6:	0c 5f       	subi	r16, 0xFC	; 252
 7d8:	1f 4f       	sbci	r17, 0xFF	; 255
 7da:	08 c0       	rjmp	.+16     	; 0x7ec <vfprintf+0x218>
 7dc:	60 81       	ld	r22, Z
 7de:	71 81       	ldd	r23, Z+1	; 0x01
 7e0:	07 2e       	mov	r0, r23
 7e2:	00 0c       	add	r0, r0
 7e4:	88 0b       	sbc	r24, r24
 7e6:	99 0b       	sbc	r25, r25
 7e8:	0e 5f       	subi	r16, 0xFE	; 254
 7ea:	1f 4f       	sbci	r17, 0xFF	; 255
 7ec:	f3 2d       	mov	r31, r3
 7ee:	ff 76       	andi	r31, 0x6F	; 111
 7f0:	3f 2e       	mov	r3, r31
 7f2:	97 ff       	sbrs	r25, 7
 7f4:	09 c0       	rjmp	.+18     	; 0x808 <vfprintf+0x234>
 7f6:	90 95       	com	r25
 7f8:	80 95       	com	r24
 7fa:	70 95       	com	r23
 7fc:	61 95       	neg	r22
 7fe:	7f 4f       	sbci	r23, 0xFF	; 255
 800:	8f 4f       	sbci	r24, 0xFF	; 255
 802:	9f 4f       	sbci	r25, 0xFF	; 255
 804:	f0 68       	ori	r31, 0x80	; 128
 806:	3f 2e       	mov	r3, r31
 808:	2a e0       	ldi	r18, 0x0A	; 10
 80a:	30 e0       	ldi	r19, 0x00	; 0
 80c:	a3 01       	movw	r20, r6
 80e:	0e 94 40 05 	call	0xa80	; 0xa80 <__ultoa_invert>
 812:	88 2e       	mov	r8, r24
 814:	86 18       	sub	r8, r6
 816:	45 c0       	rjmp	.+138    	; 0x8a2 <vfprintf+0x2ce>
 818:	85 37       	cpi	r24, 0x75	; 117
 81a:	31 f4       	brne	.+12     	; 0x828 <vfprintf+0x254>
 81c:	23 2d       	mov	r18, r3
 81e:	2f 7e       	andi	r18, 0xEF	; 239
 820:	b2 2e       	mov	r11, r18
 822:	2a e0       	ldi	r18, 0x0A	; 10
 824:	30 e0       	ldi	r19, 0x00	; 0
 826:	25 c0       	rjmp	.+74     	; 0x872 <vfprintf+0x29e>
 828:	93 2d       	mov	r25, r3
 82a:	99 7f       	andi	r25, 0xF9	; 249
 82c:	b9 2e       	mov	r11, r25
 82e:	8f 36       	cpi	r24, 0x6F	; 111
 830:	c1 f0       	breq	.+48     	; 0x862 <vfprintf+0x28e>
 832:	18 f4       	brcc	.+6      	; 0x83a <vfprintf+0x266>
 834:	88 35       	cpi	r24, 0x58	; 88
 836:	79 f0       	breq	.+30     	; 0x856 <vfprintf+0x282>
 838:	b5 c0       	rjmp	.+362    	; 0x9a4 <vfprintf+0x3d0>
 83a:	80 37       	cpi	r24, 0x70	; 112
 83c:	19 f0       	breq	.+6      	; 0x844 <vfprintf+0x270>
 83e:	88 37       	cpi	r24, 0x78	; 120
 840:	21 f0       	breq	.+8      	; 0x84a <vfprintf+0x276>
 842:	b0 c0       	rjmp	.+352    	; 0x9a4 <vfprintf+0x3d0>
 844:	e9 2f       	mov	r30, r25
 846:	e0 61       	ori	r30, 0x10	; 16
 848:	be 2e       	mov	r11, r30
 84a:	b4 fe       	sbrs	r11, 4
 84c:	0d c0       	rjmp	.+26     	; 0x868 <vfprintf+0x294>
 84e:	fb 2d       	mov	r31, r11
 850:	f4 60       	ori	r31, 0x04	; 4
 852:	bf 2e       	mov	r11, r31
 854:	09 c0       	rjmp	.+18     	; 0x868 <vfprintf+0x294>
 856:	34 fe       	sbrs	r3, 4
 858:	0a c0       	rjmp	.+20     	; 0x86e <vfprintf+0x29a>
 85a:	29 2f       	mov	r18, r25
 85c:	26 60       	ori	r18, 0x06	; 6
 85e:	b2 2e       	mov	r11, r18
 860:	06 c0       	rjmp	.+12     	; 0x86e <vfprintf+0x29a>
 862:	28 e0       	ldi	r18, 0x08	; 8
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	05 c0       	rjmp	.+10     	; 0x872 <vfprintf+0x29e>
 868:	20 e1       	ldi	r18, 0x10	; 16
 86a:	30 e0       	ldi	r19, 0x00	; 0
 86c:	02 c0       	rjmp	.+4      	; 0x872 <vfprintf+0x29e>
 86e:	20 e1       	ldi	r18, 0x10	; 16
 870:	32 e0       	ldi	r19, 0x02	; 2
 872:	f8 01       	movw	r30, r16
 874:	b7 fe       	sbrs	r11, 7
 876:	07 c0       	rjmp	.+14     	; 0x886 <vfprintf+0x2b2>
 878:	60 81       	ld	r22, Z
 87a:	71 81       	ldd	r23, Z+1	; 0x01
 87c:	82 81       	ldd	r24, Z+2	; 0x02
 87e:	93 81       	ldd	r25, Z+3	; 0x03
 880:	0c 5f       	subi	r16, 0xFC	; 252
 882:	1f 4f       	sbci	r17, 0xFF	; 255
 884:	06 c0       	rjmp	.+12     	; 0x892 <vfprintf+0x2be>
 886:	60 81       	ld	r22, Z
 888:	71 81       	ldd	r23, Z+1	; 0x01
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	90 e0       	ldi	r25, 0x00	; 0
 88e:	0e 5f       	subi	r16, 0xFE	; 254
 890:	1f 4f       	sbci	r17, 0xFF	; 255
 892:	a3 01       	movw	r20, r6
 894:	0e 94 40 05 	call	0xa80	; 0xa80 <__ultoa_invert>
 898:	88 2e       	mov	r8, r24
 89a:	86 18       	sub	r8, r6
 89c:	fb 2d       	mov	r31, r11
 89e:	ff 77       	andi	r31, 0x7F	; 127
 8a0:	3f 2e       	mov	r3, r31
 8a2:	36 fe       	sbrs	r3, 6
 8a4:	0d c0       	rjmp	.+26     	; 0x8c0 <vfprintf+0x2ec>
 8a6:	23 2d       	mov	r18, r3
 8a8:	2e 7f       	andi	r18, 0xFE	; 254
 8aa:	a2 2e       	mov	r10, r18
 8ac:	89 14       	cp	r8, r9
 8ae:	58 f4       	brcc	.+22     	; 0x8c6 <vfprintf+0x2f2>
 8b0:	34 fe       	sbrs	r3, 4
 8b2:	0b c0       	rjmp	.+22     	; 0x8ca <vfprintf+0x2f6>
 8b4:	32 fc       	sbrc	r3, 2
 8b6:	09 c0       	rjmp	.+18     	; 0x8ca <vfprintf+0x2f6>
 8b8:	83 2d       	mov	r24, r3
 8ba:	8e 7e       	andi	r24, 0xEE	; 238
 8bc:	a8 2e       	mov	r10, r24
 8be:	05 c0       	rjmp	.+10     	; 0x8ca <vfprintf+0x2f6>
 8c0:	b8 2c       	mov	r11, r8
 8c2:	a3 2c       	mov	r10, r3
 8c4:	03 c0       	rjmp	.+6      	; 0x8cc <vfprintf+0x2f8>
 8c6:	b8 2c       	mov	r11, r8
 8c8:	01 c0       	rjmp	.+2      	; 0x8cc <vfprintf+0x2f8>
 8ca:	b9 2c       	mov	r11, r9
 8cc:	a4 fe       	sbrs	r10, 4
 8ce:	0f c0       	rjmp	.+30     	; 0x8ee <vfprintf+0x31a>
 8d0:	fe 01       	movw	r30, r28
 8d2:	e8 0d       	add	r30, r8
 8d4:	f1 1d       	adc	r31, r1
 8d6:	80 81       	ld	r24, Z
 8d8:	80 33       	cpi	r24, 0x30	; 48
 8da:	21 f4       	brne	.+8      	; 0x8e4 <vfprintf+0x310>
 8dc:	9a 2d       	mov	r25, r10
 8de:	99 7e       	andi	r25, 0xE9	; 233
 8e0:	a9 2e       	mov	r10, r25
 8e2:	09 c0       	rjmp	.+18     	; 0x8f6 <vfprintf+0x322>
 8e4:	a2 fe       	sbrs	r10, 2
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <vfprintf+0x320>
 8e8:	b3 94       	inc	r11
 8ea:	b3 94       	inc	r11
 8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <vfprintf+0x322>
 8ee:	8a 2d       	mov	r24, r10
 8f0:	86 78       	andi	r24, 0x86	; 134
 8f2:	09 f0       	breq	.+2      	; 0x8f6 <vfprintf+0x322>
 8f4:	b3 94       	inc	r11
 8f6:	a3 fc       	sbrc	r10, 3
 8f8:	11 c0       	rjmp	.+34     	; 0x91c <vfprintf+0x348>
 8fa:	a0 fe       	sbrs	r10, 0
 8fc:	06 c0       	rjmp	.+12     	; 0x90a <vfprintf+0x336>
 8fe:	b2 14       	cp	r11, r2
 900:	88 f4       	brcc	.+34     	; 0x924 <vfprintf+0x350>
 902:	28 0c       	add	r2, r8
 904:	92 2c       	mov	r9, r2
 906:	9b 18       	sub	r9, r11
 908:	0e c0       	rjmp	.+28     	; 0x926 <vfprintf+0x352>
 90a:	b2 14       	cp	r11, r2
 90c:	60 f4       	brcc	.+24     	; 0x926 <vfprintf+0x352>
 90e:	b6 01       	movw	r22, r12
 910:	80 e2       	ldi	r24, 0x20	; 32
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 918:	b3 94       	inc	r11
 91a:	f7 cf       	rjmp	.-18     	; 0x90a <vfprintf+0x336>
 91c:	b2 14       	cp	r11, r2
 91e:	18 f4       	brcc	.+6      	; 0x926 <vfprintf+0x352>
 920:	2b 18       	sub	r2, r11
 922:	02 c0       	rjmp	.+4      	; 0x928 <vfprintf+0x354>
 924:	98 2c       	mov	r9, r8
 926:	21 2c       	mov	r2, r1
 928:	a4 fe       	sbrs	r10, 4
 92a:	10 c0       	rjmp	.+32     	; 0x94c <vfprintf+0x378>
 92c:	b6 01       	movw	r22, r12
 92e:	80 e3       	ldi	r24, 0x30	; 48
 930:	90 e0       	ldi	r25, 0x00	; 0
 932:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 936:	a2 fe       	sbrs	r10, 2
 938:	17 c0       	rjmp	.+46     	; 0x968 <vfprintf+0x394>
 93a:	a1 fc       	sbrc	r10, 1
 93c:	03 c0       	rjmp	.+6      	; 0x944 <vfprintf+0x370>
 93e:	88 e7       	ldi	r24, 0x78	; 120
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	02 c0       	rjmp	.+4      	; 0x948 <vfprintf+0x374>
 944:	88 e5       	ldi	r24, 0x58	; 88
 946:	90 e0       	ldi	r25, 0x00	; 0
 948:	b6 01       	movw	r22, r12
 94a:	0c c0       	rjmp	.+24     	; 0x964 <vfprintf+0x390>
 94c:	8a 2d       	mov	r24, r10
 94e:	86 78       	andi	r24, 0x86	; 134
 950:	59 f0       	breq	.+22     	; 0x968 <vfprintf+0x394>
 952:	a1 fe       	sbrs	r10, 1
 954:	02 c0       	rjmp	.+4      	; 0x95a <vfprintf+0x386>
 956:	8b e2       	ldi	r24, 0x2B	; 43
 958:	01 c0       	rjmp	.+2      	; 0x95c <vfprintf+0x388>
 95a:	80 e2       	ldi	r24, 0x20	; 32
 95c:	a7 fc       	sbrc	r10, 7
 95e:	8d e2       	ldi	r24, 0x2D	; 45
 960:	b6 01       	movw	r22, r12
 962:	90 e0       	ldi	r25, 0x00	; 0
 964:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 968:	89 14       	cp	r8, r9
 96a:	38 f4       	brcc	.+14     	; 0x97a <vfprintf+0x3a6>
 96c:	b6 01       	movw	r22, r12
 96e:	80 e3       	ldi	r24, 0x30	; 48
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 976:	9a 94       	dec	r9
 978:	f7 cf       	rjmp	.-18     	; 0x968 <vfprintf+0x394>
 97a:	8a 94       	dec	r8
 97c:	f3 01       	movw	r30, r6
 97e:	e8 0d       	add	r30, r8
 980:	f1 1d       	adc	r31, r1
 982:	80 81       	ld	r24, Z
 984:	b6 01       	movw	r22, r12
 986:	90 e0       	ldi	r25, 0x00	; 0
 988:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 98c:	81 10       	cpse	r8, r1
 98e:	f5 cf       	rjmp	.-22     	; 0x97a <vfprintf+0x3a6>
 990:	22 20       	and	r2, r2
 992:	09 f4       	brne	.+2      	; 0x996 <vfprintf+0x3c2>
 994:	42 ce       	rjmp	.-892    	; 0x61a <vfprintf+0x46>
 996:	b6 01       	movw	r22, r12
 998:	80 e2       	ldi	r24, 0x20	; 32
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 04 05 	call	0xa08	; 0xa08 <fputc>
 9a0:	2a 94       	dec	r2
 9a2:	f6 cf       	rjmp	.-20     	; 0x990 <vfprintf+0x3bc>
 9a4:	f6 01       	movw	r30, r12
 9a6:	86 81       	ldd	r24, Z+6	; 0x06
 9a8:	97 81       	ldd	r25, Z+7	; 0x07
 9aa:	02 c0       	rjmp	.+4      	; 0x9b0 <vfprintf+0x3dc>
 9ac:	8f ef       	ldi	r24, 0xFF	; 255
 9ae:	9f ef       	ldi	r25, 0xFF	; 255
 9b0:	2b 96       	adiw	r28, 0x0b	; 11
 9b2:	cd bf       	out	0x3d, r28	; 61
 9b4:	de bf       	out	0x3e, r29	; 62
 9b6:	df 91       	pop	r29
 9b8:	cf 91       	pop	r28
 9ba:	1f 91       	pop	r17
 9bc:	0f 91       	pop	r16
 9be:	ff 90       	pop	r15
 9c0:	ef 90       	pop	r14
 9c2:	df 90       	pop	r13
 9c4:	cf 90       	pop	r12
 9c6:	bf 90       	pop	r11
 9c8:	af 90       	pop	r10
 9ca:	9f 90       	pop	r9
 9cc:	8f 90       	pop	r8
 9ce:	7f 90       	pop	r7
 9d0:	6f 90       	pop	r6
 9d2:	5f 90       	pop	r5
 9d4:	4f 90       	pop	r4
 9d6:	3f 90       	pop	r3
 9d8:	2f 90       	pop	r2
 9da:	08 95       	ret

000009dc <strnlen_P>:
 9dc:	fc 01       	movw	r30, r24
 9de:	05 90       	lpm	r0, Z+
 9e0:	61 50       	subi	r22, 0x01	; 1
 9e2:	70 40       	sbci	r23, 0x00	; 0
 9e4:	01 10       	cpse	r0, r1
 9e6:	d8 f7       	brcc	.-10     	; 0x9de <strnlen_P+0x2>
 9e8:	80 95       	com	r24
 9ea:	90 95       	com	r25
 9ec:	8e 0f       	add	r24, r30
 9ee:	9f 1f       	adc	r25, r31
 9f0:	08 95       	ret

000009f2 <strnlen>:
 9f2:	fc 01       	movw	r30, r24
 9f4:	61 50       	subi	r22, 0x01	; 1
 9f6:	70 40       	sbci	r23, 0x00	; 0
 9f8:	01 90       	ld	r0, Z+
 9fa:	01 10       	cpse	r0, r1
 9fc:	d8 f7       	brcc	.-10     	; 0x9f4 <strnlen+0x2>
 9fe:	80 95       	com	r24
 a00:	90 95       	com	r25
 a02:	8e 0f       	add	r24, r30
 a04:	9f 1f       	adc	r25, r31
 a06:	08 95       	ret

00000a08 <fputc>:
 a08:	0f 93       	push	r16
 a0a:	1f 93       	push	r17
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	fb 01       	movw	r30, r22
 a12:	23 81       	ldd	r18, Z+3	; 0x03
 a14:	21 fd       	sbrc	r18, 1
 a16:	03 c0       	rjmp	.+6      	; 0xa1e <fputc+0x16>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	2c c0       	rjmp	.+88     	; 0xa76 <fputc+0x6e>
 a1e:	22 ff       	sbrs	r18, 2
 a20:	16 c0       	rjmp	.+44     	; 0xa4e <fputc+0x46>
 a22:	46 81       	ldd	r20, Z+6	; 0x06
 a24:	57 81       	ldd	r21, Z+7	; 0x07
 a26:	24 81       	ldd	r18, Z+4	; 0x04
 a28:	35 81       	ldd	r19, Z+5	; 0x05
 a2a:	42 17       	cp	r20, r18
 a2c:	53 07       	cpc	r21, r19
 a2e:	44 f4       	brge	.+16     	; 0xa40 <fputc+0x38>
 a30:	a0 81       	ld	r26, Z
 a32:	b1 81       	ldd	r27, Z+1	; 0x01
 a34:	9d 01       	movw	r18, r26
 a36:	2f 5f       	subi	r18, 0xFF	; 255
 a38:	3f 4f       	sbci	r19, 0xFF	; 255
 a3a:	20 83       	st	Z, r18
 a3c:	31 83       	std	Z+1, r19	; 0x01
 a3e:	8c 93       	st	X, r24
 a40:	26 81       	ldd	r18, Z+6	; 0x06
 a42:	37 81       	ldd	r19, Z+7	; 0x07
 a44:	2f 5f       	subi	r18, 0xFF	; 255
 a46:	3f 4f       	sbci	r19, 0xFF	; 255
 a48:	26 83       	std	Z+6, r18	; 0x06
 a4a:	37 83       	std	Z+7, r19	; 0x07
 a4c:	14 c0       	rjmp	.+40     	; 0xa76 <fputc+0x6e>
 a4e:	8b 01       	movw	r16, r22
 a50:	ec 01       	movw	r28, r24
 a52:	fb 01       	movw	r30, r22
 a54:	00 84       	ldd	r0, Z+8	; 0x08
 a56:	f1 85       	ldd	r31, Z+9	; 0x09
 a58:	e0 2d       	mov	r30, r0
 a5a:	09 95       	icall
 a5c:	89 2b       	or	r24, r25
 a5e:	e1 f6       	brne	.-72     	; 0xa18 <fputc+0x10>
 a60:	d8 01       	movw	r26, r16
 a62:	16 96       	adiw	r26, 0x06	; 6
 a64:	8d 91       	ld	r24, X+
 a66:	9c 91       	ld	r25, X
 a68:	17 97       	sbiw	r26, 0x07	; 7
 a6a:	01 96       	adiw	r24, 0x01	; 1
 a6c:	16 96       	adiw	r26, 0x06	; 6
 a6e:	8d 93       	st	X+, r24
 a70:	9c 93       	st	X, r25
 a72:	17 97       	sbiw	r26, 0x07	; 7
 a74:	ce 01       	movw	r24, r28
 a76:	df 91       	pop	r29
 a78:	cf 91       	pop	r28
 a7a:	1f 91       	pop	r17
 a7c:	0f 91       	pop	r16
 a7e:	08 95       	ret

00000a80 <__ultoa_invert>:
 a80:	fa 01       	movw	r30, r20
 a82:	aa 27       	eor	r26, r26
 a84:	28 30       	cpi	r18, 0x08	; 8
 a86:	51 f1       	breq	.+84     	; 0xadc <__ultoa_invert+0x5c>
 a88:	20 31       	cpi	r18, 0x10	; 16
 a8a:	81 f1       	breq	.+96     	; 0xaec <__ultoa_invert+0x6c>
 a8c:	e8 94       	clt
 a8e:	6f 93       	push	r22
 a90:	6e 7f       	andi	r22, 0xFE	; 254
 a92:	6e 5f       	subi	r22, 0xFE	; 254
 a94:	7f 4f       	sbci	r23, 0xFF	; 255
 a96:	8f 4f       	sbci	r24, 0xFF	; 255
 a98:	9f 4f       	sbci	r25, 0xFF	; 255
 a9a:	af 4f       	sbci	r26, 0xFF	; 255
 a9c:	b1 e0       	ldi	r27, 0x01	; 1
 a9e:	3e d0       	rcall	.+124    	; 0xb1c <__ultoa_invert+0x9c>
 aa0:	b4 e0       	ldi	r27, 0x04	; 4
 aa2:	3c d0       	rcall	.+120    	; 0xb1c <__ultoa_invert+0x9c>
 aa4:	67 0f       	add	r22, r23
 aa6:	78 1f       	adc	r23, r24
 aa8:	89 1f       	adc	r24, r25
 aaa:	9a 1f       	adc	r25, r26
 aac:	a1 1d       	adc	r26, r1
 aae:	68 0f       	add	r22, r24
 ab0:	79 1f       	adc	r23, r25
 ab2:	8a 1f       	adc	r24, r26
 ab4:	91 1d       	adc	r25, r1
 ab6:	a1 1d       	adc	r26, r1
 ab8:	6a 0f       	add	r22, r26
 aba:	71 1d       	adc	r23, r1
 abc:	81 1d       	adc	r24, r1
 abe:	91 1d       	adc	r25, r1
 ac0:	a1 1d       	adc	r26, r1
 ac2:	20 d0       	rcall	.+64     	; 0xb04 <__ultoa_invert+0x84>
 ac4:	09 f4       	brne	.+2      	; 0xac8 <__ultoa_invert+0x48>
 ac6:	68 94       	set
 ac8:	3f 91       	pop	r19
 aca:	2a e0       	ldi	r18, 0x0A	; 10
 acc:	26 9f       	mul	r18, r22
 ace:	11 24       	eor	r1, r1
 ad0:	30 19       	sub	r19, r0
 ad2:	30 5d       	subi	r19, 0xD0	; 208
 ad4:	31 93       	st	Z+, r19
 ad6:	de f6       	brtc	.-74     	; 0xa8e <__ultoa_invert+0xe>
 ad8:	cf 01       	movw	r24, r30
 ada:	08 95       	ret
 adc:	46 2f       	mov	r20, r22
 ade:	47 70       	andi	r20, 0x07	; 7
 ae0:	40 5d       	subi	r20, 0xD0	; 208
 ae2:	41 93       	st	Z+, r20
 ae4:	b3 e0       	ldi	r27, 0x03	; 3
 ae6:	0f d0       	rcall	.+30     	; 0xb06 <__ultoa_invert+0x86>
 ae8:	c9 f7       	brne	.-14     	; 0xadc <__ultoa_invert+0x5c>
 aea:	f6 cf       	rjmp	.-20     	; 0xad8 <__ultoa_invert+0x58>
 aec:	46 2f       	mov	r20, r22
 aee:	4f 70       	andi	r20, 0x0F	; 15
 af0:	40 5d       	subi	r20, 0xD0	; 208
 af2:	4a 33       	cpi	r20, 0x3A	; 58
 af4:	18 f0       	brcs	.+6      	; 0xafc <__ultoa_invert+0x7c>
 af6:	49 5d       	subi	r20, 0xD9	; 217
 af8:	31 fd       	sbrc	r19, 1
 afa:	40 52       	subi	r20, 0x20	; 32
 afc:	41 93       	st	Z+, r20
 afe:	02 d0       	rcall	.+4      	; 0xb04 <__ultoa_invert+0x84>
 b00:	a9 f7       	brne	.-22     	; 0xaec <__ultoa_invert+0x6c>
 b02:	ea cf       	rjmp	.-44     	; 0xad8 <__ultoa_invert+0x58>
 b04:	b4 e0       	ldi	r27, 0x04	; 4
 b06:	a6 95       	lsr	r26
 b08:	97 95       	ror	r25
 b0a:	87 95       	ror	r24
 b0c:	77 95       	ror	r23
 b0e:	67 95       	ror	r22
 b10:	ba 95       	dec	r27
 b12:	c9 f7       	brne	.-14     	; 0xb06 <__ultoa_invert+0x86>
 b14:	00 97       	sbiw	r24, 0x00	; 0
 b16:	61 05       	cpc	r22, r1
 b18:	71 05       	cpc	r23, r1
 b1a:	08 95       	ret
 b1c:	9b 01       	movw	r18, r22
 b1e:	ac 01       	movw	r20, r24
 b20:	0a 2e       	mov	r0, r26
 b22:	06 94       	lsr	r0
 b24:	57 95       	ror	r21
 b26:	47 95       	ror	r20
 b28:	37 95       	ror	r19
 b2a:	27 95       	ror	r18
 b2c:	ba 95       	dec	r27
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__ultoa_invert+0xa2>
 b30:	62 0f       	add	r22, r18
 b32:	73 1f       	adc	r23, r19
 b34:	84 1f       	adc	r24, r20
 b36:	95 1f       	adc	r25, r21
 b38:	a0 1d       	adc	r26, r0
 b3a:	08 95       	ret

00000b3c <_exit>:
 b3c:	f8 94       	cli

00000b3e <__stop_program>:
 b3e:	ff cf       	rjmp	.-2      	; 0xb3e <__stop_program>
