
display_time_temp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00804000  00000ee8  00000f7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ee8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005e  0080406c  0080406c  00000fe8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001044  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00001084  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004da1  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000036bc  00000000  00000000  00005fb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000127f  00000000  00000000  00009671  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ff8  00000000  00000000  0000ac40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c49  00000000  00000000  0000cc38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000d881  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 b9 03 	jmp	0x772	; 0x772 <__vector_30>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 ea 03 	jmp	0x7d4	; 0x7d4 <__vector_53>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e8 ee       	ldi	r30, 0xE8	; 232
 108:	fe e0       	ldi	r31, 0x0E	; 14
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ac 36       	cpi	r26, 0x6C	; 108
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ac e6       	ldi	r26, 0x6C	; 108
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	aa 3c       	cpi	r26, 0xCA	; 202
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 6e 04 	call	0x8dc	; 0x8dc <main>
 12e:	0c 94 72 07 	jmp	0xee4	; 0xee4 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_adc>:
//
// Revision History     : Initial version
//
//**************************************************************************
void init_adc (void) {
	ADC0_CTRLA = RES12_Bm | ADC_FREERUN_bm;
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f6 e0       	ldi	r31, 0x06	; 6
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
	ADC0_CTRLB = ADC_SAMPNUM_ACC8_gc;
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <__TEXT_REGION_LENGTH__+0x7e0601>
	ADC0_MUXPOS = ADC_MUXPOS_AIN6_gc;
 144:	86 e0       	ldi	r24, 0x06	; 6
 146:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
	//turns on enable bit
	ADC0_CTRLA |= ADC_ENABLE_bm;
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
	PORTD_DIR = 0x00; 
 150:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
	//set PORTD6 as input
	//enable pullups
	PORTD_PIN6CTRL = PORT_PULLUPEN_bm;
 154:	88 e0       	ldi	r24, 0x08	; 8
 156:	80 93 76 04 	sts	0x0476, r24	; 0x800476 <__TEXT_REGION_LENGTH__+0x7e0476>
 15a:	08 95       	ret

0000015c <convert>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
void convert () {
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <convert+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <convert+0x8>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	//start conversion
	ADC0_COMMAND = ADC_STCONV_bm; 
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
	
	//polls for RESRDY flag
	while(ADC0_INTFLAGS != ADC_RESRDY_bm){}
 16e:	80 91 0d 06 	lds	r24, 0x060D	; 0x80060d <__TEXT_REGION_LENGTH__+0x7e060d>
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	e1 f7       	brne	.-8      	; 0x16e <convert+0x12>
	//takes result of conversion	
	
	result = ADC0_RES;
 176:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
 17a:	90 91 11 06 	lds	r25, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
 17e:	80 93 98 40 	sts	0x4098, r24	; 0x804098 <result>
 182:	90 93 99 40 	sts	0x4099, r25	; 0x804099 <result+0x1>
	//	displayVolt(result);
	//parses the result to 32 bits for multiplication result
	volatile uint32_t mult = (uint32_t)result;
 186:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <result>
 18a:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <result+0x1>
 18e:	a0 e0       	ldi	r26, 0x00	; 0
 190:	b0 e0       	ldi	r27, 0x00	; 0
 192:	89 83       	std	Y+1, r24	; 0x01
 194:	9a 83       	std	Y+2, r25	; 0x02
 196:	ab 83       	std	Y+3, r26	; 0x03
 198:	bc 83       	std	Y+4, r27	; 0x04
	
	//arithmetic for getting vout in mv
	mult = (mult*2500)/4096;
 19a:	29 81       	ldd	r18, Y+1	; 0x01
 19c:	3a 81       	ldd	r19, Y+2	; 0x02
 19e:	4b 81       	ldd	r20, Y+3	; 0x03
 1a0:	5c 81       	ldd	r21, Y+4	; 0x04
 1a2:	a4 ec       	ldi	r26, 0xC4	; 196
 1a4:	b9 e0       	ldi	r27, 0x09	; 9
 1a6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__muluhisi3>
 1aa:	dc 01       	movw	r26, r24
 1ac:	cb 01       	movw	r24, r22
 1ae:	07 2e       	mov	r0, r23
 1b0:	7c e0       	ldi	r23, 0x0C	; 12
 1b2:	b6 95       	lsr	r27
 1b4:	a7 95       	ror	r26
 1b6:	97 95       	ror	r25
 1b8:	87 95       	ror	r24
 1ba:	7a 95       	dec	r23
 1bc:	d1 f7       	brne	.-12     	; 0x1b2 <convert+0x56>
 1be:	70 2d       	mov	r23, r0
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	9a 83       	std	Y+2, r25	; 0x02
 1c4:	ab 83       	std	Y+3, r26	; 0x03
 1c6:	bc 83       	std	Y+4, r27	; 0x04
	
	//checks if result is > or < 500
	//-500 done to get the temperature
	if(mult > 500){
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	9a 81       	ldd	r25, Y+2	; 0x02
 1cc:	ab 81       	ldd	r26, Y+3	; 0x03
 1ce:	bc 81       	ldd	r27, Y+4	; 0x04
 1d0:	85 3f       	cpi	r24, 0xF5	; 245
 1d2:	91 40       	sbci	r25, 0x01	; 1
 1d4:	a1 05       	cpc	r26, r1
 1d6:	b1 05       	cpc	r27, r1
 1d8:	68 f0       	brcs	.+26     	; 0x1f4 <convert+0x98>
		mult -= 500;
 1da:	89 81       	ldd	r24, Y+1	; 0x01
 1dc:	9a 81       	ldd	r25, Y+2	; 0x02
 1de:	ab 81       	ldd	r26, Y+3	; 0x03
 1e0:	bc 81       	ldd	r27, Y+4	; 0x04
 1e2:	84 5f       	subi	r24, 0xF4	; 244
 1e4:	91 40       	sbci	r25, 0x01	; 1
 1e6:	a1 09       	sbc	r26, r1
 1e8:	b1 09       	sbc	r27, r1
 1ea:	89 83       	std	Y+1, r24	; 0x01
 1ec:	9a 83       	std	Y+2, r25	; 0x02
 1ee:	ab 83       	std	Y+3, r26	; 0x03
 1f0:	bc 83       	std	Y+4, r27	; 0x04
 1f2:	16 c0       	rjmp	.+44     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
	}
	else {
		//if mult < 500, subtract mult from 500
		//mark variable to signify result is negative
		mult = 500-mult;
 1f4:	49 81       	ldd	r20, Y+1	; 0x01
 1f6:	5a 81       	ldd	r21, Y+2	; 0x02
 1f8:	6b 81       	ldd	r22, Y+3	; 0x03
 1fa:	7c 81       	ldd	r23, Y+4	; 0x04
 1fc:	84 ef       	ldi	r24, 0xF4	; 244
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	a0 e0       	ldi	r26, 0x00	; 0
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	84 1b       	sub	r24, r20
 206:	95 0b       	sbc	r25, r21
 208:	a6 0b       	sbc	r26, r22
 20a:	b7 0b       	sbc	r27, r23
 20c:	89 83       	std	Y+1, r24	; 0x01
 20e:	9a 83       	std	Y+2, r25	; 0x02
 210:	ab 83       	std	Y+3, r26	; 0x03
 212:	bc 83       	std	Y+4, r27	; 0x04
		boolean = 1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	80 93 85 40 	sts	0x4085, r24	; 0x804085 <boolean>
 21c:	90 93 86 40 	sts	0x4086, r25	; 0x804086 <boolean+0x1>
	}
	
	
	sprintf(dsp_buff2, "Temp : %03", mult);
 220:	89 81       	ldd	r24, Y+1	; 0x01
 222:	9a 81       	ldd	r25, Y+2	; 0x02
 224:	ab 81       	ldd	r26, Y+3	; 0x03
 226:	bc 81       	ldd	r27, Y+4	; 0x04
 228:	bf 93       	push	r27
 22a:	af 93       	push	r26
 22c:	9f 93       	push	r25
 22e:	8f 93       	push	r24
 230:	8a e0       	ldi	r24, 0x0A	; 10
 232:	90 e4       	ldi	r25, 0x40	; 64
 234:	9f 93       	push	r25
 236:	8f 93       	push	r24
 238:	87 e8       	ldi	r24, 0x87	; 135
 23a:	90 e4       	ldi	r25, 0x40	; 64
 23c:	9f 93       	push	r25
 23e:	8f 93       	push	r24
 240:	0e 94 95 04 	call	0x92a	; 0x92a <sprintf>
	

	if(boolean == 1){
 244:	80 91 85 40 	lds	r24, 0x4085	; 0x804085 <boolean>
 248:	90 91 86 40 	lds	r25, 0x4086	; 0x804086 <boolean+0x1>
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	de bf       	out	0x3e, r29	; 62
 250:	01 97       	sbiw	r24, 0x01	; 1
 252:	19 f4       	brne	.+6      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
		dsp_buff2[6] = '-';
 254:	8d e2       	ldi	r24, 0x2D	; 45
 256:	80 93 8d 40 	sts	0x408D, r24	; 0x80408d <dsp_buff2+0x6>
	}
	dsp_buff2[12] = 'c';
 25a:	e7 e8       	ldi	r30, 0x87	; 135
 25c:	f0 e4       	ldi	r31, 0x40	; 64
 25e:	83 e6       	ldi	r24, 0x63	; 99
 260:	84 87       	std	Z+12, r24	; 0x0c
	dsp_buff2[11] = 0xDE;
 262:	8e ed       	ldi	r24, 0xDE	; 222
 264:	83 87       	std	Z+11, r24	; 0x0b
	dsp_buff2[10] = dsp_buff2[9];
 266:	81 85       	ldd	r24, Z+9	; 0x09
 268:	82 87       	std	Z+10, r24	; 0x0a
	dsp_buff2[9] = '.';
 26a:	8e e2       	ldi	r24, 0x2E	; 46
 26c:	81 87       	std	Z+9, r24	; 0x09
	
			boolean = 0;
 26e:	10 92 85 40 	sts	0x4085, r1	; 0x804085 <boolean>
 272:	10 92 86 40 	sts	0x4086, r1	; 0x804086 <boolean+0x1>
}
 276:	24 96       	adiw	r28, 0x04	; 4
 278:	cd bf       	out	0x3d, r28	; 61
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	df 91       	pop	r29
 27e:	cf 91       	pop	r28
 280:	08 95       	ret

00000282 <set_fn>:
#include "DS1306_RTCDrivers.h"


void set_fn(){
	//clears value array
	vals[0] = 0;
 282:	e9 eb       	ldi	r30, 0xB9	; 185
 284:	f0 e4       	ldi	r31, 0x40	; 64
 286:	10 82       	st	Z, r1
 288:	11 82       	std	Z+1, r1	; 0x01
	vals[1] = 0;
 28a:	12 82       	std	Z+2, r1	; 0x02
 28c:	13 82       	std	Z+3, r1	; 0x03
 28e:	08 95       	ret

00000290 <error_fn>:
}
void error_fn(){
 290:	08 95       	ret

00000292 <set_hours_fn>:
	
}
//following methods read back the hours, mins & secs
//using USART
void set_hours_fn(){
	read = read_RTC(READ_HOUR);
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	0e 94 36 03 	call	0x66c	; 0x66c <read_RTC>
 298:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <read>
	transmit_USART(read);
 29c:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <read>
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <transmit_USART>
 2a6:	08 95       	ret

000002a8 <set_mins_fn>:
	
}
void set_mins_fn(){

	read = read_RTC(READ_MIN);
 2a8:	80 e1       	ldi	r24, 0x10	; 16
 2aa:	0e 94 36 03 	call	0x66c	; 0x66c <read_RTC>
 2ae:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <read>
	transmit_USART(read);
 2b2:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <read>
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <transmit_USART>
 2bc:	08 95       	ret

000002be <set_sec_fn>:
	
}
void set_sec_fn(){
	read = read_RTC(READ_SEC);
 2be:	80 e2       	ldi	r24, 0x20	; 32
 2c0:	0e 94 36 03 	call	0x66c	; 0x66c <read_RTC>
 2c4:	80 93 c5 40 	sts	0x40C5, r24	; 0x8040c5 <read>
	transmit_USART(read);
 2c8:	80 91 c5 40 	lds	r24, 0x40C5	; 0x8040c5 <read>
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <transmit_USART>
 2d2:	08 95       	ret

000002d4 <digit_in_fn>:
}

//enters last entered digit to digits array
void digit_in_fn(){
	//shifts one result down,
	vals[0] = vals[1];
 2d4:	e9 eb       	ldi	r30, 0xB9	; 185
 2d6:	f0 e4       	ldi	r31, 0x40	; 64
 2d8:	82 81       	ldd	r24, Z+2	; 0x02
 2da:	93 81       	ldd	r25, Z+3	; 0x03
 2dc:	80 83       	st	Z, r24
 2de:	91 83       	std	Z+1, r25	; 0x01
	vals[1] = digit_val;
 2e0:	80 91 c8 40 	lds	r24, 0x40C8	; 0x8040c8 <digit_val>
 2e4:	90 91 c9 40 	lds	r25, 0x40C9	; 0x8040c9 <digit_val+0x1>
 2e8:	82 83       	std	Z+2, r24	; 0x02
 2ea:	93 83       	std	Z+3, r25	; 0x03
 2ec:	08 95       	ret

000002ee <enter_hour_fn>:

//following 3 methods set the hours, mins or secs
//by using the write_rtc method
void enter_hour_fn(){
	//converts arr to int
	int i, k = 0;
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
	for (i = 0; i < 2; i++)
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	15 c0       	rjmp	.+42     	; 0x322 <enter_hour_fn+0x34>
	k = 10 * k + vals[i];
 2f8:	9b 01       	movw	r18, r22
 2fa:	22 0f       	add	r18, r18
 2fc:	33 1f       	adc	r19, r19
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	66 0f       	add	r22, r22
 308:	77 1f       	adc	r23, r23
 30a:	62 0f       	add	r22, r18
 30c:	73 1f       	adc	r23, r19
 30e:	fc 01       	movw	r30, r24
 310:	ee 0f       	add	r30, r30
 312:	ff 1f       	adc	r31, r31
 314:	e7 54       	subi	r30, 0x47	; 71
 316:	ff 4b       	sbci	r31, 0xBF	; 191
 318:	20 81       	ld	r18, Z
 31a:	31 81       	ldd	r19, Z+1	; 0x01
 31c:	62 0f       	add	r22, r18
 31e:	73 1f       	adc	r23, r19
//following 3 methods set the hours, mins or secs
//by using the write_rtc method
void enter_hour_fn(){
	//converts arr to int
	int i, k = 0;
	for (i = 0; i < 2; i++)
 320:	01 96       	adiw	r24, 0x01	; 1
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	91 05       	cpc	r25, r1
 326:	44 f3       	brlt	.-48     	; 0x2f8 <enter_hour_fn+0xa>
	k = 10 * k + vals[i];
	
	write_RTC(WRITE_HOUR, k);
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	0e 94 10 03 	call	0x620	; 0x620 <write_RTC>
 32e:	08 95       	ret

00000330 <enter_min_fn>:
	
	
}
void enter_min_fn(){
	//converts arr to int
	int i, k = 0;
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
	for (i = 0; i < 2; i++)
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	15 c0       	rjmp	.+42     	; 0x364 <enter_min_fn+0x34>
	k = 10 * k + vals[i];
 33a:	9b 01       	movw	r18, r22
 33c:	22 0f       	add	r18, r18
 33e:	33 1f       	adc	r19, r19
 340:	66 0f       	add	r22, r22
 342:	77 1f       	adc	r23, r23
 344:	66 0f       	add	r22, r22
 346:	77 1f       	adc	r23, r23
 348:	66 0f       	add	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	62 0f       	add	r22, r18
 34e:	73 1f       	adc	r23, r19
 350:	fc 01       	movw	r30, r24
 352:	ee 0f       	add	r30, r30
 354:	ff 1f       	adc	r31, r31
 356:	e7 54       	subi	r30, 0x47	; 71
 358:	ff 4b       	sbci	r31, 0xBF	; 191
 35a:	20 81       	ld	r18, Z
 35c:	31 81       	ldd	r19, Z+1	; 0x01
 35e:	62 0f       	add	r22, r18
 360:	73 1f       	adc	r23, r19
	
}
void enter_min_fn(){
	//converts arr to int
	int i, k = 0;
	for (i = 0; i < 2; i++)
 362:	01 96       	adiw	r24, 0x01	; 1
 364:	82 30       	cpi	r24, 0x02	; 2
 366:	91 05       	cpc	r25, r1
 368:	44 f3       	brlt	.-48     	; 0x33a <enter_min_fn+0xa>
	k = 10 * k + vals[i];
	
	write_RTC(WRITE_MIN, k);
 36a:	80 e8       	ldi	r24, 0x80	; 128
 36c:	0e 94 10 03 	call	0x620	; 0x620 <write_RTC>
 370:	08 95       	ret

00000372 <enter_sec_fn>:
	
}
void enter_sec_fn(){
	//converts arr to int
	int i, k = 0;
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	70 e0       	ldi	r23, 0x00	; 0
	for (i = 0; i < 2; i++)
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	15 c0       	rjmp	.+42     	; 0x3a6 <enter_sec_fn+0x34>
	k = 10 * k + vals[i];
 37c:	9b 01       	movw	r18, r22
 37e:	22 0f       	add	r18, r18
 380:	33 1f       	adc	r19, r19
 382:	66 0f       	add	r22, r22
 384:	77 1f       	adc	r23, r23
 386:	66 0f       	add	r22, r22
 388:	77 1f       	adc	r23, r23
 38a:	66 0f       	add	r22, r22
 38c:	77 1f       	adc	r23, r23
 38e:	62 0f       	add	r22, r18
 390:	73 1f       	adc	r23, r19
 392:	fc 01       	movw	r30, r24
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	e7 54       	subi	r30, 0x47	; 71
 39a:	ff 4b       	sbci	r31, 0xBF	; 191
 39c:	20 81       	ld	r18, Z
 39e:	31 81       	ldd	r19, Z+1	; 0x01
 3a0:	62 0f       	add	r22, r18
 3a2:	73 1f       	adc	r23, r19
	
}
void enter_sec_fn(){
	//converts arr to int
	int i, k = 0;
	for (i = 0; i < 2; i++)
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	82 30       	cpi	r24, 0x02	; 2
 3a8:	91 05       	cpc	r25, r1
 3aa:	44 f3       	brlt	.-48     	; 0x37c <enter_sec_fn+0xa>
	k = 10 * k + vals[i];
	
	write_RTC(WRITE_SEC, k);
 3ac:	80 e8       	ldi	r24, 0x80	; 128
 3ae:	0e 94 10 03 	call	0x620	; 0x620 <write_RTC>
 3b2:	08 95       	ret

000003b4 <init_USART>:
// DESCRIPTION
// method for properly initializing USART3 to work with terraterm
//**************************************************************************
void init_USART(){
	//configures baud rate
	USART3_BAUD = BAU;
 3b4:	82 e8       	ldi	r24, 0x82	; 130
 3b6:	96 e0       	ldi	r25, 0x06	; 6
 3b8:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 3bc:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	
	//configure ctrlc
	USART3_CTRLC =  USART_CMODE_ASYNCHRONOUS_gc |  USART_PMODE_DISABLED_gc
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
	| USART_CHSIZE_8BIT_gc | USART_SBMODE_1BIT_gc ;
	
	//configure reciever & transmiter
	USART3_CTRLB = USART_RXEN_bm | USART_TXEN_bm;
 3c6:	80 ec       	ldi	r24, 0xC0	; 192
 3c8:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7e0866>
	//USART3_CTRLA = USART_LBME_bm;
	
	
	//enables RXCIE interupt 
	USART3_CTRLA = USART_RXCIE_bm;
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <__TEXT_REGION_LENGTH__+0x7e0865>
 3d2:	08 95       	ret

000003d4 <transmit_USART>:
// runs a USART3 transmission to write the entered number to terreterm
//**************************************************************************

void transmit_USART(int data)
{
	uint8_t temp = USART3_STATUS;
 3d4:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
	temp &= USART_RXCIF_bm;
 3d8:	90 78       	andi	r25, 0x80	; 128
	//polls DRIEF to determine if you can write
	while(temp != USART_RXCIF_bm){
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <transmit_USART+0xe>
		
		temp = USART3_STATUS;
 3dc:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
		temp &= USART_RXCIF_bm;
 3e0:	90 78       	andi	r25, 0x80	; 128
void transmit_USART(int data)
{
	uint8_t temp = USART3_STATUS;
	temp &= USART_RXCIF_bm;
	//polls DRIEF to determine if you can write
	while(temp != USART_RXCIF_bm){
 3e2:	90 38       	cpi	r25, 0x80	; 128
 3e4:	d9 f7       	brne	.-10     	; 0x3dc <transmit_USART+0x8>
		temp = USART3_STATUS;
		temp &= USART_RXCIF_bm;
		
	}
	//transmits the number, displays it in terraterm
	USART3.TXDATAL = data;
 3e6:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
 3ea:	08 95       	ret

000003ec <init_spi_lcd>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3ec:	80 ef       	ldi	r24, 0xF0	; 240
 3ee:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
 3f8:	91 e2       	ldi	r25, 0x21	; 33
 3fa:	90 93 40 09 	sts	0x0940, r25	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
 3fe:	80 93 41 09 	sts	0x0941, r24	; 0x800941 <__TEXT_REGION_LENGTH__+0x7e0941>
 402:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <__TEXT_REGION_LENGTH__+0x7e0942>
 406:	e4 e0       	ldi	r30, 0x04	; 4
 408:	f4 e0       	ldi	r31, 0x04	; 4
 40a:	80 81       	ld	r24, Z
 40c:	80 68       	ori	r24, 0x80	; 128
 40e:	80 83       	st	Z, r24
 410:	08 95       	ret

00000412 <lcd_spi_transmit_CMD>:
 412:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 416:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 41a:	90 38       	cpi	r25, 0x80	; 128
 41c:	e1 f7       	brne	.-8      	; 0x416 <lcd_spi_transmit_CMD+0x4>
 41e:	e4 e0       	ldi	r30, 0x04	; 4
 420:	f4 e0       	ldi	r31, 0x04	; 4
 422:	90 81       	ld	r25, Z
 424:	9f 77       	andi	r25, 0x7F	; 127
 426:	90 83       	st	Z, r25
 428:	e4 e4       	ldi	r30, 0x44	; 68
 42a:	f4 e0       	ldi	r31, 0x04	; 4
 42c:	90 81       	ld	r25, Z
 42e:	10 82       	st	Z, r1
 430:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 434:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 438:	80 38       	cpi	r24, 0x80	; 128
 43a:	e1 f7       	brne	.-8      	; 0x434 <lcd_spi_transmit_CMD+0x22>
 43c:	e4 e0       	ldi	r30, 0x04	; 4
 43e:	f4 e0       	ldi	r31, 0x04	; 4
 440:	80 81       	ld	r24, Z
 442:	80 68       	ori	r24, 0x80	; 128
 444:	80 83       	st	Z, r24
 446:	08 95       	ret

00000448 <lcd_spi_transmit_DATA>:
 448:	10 92 44 09 	sts	0x0944, r1	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 44c:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 450:	90 38       	cpi	r25, 0x80	; 128
 452:	e1 f7       	brne	.-8      	; 0x44c <lcd_spi_transmit_DATA+0x4>
 454:	e4 e0       	ldi	r30, 0x04	; 4
 456:	f4 e0       	ldi	r31, 0x04	; 4
 458:	90 81       	ld	r25, Z
 45a:	9f 77       	andi	r25, 0x7F	; 127
 45c:	90 83       	st	Z, r25
 45e:	e4 e4       	ldi	r30, 0x44	; 68
 460:	f4 e0       	ldi	r31, 0x04	; 4
 462:	90 81       	ld	r25, Z
 464:	91 60       	ori	r25, 0x01	; 1
 466:	90 83       	st	Z, r25
 468:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 46c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 470:	80 38       	cpi	r24, 0x80	; 128
 472:	e1 f7       	brne	.-8      	; 0x46c <lcd_spi_transmit_DATA+0x24>
 474:	e4 e0       	ldi	r30, 0x04	; 4
 476:	f4 e0       	ldi	r31, 0x04	; 4
 478:	80 81       	ld	r24, Z
 47a:	80 68       	ori	r24, 0x80	; 128
 47c:	80 83       	st	Z, r24
 47e:	08 95       	ret

00000480 <update_lcd_dog>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
void update_lcd_dog(void) {
 480:	cf 93       	push	r28
 482:	df 93       	push	r29

	init_spi_lcd();		//init SPI port for LCD.
 484:	0e 94 f6 01 	call	0x3ec	; 0x3ec <init_spi_lcd>

	// send line 1 to the LCD module.
	lcd_spi_transmit_CMD(0x80);	//init DDRAM addr-ctr
 488:	80 e8       	ldi	r24, 0x80	; 128
 48a:	0e 94 09 02 	call	0x412	; 0x412 <lcd_spi_transmit_CMD>
 48e:	85 e3       	ldi	r24, 0x35	; 53
 490:	8a 95       	dec	r24
 492:	f1 f7       	brne	.-4      	; 0x490 <update_lcd_dog+0x10>
 494:	00 00       	nop
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 496:	c0 e0       	ldi	r28, 0x00	; 0
 498:	d0 e0       	ldi	r29, 0x00	; 0
 49a:	0b c0       	rjmp	.+22     	; 0x4b2 <update_lcd_dog+0x32>
		lcd_spi_transmit_DATA(dsp_buff1[i]);
 49c:	fe 01       	movw	r30, r28
 49e:	ec 58       	subi	r30, 0x8C	; 140
 4a0:	ff 4b       	sbci	r31, 0xBF	; 191
 4a2:	80 81       	ld	r24, Z
 4a4:	0e 94 24 02 	call	0x448	; 0x448 <lcd_spi_transmit_DATA>
 4a8:	85 e3       	ldi	r24, 0x35	; 53
 4aa:	8a 95       	dec	r24
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <update_lcd_dog+0x2a>
 4ae:	00 00       	nop
	init_spi_lcd();		//init SPI port for LCD.

	// send line 1 to the LCD module.
	lcd_spi_transmit_CMD(0x80);	//init DDRAM addr-ctr
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4b0:	21 96       	adiw	r28, 0x01	; 1
 4b2:	c0 31       	cpi	r28, 0x10	; 16
 4b4:	d1 05       	cpc	r29, r1
 4b6:	94 f3       	brlt	.-28     	; 0x49c <update_lcd_dog+0x1c>
		lcd_spi_transmit_DATA(dsp_buff1[i]);
		_delay_us(40);
	}
	
	// send line 2 to the LCD module.
	lcd_spi_transmit_CMD(0x90);	//init DDRAM addr-ctr
 4b8:	80 e9       	ldi	r24, 0x90	; 144
 4ba:	0e 94 09 02 	call	0x412	; 0x412 <lcd_spi_transmit_CMD>
 4be:	85 e3       	ldi	r24, 0x35	; 53
 4c0:	8a 95       	dec	r24
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <update_lcd_dog+0x40>
 4c4:	00 00       	nop
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4c6:	c0 e0       	ldi	r28, 0x00	; 0
 4c8:	d0 e0       	ldi	r29, 0x00	; 0
 4ca:	0b c0       	rjmp	.+22     	; 0x4e2 <update_lcd_dog+0x62>
		lcd_spi_transmit_DATA(dsp_buff2[i]);
 4cc:	fe 01       	movw	r30, r28
 4ce:	e9 57       	subi	r30, 0x79	; 121
 4d0:	ff 4b       	sbci	r31, 0xBF	; 191
 4d2:	80 81       	ld	r24, Z
 4d4:	0e 94 24 02 	call	0x448	; 0x448 <lcd_spi_transmit_DATA>
 4d8:	85 e3       	ldi	r24, 0x35	; 53
 4da:	8a 95       	dec	r24
 4dc:	f1 f7       	brne	.-4      	; 0x4da <update_lcd_dog+0x5a>
 4de:	00 00       	nop
	}
	
	// send line 2 to the LCD module.
	lcd_spi_transmit_CMD(0x90);	//init DDRAM addr-ctr
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4e0:	21 96       	adiw	r28, 0x01	; 1
 4e2:	c0 31       	cpi	r28, 0x10	; 16
 4e4:	d1 05       	cpc	r29, r1
 4e6:	94 f3       	brlt	.-28     	; 0x4cc <update_lcd_dog+0x4c>
		lcd_spi_transmit_DATA(dsp_buff2[i]);
		_delay_us(40);
	}
	
	// send line 3 to the LCD module.
	lcd_spi_transmit_CMD(0xA0);	//init DDRAM addr-ctr
 4e8:	80 ea       	ldi	r24, 0xA0	; 160
 4ea:	0e 94 09 02 	call	0x412	; 0x412 <lcd_spi_transmit_CMD>
 4ee:	85 e3       	ldi	r24, 0x35	; 53
 4f0:	8a 95       	dec	r24
 4f2:	f1 f7       	brne	.-4      	; 0x4f0 <update_lcd_dog+0x70>
 4f4:	00 00       	nop
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 4f6:	c0 e0       	ldi	r28, 0x00	; 0
 4f8:	d0 e0       	ldi	r29, 0x00	; 0
 4fa:	0b c0       	rjmp	.+22     	; 0x512 <update_lcd_dog+0x92>
		lcd_spi_transmit_DATA(dsp_buff3[i]);
 4fc:	fe 01       	movw	r30, r28
 4fe:	e6 56       	subi	r30, 0x66	; 102
 500:	ff 4b       	sbci	r31, 0xBF	; 191
 502:	80 81       	ld	r24, Z
 504:	0e 94 24 02 	call	0x448	; 0x448 <lcd_spi_transmit_DATA>
 508:	85 e3       	ldi	r24, 0x35	; 53
 50a:	8a 95       	dec	r24
 50c:	f1 f7       	brne	.-4      	; 0x50a <update_lcd_dog+0x8a>
 50e:	00 00       	nop
	}
	
	// send line 3 to the LCD module.
	lcd_spi_transmit_CMD(0xA0);	//init DDRAM addr-ctr
	_delay_us(40);
	for (int i = 0; i < 16; i++) {
 510:	21 96       	adiw	r28, 0x01	; 1
 512:	c0 31       	cpi	r28, 0x10	; 16
 514:	d1 05       	cpc	r29, r1
 516:	94 f3       	brlt	.-28     	; 0x4fc <update_lcd_dog+0x7c>
		lcd_spi_transmit_DATA(dsp_buff3[i]);
		_delay_us(40);
	}
}
 518:	df 91       	pop	r29
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <SPI_rtc_ds1306_config>:
// the ds1306.
//******************************************************************************

void SPI_rtc_ds1306_config (void){

			PORTA_DIR = 0xD0;
 51e:	80 ed       	ldi	r24, 0xD0	; 208
 520:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
			//PORTA_PIN5CTRL = PORT_PULLUPEN_bm;
			PORTC_DIR = 0x02;
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
			
		//	PORTC_OUT = 0x00;
				//configures SPI
		
	
	SPI0_CTRLA = SPI_ENABLE_bm | SPI_MASTER_bm;
 52a:	e0 e4       	ldi	r30, 0x40	; 64
 52c:	f9 e0       	ldi	r31, 0x09	; 9
 52e:	81 e2       	ldi	r24, 0x21	; 33
 530:	80 83       	st	Z, r24
	
	//in the Salaee diagrams given in the lecture, I saw that CPOL would be 0
	//as the CLK is 0 when idle, to find CPHA I observed the same diagrams and saw
	// it was being sampled at the falling edge so CPHA = 1
	//CPOL = 0, CPHA = 1 is mode 1 for SPI
	SPI0_CTRLB = SPI_MODE_1_gc;
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	90 93 41 09 	sts	0x0941, r25	; 0x800941 <__TEXT_REGION_LENGTH__+0x7e0941>
	
	
	PORTC_OUT &= 0xFD;
 538:	a4 e4       	ldi	r26, 0x44	; 68
 53a:	b4 e0       	ldi	r27, 0x04	; 4
 53c:	8c 91       	ld	r24, X
 53e:	8d 7f       	andi	r24, 0xFD	; 253
 540:	8c 93       	st	X, r24
	SPI0.DATA = 0x01;
 542:	94 83       	std	Z+4, r25	; 0x04
 544:	08 95       	ret

00000546 <block_write_RTC>:
//**************************************************************************



void block_write_RTC (volatile unsigned char *array_ptr,
unsigned char strt_addr, unsigned char count){
 546:	dc 01       	movw	r26, r24
	
	if(SPI0_INTFLAGS !=  SPI_IF_bm){
 548:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 54c:	80 38       	cpi	r24, 0x80	; 128
 54e:	19 f0       	breq	.+6      	; 0x556 <block_write_RTC+0x10>
		SPI0.DATA = 0x01;
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	}
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}
 556:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 55a:	90 38       	cpi	r25, 0x80	; 128
 55c:	e1 f7       	brne	.-8      	; 0x556 <block_write_RTC+0x10>
	PORTA_OUT |= 0x80;
 55e:	e4 e0       	ldi	r30, 0x04	; 4
 560:	f4 e0       	ldi	r31, 0x04	; 4
 562:	80 81       	ld	r24, Z
 564:	80 68       	ori	r24, 0x80	; 128
 566:	80 83       	st	Z, r24
 568:	84 e0       	ldi	r24, 0x04	; 4
 56a:	8a 95       	dec	r24
 56c:	f1 f7       	brne	.-4      	; 0x56a <block_write_RTC+0x24>
	_delay_us(3);
	SPI0.DATA = strt_addr;
 56e:	e0 e4       	ldi	r30, 0x40	; 64
 570:	f9 e0       	ldi	r31, 0x09	; 9
 572:	64 83       	std	Z+4, r22	; 0x04
	SPI0.DATA = strt_addr;
 574:	64 83       	std	Z+4, r22	; 0x04
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 576:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 57a:	90 38       	cpi	r25, 0x80	; 128
 57c:	e1 f7       	brne	.-8      	; 0x576 <block_write_RTC+0x30>
 57e:	20 e0       	ldi	r18, 0x00	; 0
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	0c c0       	rjmp	.+24     	; 0x59c <block_write_RTC+0x56>
	for(int i = 0;i<count;i++)
	{
		SPI0.DATA = *(array_ptr + i);
 584:	fd 01       	movw	r30, r26
 586:	e2 0f       	add	r30, r18
 588:	f3 1f       	adc	r31, r19
 58a:	90 81       	ld	r25, Z
 58c:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 590:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 594:	90 38       	cpi	r25, 0x80	; 128
 596:	e1 f7       	brne	.-8      	; 0x590 <block_write_RTC+0x4a>
	PORTA_OUT |= 0x80;
	_delay_us(3);
	SPI0.DATA = strt_addr;
	SPI0.DATA = strt_addr;
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
	for(int i = 0;i<count;i++)
 598:	2f 5f       	subi	r18, 0xFF	; 255
 59a:	3f 4f       	sbci	r19, 0xFF	; 255
 59c:	64 2f       	mov	r22, r20
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	26 17       	cp	r18, r22
 5a2:	37 07       	cpc	r19, r23
 5a4:	7c f3       	brlt	.-34     	; 0x584 <block_write_RTC+0x3e>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
		
		//array_ptr++;
		
	}
		PORTC_OUT &= 0xFD;
 5a6:	e4 e4       	ldi	r30, 0x44	; 68
 5a8:	f4 e0       	ldi	r31, 0x04	; 4
 5aa:	80 81       	ld	r24, Z
 5ac:	8d 7f       	andi	r24, 0xFD	; 253
 5ae:	80 83       	st	Z, r24
 5b0:	08 95       	ret

000005b2 <block_read_RTC>:
// destination array.
//**************************************************************************


void block_read_RTC(volatile unsigned char *array_ptr,
unsigned char strt_addr, unsigned char count){
 5b2:	dc 01       	movw	r26, r24
	//dummy data
	
	SPI0.DATA = 0x01;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}
 5ba:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 5be:	90 38       	cpi	r25, 0x80	; 128
 5c0:	e1 f7       	brne	.-8      	; 0x5ba <block_read_RTC+0x8>
	PORTC_OUT |= 0x01;
 5c2:	e4 e4       	ldi	r30, 0x44	; 68
 5c4:	f4 e0       	ldi	r31, 0x04	; 4
 5c6:	80 81       	ld	r24, Z
 5c8:	81 60       	ori	r24, 0x01	; 1
 5ca:	80 83       	st	Z, r24
 5cc:	84 e0       	ldi	r24, 0x04	; 4
 5ce:	8a 95       	dec	r24
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <block_read_RTC+0x1c>
	_delay_us(3);
	
	SPI0.DATA = strt_addr;
 5d2:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 5d6:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 5da:	90 38       	cpi	r25, 0x80	; 128
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <block_read_RTC+0x24>
 5de:	20 e0       	ldi	r18, 0x00	; 0
 5e0:	30 e0       	ldi	r19, 0x00	; 0
 5e2:	0f c0       	rjmp	.+30     	; 0x602 <block_read_RTC+0x50>
	for(int i = 0;i<count;i++)
	{
		SPI0.DATA = 0x01;
 5e4:	91 e0       	ldi	r25, 0x01	; 1
 5e6:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 5ea:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 5ee:	90 38       	cpi	r25, 0x80	; 128
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <block_read_RTC+0x38>
		*(array_ptr + i) = SPI0.DATA;
 5f2:	fd 01       	movw	r30, r26
 5f4:	e2 0f       	add	r30, r18
 5f6:	f3 1f       	adc	r31, r19
 5f8:	90 91 44 09 	lds	r25, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 5fc:	90 83       	st	Z, r25
	PORTC_OUT |= 0x01;
	_delay_us(3);
	
	SPI0.DATA = strt_addr;
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
	for(int i = 0;i<count;i++)
 5fe:	2f 5f       	subi	r18, 0xFF	; 255
 600:	3f 4f       	sbci	r19, 0xFF	; 255
 602:	64 2f       	mov	r22, r20
 604:	70 e0       	ldi	r23, 0x00	; 0
 606:	26 17       	cp	r18, r22
 608:	37 07       	cpc	r19, r23
 60a:	64 f3       	brlt	.-40     	; 0x5e4 <block_read_RTC+0x32>
 60c:	00 00       	nop
		*(array_ptr + i) = SPI0.DATA;
		
	}
	
	_delay_us(.17);
	PORTC_OUT &= 0xFD;
 60e:	e4 e4       	ldi	r30, 0x44	; 68
 610:	f4 e0       	ldi	r31, 0x04	; 4
 612:	80 81       	ld	r24, Z
 614:	8d 7f       	andi	r24, 0xFD	; 253
 616:	80 83       	st	Z, r24
	//write dummy data	
	SPI0.DATA = 0x01;
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
 61e:	08 95       	ret

00000620 <write_RTC>:
// data (data_RTC). In the DS1306 data sheet this operation is called an SPI
// single-byte write.
//**************************************************************************

void write_RTC (unsigned char reg_RTC, unsigned char data_RTC){
	if(SPI0_INTFLAGS !=  SPI_IF_bm){
 620:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 624:	90 38       	cpi	r25, 0x80	; 128
 626:	19 f0       	breq	.+6      	; 0x62e <write_RTC+0xe>
			SPI0.DATA = 0x01;
 628:	91 e0       	ldi	r25, 0x01	; 1
 62a:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	}
	while(SPI0_INTFLAGS !=  SPI_IF_bm){} 
 62e:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 632:	90 38       	cpi	r25, 0x80	; 128
 634:	e1 f7       	brne	.-8      	; 0x62e <write_RTC+0xe>
		
	PORTC_OUT |= 0x01;
 636:	e4 e4       	ldi	r30, 0x44	; 68
 638:	f4 e0       	ldi	r31, 0x04	; 4
 63a:	90 81       	ld	r25, Z
 63c:	91 60       	ori	r25, 0x01	; 1
 63e:	90 83       	st	Z, r25
 640:	94 e0       	ldi	r25, 0x04	; 4
 642:	9a 95       	dec	r25
 644:	f1 f7       	brne	.-4      	; 0x642 <write_RTC+0x22>
	_delay_us(3);

	
	SPI0.DATA = reg_RTC;
 646:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 64a:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 64e:	80 38       	cpi	r24, 0x80	; 128
 650:	e1 f7       	brne	.-8      	; 0x64a <write_RTC+0x2a>
	SPI0.DATA = data_RTC;
 652:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 656:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 65a:	80 38       	cpi	r24, 0x80	; 128
 65c:	e1 f7       	brne	.-8      	; 0x656 <write_RTC+0x36>
 65e:	00 00       	nop
	_delay_us(.17);
		PORTC_OUT &= 0xFD;
 660:	e4 e4       	ldi	r30, 0x44	; 68
 662:	f4 e0       	ldi	r31, 0x04	; 4
 664:	80 81       	ld	r24, Z
 666:	8d 7f       	andi	r24, 0xFD	; 253
 668:	80 83       	st	Z, r24
 66a:	08 95       	ret

0000066c <read_RTC>:
// byte to generate the SCLKs to read the data (data_RTC). In the DS1306 data
// sheet this operation is called am SPI single-byte read.
//**************************************************************************
unsigned char read_RTC (unsigned char reg_RTC) {
	//write dummy data
	SPI0.DATA = 0x01;
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while(SPI0_INTFLAGS !=  SPI_IF_bm){} 
 672:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 676:	90 38       	cpi	r25, 0x80	; 128
 678:	e1 f7       	brne	.-8      	; 0x672 <read_RTC+0x6>
	PORTC_OUT |= 0x01;
 67a:	e4 e4       	ldi	r30, 0x44	; 68
 67c:	f4 e0       	ldi	r31, 0x04	; 4
 67e:	90 81       	ld	r25, Z
 680:	91 60       	ori	r25, 0x01	; 1
 682:	90 83       	st	Z, r25
 684:	94 e0       	ldi	r25, 0x04	; 4
 686:	9a 95       	dec	r25
 688:	f1 f7       	brne	.-4      	; 0x686 <read_RTC+0x1a>
	_delay_us(3);
	//writes the read address
	SPI0.DATA = reg_RTC;
 68a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 68e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 692:	80 38       	cpi	r24, 0x80	; 128
 694:	e1 f7       	brne	.-8      	; 0x68e <read_RTC+0x22>
	//write dummy data
	SPI0.DATA = 0x01;
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	while(SPI0_INTFLAGS !=  SPI_IF_bm){}    // wait until Tx ready
 69c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 6a0:	80 38       	cpi	r24, 0x80	; 128
 6a2:	e1 f7       	brne	.-8      	; 0x69c <read_RTC+0x30>
	unsigned char temp = SPI0.DATA;
 6a4:	e0 e4       	ldi	r30, 0x40	; 64
 6a6:	f9 e0       	ldi	r31, 0x09	; 9
 6a8:	84 81       	ldd	r24, Z+4	; 0x04
 6aa:	00 00       	nop
	
	
	_delay_us(.17);

	PORTC_OUT &= 0xFD;
 6ac:	a4 e4       	ldi	r26, 0x44	; 68
 6ae:	b4 e0       	ldi	r27, 0x04	; 4
 6b0:	9c 91       	ld	r25, X
 6b2:	9d 7f       	andi	r25, 0xFD	; 253
 6b4:	9c 93       	st	X, r25
		//write dummy data
	SPI0.DATA = 0x01;
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	94 83       	std	Z+4, r25	; 0x04
	return temp;
	
}
 6ba:	08 95       	ret

000006bc <write_read_RTC_test>:
// 0xA0 through 0xA9 and the corresponding locations read are 0x20 through 0x29.
//**************************************************************************
void write_read_RTC_test() {
	//write_RTC(CTRL_REG, 0x00);	
	//RTC_time_date_write()	
     block_write_RTC (RTC_time_date_write, RTCWrite, 7);
 6bc:	47 e0       	ldi	r20, 0x07	; 7
 6be:	60 e8       	ldi	r22, 0x80	; 128
 6c0:	8c e6       	ldi	r24, 0x6C	; 108
 6c2:	90 e4       	ldi	r25, 0x40	; 64
 6c4:	0e 94 a3 02 	call	0x546	; 0x546 <block_write_RTC>
	   block_read_RTC (RTC_time_date_read, RTCRead, 7);
 6c8:	47 e0       	ldi	r20, 0x07	; 7
 6ca:	60 e0       	ldi	r22, 0x00	; 0
 6cc:	8d eb       	ldi	r24, 0xBD	; 189
 6ce:	90 e4       	ldi	r25, 0x40	; 64
 6d0:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <block_read_RTC>
	
			sprintf(dsp_buff1, "time: %d:%d:%d", RTC_time_date_read[2],
			RTC_time_date_read[1],RTC_time_date_read[0]);
 6d4:	ed eb       	ldi	r30, 0xBD	; 189
 6d6:	f0 e4       	ldi	r31, 0x40	; 64
 6d8:	20 81       	ld	r18, Z
 6da:	91 81       	ldd	r25, Z+1	; 0x01
	//write_RTC(CTRL_REG, 0x00);	
	//RTC_time_date_write()	
     block_write_RTC (RTC_time_date_write, RTCWrite, 7);
	   block_read_RTC (RTC_time_date_read, RTCRead, 7);
	
			sprintf(dsp_buff1, "time: %d:%d:%d", RTC_time_date_read[2],
 6dc:	82 81       	ldd	r24, Z+2	; 0x02
 6de:	1f 92       	push	r1
 6e0:	2f 93       	push	r18
 6e2:	1f 92       	push	r1
 6e4:	9f 93       	push	r25
 6e6:	1f 92       	push	r1
 6e8:	8f 93       	push	r24
 6ea:	85 e1       	ldi	r24, 0x15	; 21
 6ec:	90 e4       	ldi	r25, 0x40	; 64
 6ee:	9f 93       	push	r25
 6f0:	8f 93       	push	r24
 6f2:	84 e7       	ldi	r24, 0x74	; 116
 6f4:	90 e4       	ldi	r25, 0x40	; 64
 6f6:	9f 93       	push	r25
 6f8:	8f 93       	push	r24
 6fa:	0e 94 95 04 	call	0x92a	; 0x92a <sprintf>
			RTC_time_date_read[1],RTC_time_date_read[0]);
	
}
 6fe:	8d b7       	in	r24, 0x3d	; 61
 700:	9e b7       	in	r25, 0x3e	; 62
 702:	0a 96       	adiw	r24, 0x0a	; 10
 704:	8d bf       	out	0x3d, r24	; 61
 706:	9e bf       	out	0x3e, r25	; 62
 708:	08 95       	ret

0000070a <fsm>:
// DESCRIPTION: runs through the FSM to run the method assioshcated with this 
// state & go to the next state as determined by the state & key that 
// matches a search
//**************************************************************************
void fsm (state ps, key keyval)
{
 70a:	0f 93       	push	r16
 70c:	1f 93       	push	r17
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
	// present state for the transition structure that has has keyvalue
	// field value that is equal to current input key value or equal
	// to eol.
	
	int i;
	for (i = 0; (ps_transition_ptr[ps][i].keyval != keyval)
 712:	20 e0       	ldi	r18, 0x00	; 0
 714:	30 e0       	ldi	r19, 0x00	; 0
 716:	02 c0       	rjmp	.+4      	; 0x71c <fsm+0x12>
	&& (ps_transition_ptr[ps][i].keyval != eol); i++);
 718:	2f 5f       	subi	r18, 0xFF	; 255
 71a:	3f 4f       	sbci	r19, 0xFF	; 255
	// present state for the transition structure that has has keyvalue
	// field value that is equal to current input key value or equal
	// to eol.
	
	int i;
	for (i = 0; (ps_transition_ptr[ps][i].keyval != keyval)
 71c:	c8 2f       	mov	r28, r24
 71e:	d0 e0       	ldi	r29, 0x00	; 0
 720:	fe 01       	movw	r30, r28
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	e0 50       	subi	r30, 0x00	; 0
 728:	f0 4c       	sbci	r31, 0xC0	; 192
 72a:	01 90       	ld	r0, Z+
 72c:	f0 81       	ld	r31, Z
 72e:	e0 2d       	mov	r30, r0
 730:	89 01       	movw	r16, r18
 732:	00 0f       	add	r16, r16
 734:	11 1f       	adc	r17, r17
 736:	00 0f       	add	r16, r16
 738:	11 1f       	adc	r17, r17
 73a:	e0 0f       	add	r30, r16
 73c:	f1 1f       	adc	r31, r17
 73e:	90 81       	ld	r25, Z
 740:	96 17       	cp	r25, r22
 742:	11 f0       	breq	.+4      	; 0x748 <fsm+0x3e>
	&& (ps_transition_ptr[ps][i].keyval != eol); i++);
 744:	96 30       	cpi	r25, 0x06	; 6
 746:	41 f7       	brne	.-48     	; 0x718 <fsm+0xe>
	// corresponding to the current intput key value.

	// Invoke the task function pointed to by the task function pointer
	// of the current transition structure.

	ps_transition_ptr[ps][i].tf_ptr();
 748:	02 80       	ldd	r0, Z+2	; 0x02
 74a:	f3 81       	ldd	r31, Z+3	; 0x03
 74c:	e0 2d       	mov	r30, r0
 74e:	09 95       	icall

	// Make present state equal to the next state value of the current
	// transition structure.

	present_state = ps_transition_ptr[ps][i].next_state;
 750:	cc 0f       	add	r28, r28
 752:	dd 1f       	adc	r29, r29
 754:	c0 50       	subi	r28, 0x00	; 0
 756:	d0 4c       	sbci	r29, 0xC0	; 192
 758:	88 81       	ld	r24, Y
 75a:	99 81       	ldd	r25, Y+1	; 0x01
 75c:	fc 01       	movw	r30, r24
 75e:	e0 0f       	add	r30, r16
 760:	f1 1f       	adc	r31, r17
 762:	81 81       	ldd	r24, Z+1	; 0x01
 764:	80 93 c4 40 	sts	0x40C4, r24	; 0x8040c4 <present_state>

}	
 768:	df 91       	pop	r29
 76a:	cf 91       	pop	r28
 76c:	1f 91       	pop	r17
 76e:	0f 91       	pop	r16
 770:	08 95       	ret

00000772 <__vector_30>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
ISR (PORTC_PORT_vect) {
 772:	1f 92       	push	r1
 774:	0f 92       	push	r0
 776:	0f b6       	in	r0, 0x3f	; 63
 778:	0f 92       	push	r0
 77a:	11 24       	eor	r1, r1
 77c:	0b b6       	in	r0, 0x3b	; 59
 77e:	0f 92       	push	r0
 780:	2f 93       	push	r18
 782:	3f 93       	push	r19
 784:	4f 93       	push	r20
 786:	5f 93       	push	r21
 788:	6f 93       	push	r22
 78a:	7f 93       	push	r23
 78c:	8f 93       	push	r24
 78e:	9f 93       	push	r25
 790:	af 93       	push	r26
 792:	bf 93       	push	r27
 794:	ef 93       	push	r30
 796:	ff 93       	push	r31
	cli();
 798:	f8 94       	cli
	//clears the flags
	//block_read_RTC(temp, CTRL_REG, 8);
	//clear flag
	 write_read_RTC_test();
 79a:	0e 94 5e 03 	call	0x6bc	; 0x6bc <write_read_RTC_test>
	
	
	convert();
 79e:	0e 94 ae 00 	call	0x15c	; 0x15c <convert>
	update_lcd_dog();
 7a2:	0e 94 40 02 	call	0x480	; 0x480 <update_lcd_dog>
	sei();
 7a6:	78 94       	sei
    PORTC_INTFLAGS = PORT_INT2_bm;
 7a8:	84 e0       	ldi	r24, 0x04	; 4
 7aa:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <__TEXT_REGION_LENGTH__+0x7e0449>
	return;
}
 7ae:	ff 91       	pop	r31
 7b0:	ef 91       	pop	r30
 7b2:	bf 91       	pop	r27
 7b4:	af 91       	pop	r26
 7b6:	9f 91       	pop	r25
 7b8:	8f 91       	pop	r24
 7ba:	7f 91       	pop	r23
 7bc:	6f 91       	pop	r22
 7be:	5f 91       	pop	r21
 7c0:	4f 91       	pop	r20
 7c2:	3f 91       	pop	r19
 7c4:	2f 91       	pop	r18
 7c6:	0f 90       	pop	r0
 7c8:	0b be       	out	0x3b, r0	; 59
 7ca:	0f 90       	pop	r0
 7cc:	0f be       	out	0x3f, r0	; 63
 7ce:	0f 90       	pop	r0
 7d0:	1f 90       	pop	r1
 7d2:	18 95       	reti

000007d4 <__vector_53>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
ISR(USART3_RXC_vect){
 7d4:	1f 92       	push	r1
 7d6:	0f 92       	push	r0
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	0f 92       	push	r0
 7dc:	11 24       	eor	r1, r1
 7de:	0b b6       	in	r0, 0x3b	; 59
 7e0:	0f 92       	push	r0
 7e2:	2f 93       	push	r18
 7e4:	3f 93       	push	r19
 7e6:	4f 93       	push	r20
 7e8:	5f 93       	push	r21
 7ea:	6f 93       	push	r22
 7ec:	7f 93       	push	r23
 7ee:	8f 93       	push	r24
 7f0:	9f 93       	push	r25
 7f2:	af 93       	push	r26
 7f4:	bf 93       	push	r27
 7f6:	ef 93       	push	r30
 7f8:	ff 93       	push	r31
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	1f 92       	push	r1
 800:	cd b7       	in	r28, 0x3d	; 61
 802:	de b7       	in	r29, 0x3e	; 62
	volatile char char_received;
	char_received = USART3_RXDATAL;
 804:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
 808:	89 83       	std	Y+1, r24	; 0x01
	if(char_received == 's')
 80a:	89 81       	ldd	r24, Y+1	; 0x01
 80c:	83 37       	cpi	r24, 0x73	; 115
 80e:	31 f4       	brne	.+12     	; 0x81c <__vector_53+0x48>
		fsm(present_state, s);
 810:	60 e0       	ldi	r22, 0x00	; 0
 812:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <present_state>
 816:	0e 94 85 03 	call	0x70a	; 0x70a <fsm>
 81a:	3c c0       	rjmp	.+120    	; 0x894 <__vector_53+0xc0>

	else if(char_received == 'h')
 81c:	89 81       	ldd	r24, Y+1	; 0x01
 81e:	88 36       	cpi	r24, 0x68	; 104
 820:	31 f4       	brne	.+12     	; 0x82e <__vector_53+0x5a>
	fsm(present_state, h);	
 822:	61 e0       	ldi	r22, 0x01	; 1
 824:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <present_state>
 828:	0e 94 85 03 	call	0x70a	; 0x70a <fsm>
 82c:	33 c0       	rjmp	.+102    	; 0x894 <__vector_53+0xc0>
	
	else if(char_received == 'm')
 82e:	89 81       	ldd	r24, Y+1	; 0x01
 830:	8d 36       	cpi	r24, 0x6D	; 109
 832:	31 f4       	brne	.+12     	; 0x840 <__vector_53+0x6c>
	fsm(present_state, m);
 834:	62 e0       	ldi	r22, 0x02	; 2
 836:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <present_state>
 83a:	0e 94 85 03 	call	0x70a	; 0x70a <fsm>
 83e:	2a c0       	rjmp	.+84     	; 0x894 <__vector_53+0xc0>
	
	//char for secs since s taken
	else if(char_received == 'c')
 840:	89 81       	ldd	r24, Y+1	; 0x01
 842:	83 36       	cpi	r24, 0x63	; 99
 844:	31 f4       	brne	.+12     	; 0x852 <__vector_53+0x7e>
	fsm(present_state, sec);
 846:	63 e0       	ldi	r22, 0x03	; 3
 848:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <present_state>
 84c:	0e 94 85 03 	call	0x70a	; 0x70a <fsm>
 850:	21 c0       	rjmp	.+66     	; 0x894 <__vector_53+0xc0>
	
	//check if digit entered
	else if((char_received >= '0') && (char_received <= '9')){
 852:	89 81       	ldd	r24, Y+1	; 0x01
 854:	80 33       	cpi	r24, 0x30	; 48
 856:	80 f0       	brcs	.+32     	; 0x878 <__vector_53+0xa4>
 858:	89 81       	ldd	r24, Y+1	; 0x01
 85a:	8a 33       	cpi	r24, 0x3A	; 58
 85c:	68 f4       	brcc	.+26     	; 0x878 <__vector_53+0xa4>
		digit_val = char_received & 0x0F;
 85e:	89 81       	ldd	r24, Y+1	; 0x01
 860:	8f 70       	andi	r24, 0x0F	; 15
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	80 93 c8 40 	sts	0x40C8, r24	; 0x8040c8 <digit_val>
 868:	90 93 c9 40 	sts	0x40C9, r25	; 0x8040c9 <digit_val+0x1>
		fsm(present_state, digit);
 86c:	64 e0       	ldi	r22, 0x04	; 4
 86e:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <present_state>
 872:	0e 94 85 03 	call	0x70a	; 0x70a <fsm>
 876:	0e c0       	rjmp	.+28     	; 0x894 <__vector_53+0xc0>
	}
	//checked if enter key pushed
	else if(char_received == 0x0d){
 878:	89 81       	ldd	r24, Y+1	; 0x01
 87a:	8d 30       	cpi	r24, 0x0D	; 13
 87c:	31 f4       	brne	.+12     	; 0x88a <__vector_53+0xb6>
			fsm(present_state,enter);
 87e:	65 e0       	ldi	r22, 0x05	; 5
 880:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <present_state>
 884:	0e 94 85 03 	call	0x70a	; 0x70a <fsm>
 888:	05 c0       	rjmp	.+10     	; 0x894 <__vector_53+0xc0>
		}
	else 
	//eol in fsm
	fsm(present_state, char_received);
 88a:	69 81       	ldd	r22, Y+1	; 0x01
 88c:	80 91 c4 40 	lds	r24, 0x40C4	; 0x8040c4 <present_state>
 890:	0e 94 85 03 	call	0x70a	; 0x70a <fsm>

}
 894:	0f 90       	pop	r0
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	0f 90       	pop	r0
 8b4:	0b be       	out	0x3b, r0	; 59
 8b6:	0f 90       	pop	r0
 8b8:	0f be       	out	0x3f, r0	; 63
 8ba:	0f 90       	pop	r0
 8bc:	1f 90       	pop	r1
 8be:	18 95       	reti

000008c0 <initInterupt>:
//
//**************************************************************************


void initInterupt(){
		PORTC_DIR = 0x00;
 8c0:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
		PORTC_PIN3CTRL = PORT_ISC_FALLING_gc | 0x08;
 8c4:	8b e0       	ldi	r24, 0x0B	; 11
 8c6:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <__TEXT_REGION_LENGTH__+0x7e0453>
		write_RTC (CTRL_REG, 0x00);
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	8f e8       	ldi	r24, 0x8F	; 143
 8ce:	0e 94 10 03 	call	0x620	; 0x620 <write_RTC>
//set 1hz interrupt
		write_RTC (CTRL_REG, 0x04);
 8d2:	64 e0       	ldi	r22, 0x04	; 4
 8d4:	8f e8       	ldi	r24, 0x8F	; 143
 8d6:	0e 94 10 03 	call	0x620	; 0x620 <write_RTC>
 8da:	08 95       	ret

000008dc <main>:

int main(void)
{
	
	
	SPI_rtc_ds1306_config();
 8dc:	0e 94 8f 02 	call	0x51e	; 0x51e <SPI_rtc_ds1306_config>
	init_adc();
 8e0:	0e 94 9b 00 	call	0x136	; 0x136 <init_adc>
	initInterupt();
 8e4:	0e 94 60 04 	call	0x8c0	; 0x8c0 <initInterupt>
	init_USART();
 8e8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <init_USART>
	//initalize 
	present_state = idle;
 8ec:	10 92 c4 40 	sts	0x40C4, r1	; 0x8040c4 <present_state>
	
	
	sei();
 8f0:	78 94       	sei
	/* Replace with your application code */
	while (1)
	{
		
		asm volatile ("nop");
 8f2:	00 00       	nop
 8f4:	fe cf       	rjmp	.-4      	; 0x8f2 <main+0x16>

000008f6 <__muluhisi3>:
 8f6:	0e 94 86 04 	call	0x90c	; 0x90c <__umulhisi3>
 8fa:	a5 9f       	mul	r26, r21
 8fc:	90 0d       	add	r25, r0
 8fe:	b4 9f       	mul	r27, r20
 900:	90 0d       	add	r25, r0
 902:	a4 9f       	mul	r26, r20
 904:	80 0d       	add	r24, r0
 906:	91 1d       	adc	r25, r1
 908:	11 24       	eor	r1, r1
 90a:	08 95       	ret

0000090c <__umulhisi3>:
 90c:	a2 9f       	mul	r26, r18
 90e:	b0 01       	movw	r22, r0
 910:	b3 9f       	mul	r27, r19
 912:	c0 01       	movw	r24, r0
 914:	a3 9f       	mul	r26, r19
 916:	70 0d       	add	r23, r0
 918:	81 1d       	adc	r24, r1
 91a:	11 24       	eor	r1, r1
 91c:	91 1d       	adc	r25, r1
 91e:	b2 9f       	mul	r27, r18
 920:	70 0d       	add	r23, r0
 922:	81 1d       	adc	r24, r1
 924:	11 24       	eor	r1, r1
 926:	91 1d       	adc	r25, r1
 928:	08 95       	ret

0000092a <sprintf>:
 92a:	0f 93       	push	r16
 92c:	1f 93       	push	r17
 92e:	cf 93       	push	r28
 930:	df 93       	push	r29
 932:	cd b7       	in	r28, 0x3d	; 61
 934:	de b7       	in	r29, 0x3e	; 62
 936:	2e 97       	sbiw	r28, 0x0e	; 14
 938:	cd bf       	out	0x3d, r28	; 61
 93a:	de bf       	out	0x3e, r29	; 62
 93c:	0d 89       	ldd	r16, Y+21	; 0x15
 93e:	1e 89       	ldd	r17, Y+22	; 0x16
 940:	86 e0       	ldi	r24, 0x06	; 6
 942:	8c 83       	std	Y+4, r24	; 0x04
 944:	09 83       	std	Y+1, r16	; 0x01
 946:	1a 83       	std	Y+2, r17	; 0x02
 948:	8f ef       	ldi	r24, 0xFF	; 255
 94a:	9f e7       	ldi	r25, 0x7F	; 127
 94c:	8d 83       	std	Y+5, r24	; 0x05
 94e:	9e 83       	std	Y+6, r25	; 0x06
 950:	ae 01       	movw	r20, r28
 952:	47 5e       	subi	r20, 0xE7	; 231
 954:	5f 4f       	sbci	r21, 0xFF	; 255
 956:	6f 89       	ldd	r22, Y+23	; 0x17
 958:	78 8d       	ldd	r23, Y+24	; 0x18
 95a:	ce 01       	movw	r24, r28
 95c:	01 96       	adiw	r24, 0x01	; 1
 95e:	0e 94 be 04 	call	0x97c	; 0x97c <vfprintf>
 962:	ef 81       	ldd	r30, Y+7	; 0x07
 964:	f8 85       	ldd	r31, Y+8	; 0x08
 966:	e0 0f       	add	r30, r16
 968:	f1 1f       	adc	r31, r17
 96a:	10 82       	st	Z, r1
 96c:	2e 96       	adiw	r28, 0x0e	; 14
 96e:	cd bf       	out	0x3d, r28	; 61
 970:	de bf       	out	0x3e, r29	; 62
 972:	df 91       	pop	r29
 974:	cf 91       	pop	r28
 976:	1f 91       	pop	r17
 978:	0f 91       	pop	r16
 97a:	08 95       	ret

0000097c <vfprintf>:
 97c:	2f 92       	push	r2
 97e:	3f 92       	push	r3
 980:	4f 92       	push	r4
 982:	5f 92       	push	r5
 984:	6f 92       	push	r6
 986:	7f 92       	push	r7
 988:	8f 92       	push	r8
 98a:	9f 92       	push	r9
 98c:	af 92       	push	r10
 98e:	bf 92       	push	r11
 990:	cf 92       	push	r12
 992:	df 92       	push	r13
 994:	ef 92       	push	r14
 996:	ff 92       	push	r15
 998:	0f 93       	push	r16
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	cd b7       	in	r28, 0x3d	; 61
 9a2:	de b7       	in	r29, 0x3e	; 62
 9a4:	2b 97       	sbiw	r28, 0x0b	; 11
 9a6:	cd bf       	out	0x3d, r28	; 61
 9a8:	de bf       	out	0x3e, r29	; 62
 9aa:	6c 01       	movw	r12, r24
 9ac:	7b 01       	movw	r14, r22
 9ae:	8a 01       	movw	r16, r20
 9b0:	fc 01       	movw	r30, r24
 9b2:	16 82       	std	Z+6, r1	; 0x06
 9b4:	17 82       	std	Z+7, r1	; 0x07
 9b6:	83 81       	ldd	r24, Z+3	; 0x03
 9b8:	81 ff       	sbrs	r24, 1
 9ba:	cc c1       	rjmp	.+920    	; 0xd54 <vfprintf+0x3d8>
 9bc:	ce 01       	movw	r24, r28
 9be:	01 96       	adiw	r24, 0x01	; 1
 9c0:	3c 01       	movw	r6, r24
 9c2:	f6 01       	movw	r30, r12
 9c4:	93 81       	ldd	r25, Z+3	; 0x03
 9c6:	f7 01       	movw	r30, r14
 9c8:	93 fd       	sbrc	r25, 3
 9ca:	85 91       	lpm	r24, Z+
 9cc:	93 ff       	sbrs	r25, 3
 9ce:	81 91       	ld	r24, Z+
 9d0:	7f 01       	movw	r14, r30
 9d2:	88 23       	and	r24, r24
 9d4:	09 f4       	brne	.+2      	; 0x9d8 <vfprintf+0x5c>
 9d6:	ba c1       	rjmp	.+884    	; 0xd4c <vfprintf+0x3d0>
 9d8:	85 32       	cpi	r24, 0x25	; 37
 9da:	39 f4       	brne	.+14     	; 0x9ea <vfprintf+0x6e>
 9dc:	93 fd       	sbrc	r25, 3
 9de:	85 91       	lpm	r24, Z+
 9e0:	93 ff       	sbrs	r25, 3
 9e2:	81 91       	ld	r24, Z+
 9e4:	7f 01       	movw	r14, r30
 9e6:	85 32       	cpi	r24, 0x25	; 37
 9e8:	29 f4       	brne	.+10     	; 0x9f4 <vfprintf+0x78>
 9ea:	b6 01       	movw	r22, r12
 9ec:	90 e0       	ldi	r25, 0x00	; 0
 9ee:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 9f2:	e7 cf       	rjmp	.-50     	; 0x9c2 <vfprintf+0x46>
 9f4:	91 2c       	mov	r9, r1
 9f6:	21 2c       	mov	r2, r1
 9f8:	31 2c       	mov	r3, r1
 9fa:	ff e1       	ldi	r31, 0x1F	; 31
 9fc:	f3 15       	cp	r31, r3
 9fe:	d8 f0       	brcs	.+54     	; 0xa36 <vfprintf+0xba>
 a00:	8b 32       	cpi	r24, 0x2B	; 43
 a02:	79 f0       	breq	.+30     	; 0xa22 <vfprintf+0xa6>
 a04:	38 f4       	brcc	.+14     	; 0xa14 <vfprintf+0x98>
 a06:	80 32       	cpi	r24, 0x20	; 32
 a08:	79 f0       	breq	.+30     	; 0xa28 <vfprintf+0xac>
 a0a:	83 32       	cpi	r24, 0x23	; 35
 a0c:	a1 f4       	brne	.+40     	; 0xa36 <vfprintf+0xba>
 a0e:	23 2d       	mov	r18, r3
 a10:	20 61       	ori	r18, 0x10	; 16
 a12:	1d c0       	rjmp	.+58     	; 0xa4e <vfprintf+0xd2>
 a14:	8d 32       	cpi	r24, 0x2D	; 45
 a16:	61 f0       	breq	.+24     	; 0xa30 <vfprintf+0xb4>
 a18:	80 33       	cpi	r24, 0x30	; 48
 a1a:	69 f4       	brne	.+26     	; 0xa36 <vfprintf+0xba>
 a1c:	23 2d       	mov	r18, r3
 a1e:	21 60       	ori	r18, 0x01	; 1
 a20:	16 c0       	rjmp	.+44     	; 0xa4e <vfprintf+0xd2>
 a22:	83 2d       	mov	r24, r3
 a24:	82 60       	ori	r24, 0x02	; 2
 a26:	38 2e       	mov	r3, r24
 a28:	e3 2d       	mov	r30, r3
 a2a:	e4 60       	ori	r30, 0x04	; 4
 a2c:	3e 2e       	mov	r3, r30
 a2e:	2a c0       	rjmp	.+84     	; 0xa84 <vfprintf+0x108>
 a30:	f3 2d       	mov	r31, r3
 a32:	f8 60       	ori	r31, 0x08	; 8
 a34:	1d c0       	rjmp	.+58     	; 0xa70 <vfprintf+0xf4>
 a36:	37 fc       	sbrc	r3, 7
 a38:	2d c0       	rjmp	.+90     	; 0xa94 <vfprintf+0x118>
 a3a:	20 ed       	ldi	r18, 0xD0	; 208
 a3c:	28 0f       	add	r18, r24
 a3e:	2a 30       	cpi	r18, 0x0A	; 10
 a40:	40 f0       	brcs	.+16     	; 0xa52 <vfprintf+0xd6>
 a42:	8e 32       	cpi	r24, 0x2E	; 46
 a44:	b9 f4       	brne	.+46     	; 0xa74 <vfprintf+0xf8>
 a46:	36 fc       	sbrc	r3, 6
 a48:	81 c1       	rjmp	.+770    	; 0xd4c <vfprintf+0x3d0>
 a4a:	23 2d       	mov	r18, r3
 a4c:	20 64       	ori	r18, 0x40	; 64
 a4e:	32 2e       	mov	r3, r18
 a50:	19 c0       	rjmp	.+50     	; 0xa84 <vfprintf+0x108>
 a52:	36 fe       	sbrs	r3, 6
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <vfprintf+0xe6>
 a56:	8a e0       	ldi	r24, 0x0A	; 10
 a58:	98 9e       	mul	r9, r24
 a5a:	20 0d       	add	r18, r0
 a5c:	11 24       	eor	r1, r1
 a5e:	92 2e       	mov	r9, r18
 a60:	11 c0       	rjmp	.+34     	; 0xa84 <vfprintf+0x108>
 a62:	ea e0       	ldi	r30, 0x0A	; 10
 a64:	2e 9e       	mul	r2, r30
 a66:	20 0d       	add	r18, r0
 a68:	11 24       	eor	r1, r1
 a6a:	22 2e       	mov	r2, r18
 a6c:	f3 2d       	mov	r31, r3
 a6e:	f0 62       	ori	r31, 0x20	; 32
 a70:	3f 2e       	mov	r3, r31
 a72:	08 c0       	rjmp	.+16     	; 0xa84 <vfprintf+0x108>
 a74:	8c 36       	cpi	r24, 0x6C	; 108
 a76:	21 f4       	brne	.+8      	; 0xa80 <vfprintf+0x104>
 a78:	83 2d       	mov	r24, r3
 a7a:	80 68       	ori	r24, 0x80	; 128
 a7c:	38 2e       	mov	r3, r24
 a7e:	02 c0       	rjmp	.+4      	; 0xa84 <vfprintf+0x108>
 a80:	88 36       	cpi	r24, 0x68	; 104
 a82:	41 f4       	brne	.+16     	; 0xa94 <vfprintf+0x118>
 a84:	f7 01       	movw	r30, r14
 a86:	93 fd       	sbrc	r25, 3
 a88:	85 91       	lpm	r24, Z+
 a8a:	93 ff       	sbrs	r25, 3
 a8c:	81 91       	ld	r24, Z+
 a8e:	7f 01       	movw	r14, r30
 a90:	81 11       	cpse	r24, r1
 a92:	b3 cf       	rjmp	.-154    	; 0x9fa <vfprintf+0x7e>
 a94:	98 2f       	mov	r25, r24
 a96:	9f 7d       	andi	r25, 0xDF	; 223
 a98:	95 54       	subi	r25, 0x45	; 69
 a9a:	93 30       	cpi	r25, 0x03	; 3
 a9c:	28 f4       	brcc	.+10     	; 0xaa8 <vfprintf+0x12c>
 a9e:	0c 5f       	subi	r16, 0xFC	; 252
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	9f e3       	ldi	r25, 0x3F	; 63
 aa4:	99 83       	std	Y+1, r25	; 0x01
 aa6:	0d c0       	rjmp	.+26     	; 0xac2 <vfprintf+0x146>
 aa8:	83 36       	cpi	r24, 0x63	; 99
 aaa:	31 f0       	breq	.+12     	; 0xab8 <vfprintf+0x13c>
 aac:	83 37       	cpi	r24, 0x73	; 115
 aae:	71 f0       	breq	.+28     	; 0xacc <vfprintf+0x150>
 ab0:	83 35       	cpi	r24, 0x53	; 83
 ab2:	09 f0       	breq	.+2      	; 0xab6 <vfprintf+0x13a>
 ab4:	59 c0       	rjmp	.+178    	; 0xb68 <vfprintf+0x1ec>
 ab6:	21 c0       	rjmp	.+66     	; 0xafa <vfprintf+0x17e>
 ab8:	f8 01       	movw	r30, r16
 aba:	80 81       	ld	r24, Z
 abc:	89 83       	std	Y+1, r24	; 0x01
 abe:	0e 5f       	subi	r16, 0xFE	; 254
 ac0:	1f 4f       	sbci	r17, 0xFF	; 255
 ac2:	88 24       	eor	r8, r8
 ac4:	83 94       	inc	r8
 ac6:	91 2c       	mov	r9, r1
 ac8:	53 01       	movw	r10, r6
 aca:	13 c0       	rjmp	.+38     	; 0xaf2 <vfprintf+0x176>
 acc:	28 01       	movw	r4, r16
 ace:	f2 e0       	ldi	r31, 0x02	; 2
 ad0:	4f 0e       	add	r4, r31
 ad2:	51 1c       	adc	r5, r1
 ad4:	f8 01       	movw	r30, r16
 ad6:	a0 80       	ld	r10, Z
 ad8:	b1 80       	ldd	r11, Z+1	; 0x01
 ada:	36 fe       	sbrs	r3, 6
 adc:	03 c0       	rjmp	.+6      	; 0xae4 <vfprintf+0x168>
 ade:	69 2d       	mov	r22, r9
 ae0:	70 e0       	ldi	r23, 0x00	; 0
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <vfprintf+0x16c>
 ae4:	6f ef       	ldi	r22, 0xFF	; 255
 ae6:	7f ef       	ldi	r23, 0xFF	; 255
 ae8:	c5 01       	movw	r24, r10
 aea:	0e 94 cd 06 	call	0xd9a	; 0xd9a <strnlen>
 aee:	4c 01       	movw	r8, r24
 af0:	82 01       	movw	r16, r4
 af2:	f3 2d       	mov	r31, r3
 af4:	ff 77       	andi	r31, 0x7F	; 127
 af6:	3f 2e       	mov	r3, r31
 af8:	16 c0       	rjmp	.+44     	; 0xb26 <vfprintf+0x1aa>
 afa:	28 01       	movw	r4, r16
 afc:	22 e0       	ldi	r18, 0x02	; 2
 afe:	42 0e       	add	r4, r18
 b00:	51 1c       	adc	r5, r1
 b02:	f8 01       	movw	r30, r16
 b04:	a0 80       	ld	r10, Z
 b06:	b1 80       	ldd	r11, Z+1	; 0x01
 b08:	36 fe       	sbrs	r3, 6
 b0a:	03 c0       	rjmp	.+6      	; 0xb12 <vfprintf+0x196>
 b0c:	69 2d       	mov	r22, r9
 b0e:	70 e0       	ldi	r23, 0x00	; 0
 b10:	02 c0       	rjmp	.+4      	; 0xb16 <vfprintf+0x19a>
 b12:	6f ef       	ldi	r22, 0xFF	; 255
 b14:	7f ef       	ldi	r23, 0xFF	; 255
 b16:	c5 01       	movw	r24, r10
 b18:	0e 94 c2 06 	call	0xd84	; 0xd84 <strnlen_P>
 b1c:	4c 01       	movw	r8, r24
 b1e:	f3 2d       	mov	r31, r3
 b20:	f0 68       	ori	r31, 0x80	; 128
 b22:	3f 2e       	mov	r3, r31
 b24:	82 01       	movw	r16, r4
 b26:	33 fc       	sbrc	r3, 3
 b28:	1b c0       	rjmp	.+54     	; 0xb60 <vfprintf+0x1e4>
 b2a:	82 2d       	mov	r24, r2
 b2c:	90 e0       	ldi	r25, 0x00	; 0
 b2e:	88 16       	cp	r8, r24
 b30:	99 06       	cpc	r9, r25
 b32:	b0 f4       	brcc	.+44     	; 0xb60 <vfprintf+0x1e4>
 b34:	b6 01       	movw	r22, r12
 b36:	80 e2       	ldi	r24, 0x20	; 32
 b38:	90 e0       	ldi	r25, 0x00	; 0
 b3a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 b3e:	2a 94       	dec	r2
 b40:	f4 cf       	rjmp	.-24     	; 0xb2a <vfprintf+0x1ae>
 b42:	f5 01       	movw	r30, r10
 b44:	37 fc       	sbrc	r3, 7
 b46:	85 91       	lpm	r24, Z+
 b48:	37 fe       	sbrs	r3, 7
 b4a:	81 91       	ld	r24, Z+
 b4c:	5f 01       	movw	r10, r30
 b4e:	b6 01       	movw	r22, r12
 b50:	90 e0       	ldi	r25, 0x00	; 0
 b52:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 b56:	21 10       	cpse	r2, r1
 b58:	2a 94       	dec	r2
 b5a:	21 e0       	ldi	r18, 0x01	; 1
 b5c:	82 1a       	sub	r8, r18
 b5e:	91 08       	sbc	r9, r1
 b60:	81 14       	cp	r8, r1
 b62:	91 04       	cpc	r9, r1
 b64:	71 f7       	brne	.-36     	; 0xb42 <vfprintf+0x1c6>
 b66:	e8 c0       	rjmp	.+464    	; 0xd38 <vfprintf+0x3bc>
 b68:	84 36       	cpi	r24, 0x64	; 100
 b6a:	11 f0       	breq	.+4      	; 0xb70 <vfprintf+0x1f4>
 b6c:	89 36       	cpi	r24, 0x69	; 105
 b6e:	41 f5       	brne	.+80     	; 0xbc0 <vfprintf+0x244>
 b70:	f8 01       	movw	r30, r16
 b72:	37 fe       	sbrs	r3, 7
 b74:	07 c0       	rjmp	.+14     	; 0xb84 <vfprintf+0x208>
 b76:	60 81       	ld	r22, Z
 b78:	71 81       	ldd	r23, Z+1	; 0x01
 b7a:	82 81       	ldd	r24, Z+2	; 0x02
 b7c:	93 81       	ldd	r25, Z+3	; 0x03
 b7e:	0c 5f       	subi	r16, 0xFC	; 252
 b80:	1f 4f       	sbci	r17, 0xFF	; 255
 b82:	08 c0       	rjmp	.+16     	; 0xb94 <vfprintf+0x218>
 b84:	60 81       	ld	r22, Z
 b86:	71 81       	ldd	r23, Z+1	; 0x01
 b88:	07 2e       	mov	r0, r23
 b8a:	00 0c       	add	r0, r0
 b8c:	88 0b       	sbc	r24, r24
 b8e:	99 0b       	sbc	r25, r25
 b90:	0e 5f       	subi	r16, 0xFE	; 254
 b92:	1f 4f       	sbci	r17, 0xFF	; 255
 b94:	f3 2d       	mov	r31, r3
 b96:	ff 76       	andi	r31, 0x6F	; 111
 b98:	3f 2e       	mov	r3, r31
 b9a:	97 ff       	sbrs	r25, 7
 b9c:	09 c0       	rjmp	.+18     	; 0xbb0 <vfprintf+0x234>
 b9e:	90 95       	com	r25
 ba0:	80 95       	com	r24
 ba2:	70 95       	com	r23
 ba4:	61 95       	neg	r22
 ba6:	7f 4f       	sbci	r23, 0xFF	; 255
 ba8:	8f 4f       	sbci	r24, 0xFF	; 255
 baa:	9f 4f       	sbci	r25, 0xFF	; 255
 bac:	f0 68       	ori	r31, 0x80	; 128
 bae:	3f 2e       	mov	r3, r31
 bb0:	2a e0       	ldi	r18, 0x0A	; 10
 bb2:	30 e0       	ldi	r19, 0x00	; 0
 bb4:	a3 01       	movw	r20, r6
 bb6:	0e 94 14 07 	call	0xe28	; 0xe28 <__ultoa_invert>
 bba:	88 2e       	mov	r8, r24
 bbc:	86 18       	sub	r8, r6
 bbe:	45 c0       	rjmp	.+138    	; 0xc4a <vfprintf+0x2ce>
 bc0:	85 37       	cpi	r24, 0x75	; 117
 bc2:	31 f4       	brne	.+12     	; 0xbd0 <vfprintf+0x254>
 bc4:	23 2d       	mov	r18, r3
 bc6:	2f 7e       	andi	r18, 0xEF	; 239
 bc8:	b2 2e       	mov	r11, r18
 bca:	2a e0       	ldi	r18, 0x0A	; 10
 bcc:	30 e0       	ldi	r19, 0x00	; 0
 bce:	25 c0       	rjmp	.+74     	; 0xc1a <vfprintf+0x29e>
 bd0:	93 2d       	mov	r25, r3
 bd2:	99 7f       	andi	r25, 0xF9	; 249
 bd4:	b9 2e       	mov	r11, r25
 bd6:	8f 36       	cpi	r24, 0x6F	; 111
 bd8:	c1 f0       	breq	.+48     	; 0xc0a <vfprintf+0x28e>
 bda:	18 f4       	brcc	.+6      	; 0xbe2 <vfprintf+0x266>
 bdc:	88 35       	cpi	r24, 0x58	; 88
 bde:	79 f0       	breq	.+30     	; 0xbfe <vfprintf+0x282>
 be0:	b5 c0       	rjmp	.+362    	; 0xd4c <vfprintf+0x3d0>
 be2:	80 37       	cpi	r24, 0x70	; 112
 be4:	19 f0       	breq	.+6      	; 0xbec <vfprintf+0x270>
 be6:	88 37       	cpi	r24, 0x78	; 120
 be8:	21 f0       	breq	.+8      	; 0xbf2 <vfprintf+0x276>
 bea:	b0 c0       	rjmp	.+352    	; 0xd4c <vfprintf+0x3d0>
 bec:	e9 2f       	mov	r30, r25
 bee:	e0 61       	ori	r30, 0x10	; 16
 bf0:	be 2e       	mov	r11, r30
 bf2:	b4 fe       	sbrs	r11, 4
 bf4:	0d c0       	rjmp	.+26     	; 0xc10 <vfprintf+0x294>
 bf6:	fb 2d       	mov	r31, r11
 bf8:	f4 60       	ori	r31, 0x04	; 4
 bfa:	bf 2e       	mov	r11, r31
 bfc:	09 c0       	rjmp	.+18     	; 0xc10 <vfprintf+0x294>
 bfe:	34 fe       	sbrs	r3, 4
 c00:	0a c0       	rjmp	.+20     	; 0xc16 <vfprintf+0x29a>
 c02:	29 2f       	mov	r18, r25
 c04:	26 60       	ori	r18, 0x06	; 6
 c06:	b2 2e       	mov	r11, r18
 c08:	06 c0       	rjmp	.+12     	; 0xc16 <vfprintf+0x29a>
 c0a:	28 e0       	ldi	r18, 0x08	; 8
 c0c:	30 e0       	ldi	r19, 0x00	; 0
 c0e:	05 c0       	rjmp	.+10     	; 0xc1a <vfprintf+0x29e>
 c10:	20 e1       	ldi	r18, 0x10	; 16
 c12:	30 e0       	ldi	r19, 0x00	; 0
 c14:	02 c0       	rjmp	.+4      	; 0xc1a <vfprintf+0x29e>
 c16:	20 e1       	ldi	r18, 0x10	; 16
 c18:	32 e0       	ldi	r19, 0x02	; 2
 c1a:	f8 01       	movw	r30, r16
 c1c:	b7 fe       	sbrs	r11, 7
 c1e:	07 c0       	rjmp	.+14     	; 0xc2e <vfprintf+0x2b2>
 c20:	60 81       	ld	r22, Z
 c22:	71 81       	ldd	r23, Z+1	; 0x01
 c24:	82 81       	ldd	r24, Z+2	; 0x02
 c26:	93 81       	ldd	r25, Z+3	; 0x03
 c28:	0c 5f       	subi	r16, 0xFC	; 252
 c2a:	1f 4f       	sbci	r17, 0xFF	; 255
 c2c:	06 c0       	rjmp	.+12     	; 0xc3a <vfprintf+0x2be>
 c2e:	60 81       	ld	r22, Z
 c30:	71 81       	ldd	r23, Z+1	; 0x01
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	0e 5f       	subi	r16, 0xFE	; 254
 c38:	1f 4f       	sbci	r17, 0xFF	; 255
 c3a:	a3 01       	movw	r20, r6
 c3c:	0e 94 14 07 	call	0xe28	; 0xe28 <__ultoa_invert>
 c40:	88 2e       	mov	r8, r24
 c42:	86 18       	sub	r8, r6
 c44:	fb 2d       	mov	r31, r11
 c46:	ff 77       	andi	r31, 0x7F	; 127
 c48:	3f 2e       	mov	r3, r31
 c4a:	36 fe       	sbrs	r3, 6
 c4c:	0d c0       	rjmp	.+26     	; 0xc68 <vfprintf+0x2ec>
 c4e:	23 2d       	mov	r18, r3
 c50:	2e 7f       	andi	r18, 0xFE	; 254
 c52:	a2 2e       	mov	r10, r18
 c54:	89 14       	cp	r8, r9
 c56:	58 f4       	brcc	.+22     	; 0xc6e <vfprintf+0x2f2>
 c58:	34 fe       	sbrs	r3, 4
 c5a:	0b c0       	rjmp	.+22     	; 0xc72 <vfprintf+0x2f6>
 c5c:	32 fc       	sbrc	r3, 2
 c5e:	09 c0       	rjmp	.+18     	; 0xc72 <vfprintf+0x2f6>
 c60:	83 2d       	mov	r24, r3
 c62:	8e 7e       	andi	r24, 0xEE	; 238
 c64:	a8 2e       	mov	r10, r24
 c66:	05 c0       	rjmp	.+10     	; 0xc72 <vfprintf+0x2f6>
 c68:	b8 2c       	mov	r11, r8
 c6a:	a3 2c       	mov	r10, r3
 c6c:	03 c0       	rjmp	.+6      	; 0xc74 <vfprintf+0x2f8>
 c6e:	b8 2c       	mov	r11, r8
 c70:	01 c0       	rjmp	.+2      	; 0xc74 <vfprintf+0x2f8>
 c72:	b9 2c       	mov	r11, r9
 c74:	a4 fe       	sbrs	r10, 4
 c76:	0f c0       	rjmp	.+30     	; 0xc96 <vfprintf+0x31a>
 c78:	fe 01       	movw	r30, r28
 c7a:	e8 0d       	add	r30, r8
 c7c:	f1 1d       	adc	r31, r1
 c7e:	80 81       	ld	r24, Z
 c80:	80 33       	cpi	r24, 0x30	; 48
 c82:	21 f4       	brne	.+8      	; 0xc8c <vfprintf+0x310>
 c84:	9a 2d       	mov	r25, r10
 c86:	99 7e       	andi	r25, 0xE9	; 233
 c88:	a9 2e       	mov	r10, r25
 c8a:	09 c0       	rjmp	.+18     	; 0xc9e <vfprintf+0x322>
 c8c:	a2 fe       	sbrs	r10, 2
 c8e:	06 c0       	rjmp	.+12     	; 0xc9c <vfprintf+0x320>
 c90:	b3 94       	inc	r11
 c92:	b3 94       	inc	r11
 c94:	04 c0       	rjmp	.+8      	; 0xc9e <vfprintf+0x322>
 c96:	8a 2d       	mov	r24, r10
 c98:	86 78       	andi	r24, 0x86	; 134
 c9a:	09 f0       	breq	.+2      	; 0xc9e <vfprintf+0x322>
 c9c:	b3 94       	inc	r11
 c9e:	a3 fc       	sbrc	r10, 3
 ca0:	11 c0       	rjmp	.+34     	; 0xcc4 <vfprintf+0x348>
 ca2:	a0 fe       	sbrs	r10, 0
 ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x336>
 ca6:	b2 14       	cp	r11, r2
 ca8:	88 f4       	brcc	.+34     	; 0xccc <vfprintf+0x350>
 caa:	28 0c       	add	r2, r8
 cac:	92 2c       	mov	r9, r2
 cae:	9b 18       	sub	r9, r11
 cb0:	0e c0       	rjmp	.+28     	; 0xcce <vfprintf+0x352>
 cb2:	b2 14       	cp	r11, r2
 cb4:	60 f4       	brcc	.+24     	; 0xcce <vfprintf+0x352>
 cb6:	b6 01       	movw	r22, r12
 cb8:	80 e2       	ldi	r24, 0x20	; 32
 cba:	90 e0       	ldi	r25, 0x00	; 0
 cbc:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 cc0:	b3 94       	inc	r11
 cc2:	f7 cf       	rjmp	.-18     	; 0xcb2 <vfprintf+0x336>
 cc4:	b2 14       	cp	r11, r2
 cc6:	18 f4       	brcc	.+6      	; 0xcce <vfprintf+0x352>
 cc8:	2b 18       	sub	r2, r11
 cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x354>
 ccc:	98 2c       	mov	r9, r8
 cce:	21 2c       	mov	r2, r1
 cd0:	a4 fe       	sbrs	r10, 4
 cd2:	10 c0       	rjmp	.+32     	; 0xcf4 <vfprintf+0x378>
 cd4:	b6 01       	movw	r22, r12
 cd6:	80 e3       	ldi	r24, 0x30	; 48
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 cde:	a2 fe       	sbrs	r10, 2
 ce0:	17 c0       	rjmp	.+46     	; 0xd10 <vfprintf+0x394>
 ce2:	a1 fc       	sbrc	r10, 1
 ce4:	03 c0       	rjmp	.+6      	; 0xcec <vfprintf+0x370>
 ce6:	88 e7       	ldi	r24, 0x78	; 120
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	02 c0       	rjmp	.+4      	; 0xcf0 <vfprintf+0x374>
 cec:	88 e5       	ldi	r24, 0x58	; 88
 cee:	90 e0       	ldi	r25, 0x00	; 0
 cf0:	b6 01       	movw	r22, r12
 cf2:	0c c0       	rjmp	.+24     	; 0xd0c <vfprintf+0x390>
 cf4:	8a 2d       	mov	r24, r10
 cf6:	86 78       	andi	r24, 0x86	; 134
 cf8:	59 f0       	breq	.+22     	; 0xd10 <vfprintf+0x394>
 cfa:	a1 fe       	sbrs	r10, 1
 cfc:	02 c0       	rjmp	.+4      	; 0xd02 <vfprintf+0x386>
 cfe:	8b e2       	ldi	r24, 0x2B	; 43
 d00:	01 c0       	rjmp	.+2      	; 0xd04 <vfprintf+0x388>
 d02:	80 e2       	ldi	r24, 0x20	; 32
 d04:	a7 fc       	sbrc	r10, 7
 d06:	8d e2       	ldi	r24, 0x2D	; 45
 d08:	b6 01       	movw	r22, r12
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 d10:	89 14       	cp	r8, r9
 d12:	38 f4       	brcc	.+14     	; 0xd22 <vfprintf+0x3a6>
 d14:	b6 01       	movw	r22, r12
 d16:	80 e3       	ldi	r24, 0x30	; 48
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 d1e:	9a 94       	dec	r9
 d20:	f7 cf       	rjmp	.-18     	; 0xd10 <vfprintf+0x394>
 d22:	8a 94       	dec	r8
 d24:	f3 01       	movw	r30, r6
 d26:	e8 0d       	add	r30, r8
 d28:	f1 1d       	adc	r31, r1
 d2a:	80 81       	ld	r24, Z
 d2c:	b6 01       	movw	r22, r12
 d2e:	90 e0       	ldi	r25, 0x00	; 0
 d30:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 d34:	81 10       	cpse	r8, r1
 d36:	f5 cf       	rjmp	.-22     	; 0xd22 <vfprintf+0x3a6>
 d38:	22 20       	and	r2, r2
 d3a:	09 f4       	brne	.+2      	; 0xd3e <vfprintf+0x3c2>
 d3c:	42 ce       	rjmp	.-892    	; 0x9c2 <vfprintf+0x46>
 d3e:	b6 01       	movw	r22, r12
 d40:	80 e2       	ldi	r24, 0x20	; 32
 d42:	90 e0       	ldi	r25, 0x00	; 0
 d44:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <fputc>
 d48:	2a 94       	dec	r2
 d4a:	f6 cf       	rjmp	.-20     	; 0xd38 <vfprintf+0x3bc>
 d4c:	f6 01       	movw	r30, r12
 d4e:	86 81       	ldd	r24, Z+6	; 0x06
 d50:	97 81       	ldd	r25, Z+7	; 0x07
 d52:	02 c0       	rjmp	.+4      	; 0xd58 <vfprintf+0x3dc>
 d54:	8f ef       	ldi	r24, 0xFF	; 255
 d56:	9f ef       	ldi	r25, 0xFF	; 255
 d58:	2b 96       	adiw	r28, 0x0b	; 11
 d5a:	cd bf       	out	0x3d, r28	; 61
 d5c:	de bf       	out	0x3e, r29	; 62
 d5e:	df 91       	pop	r29
 d60:	cf 91       	pop	r28
 d62:	1f 91       	pop	r17
 d64:	0f 91       	pop	r16
 d66:	ff 90       	pop	r15
 d68:	ef 90       	pop	r14
 d6a:	df 90       	pop	r13
 d6c:	cf 90       	pop	r12
 d6e:	bf 90       	pop	r11
 d70:	af 90       	pop	r10
 d72:	9f 90       	pop	r9
 d74:	8f 90       	pop	r8
 d76:	7f 90       	pop	r7
 d78:	6f 90       	pop	r6
 d7a:	5f 90       	pop	r5
 d7c:	4f 90       	pop	r4
 d7e:	3f 90       	pop	r3
 d80:	2f 90       	pop	r2
 d82:	08 95       	ret

00000d84 <strnlen_P>:
 d84:	fc 01       	movw	r30, r24
 d86:	05 90       	lpm	r0, Z+
 d88:	61 50       	subi	r22, 0x01	; 1
 d8a:	70 40       	sbci	r23, 0x00	; 0
 d8c:	01 10       	cpse	r0, r1
 d8e:	d8 f7       	brcc	.-10     	; 0xd86 <strnlen_P+0x2>
 d90:	80 95       	com	r24
 d92:	90 95       	com	r25
 d94:	8e 0f       	add	r24, r30
 d96:	9f 1f       	adc	r25, r31
 d98:	08 95       	ret

00000d9a <strnlen>:
 d9a:	fc 01       	movw	r30, r24
 d9c:	61 50       	subi	r22, 0x01	; 1
 d9e:	70 40       	sbci	r23, 0x00	; 0
 da0:	01 90       	ld	r0, Z+
 da2:	01 10       	cpse	r0, r1
 da4:	d8 f7       	brcc	.-10     	; 0xd9c <strnlen+0x2>
 da6:	80 95       	com	r24
 da8:	90 95       	com	r25
 daa:	8e 0f       	add	r24, r30
 dac:	9f 1f       	adc	r25, r31
 dae:	08 95       	ret

00000db0 <fputc>:
 db0:	0f 93       	push	r16
 db2:	1f 93       	push	r17
 db4:	cf 93       	push	r28
 db6:	df 93       	push	r29
 db8:	fb 01       	movw	r30, r22
 dba:	23 81       	ldd	r18, Z+3	; 0x03
 dbc:	21 fd       	sbrc	r18, 1
 dbe:	03 c0       	rjmp	.+6      	; 0xdc6 <fputc+0x16>
 dc0:	8f ef       	ldi	r24, 0xFF	; 255
 dc2:	9f ef       	ldi	r25, 0xFF	; 255
 dc4:	2c c0       	rjmp	.+88     	; 0xe1e <fputc+0x6e>
 dc6:	22 ff       	sbrs	r18, 2
 dc8:	16 c0       	rjmp	.+44     	; 0xdf6 <fputc+0x46>
 dca:	46 81       	ldd	r20, Z+6	; 0x06
 dcc:	57 81       	ldd	r21, Z+7	; 0x07
 dce:	24 81       	ldd	r18, Z+4	; 0x04
 dd0:	35 81       	ldd	r19, Z+5	; 0x05
 dd2:	42 17       	cp	r20, r18
 dd4:	53 07       	cpc	r21, r19
 dd6:	44 f4       	brge	.+16     	; 0xde8 <fputc+0x38>
 dd8:	a0 81       	ld	r26, Z
 dda:	b1 81       	ldd	r27, Z+1	; 0x01
 ddc:	9d 01       	movw	r18, r26
 dde:	2f 5f       	subi	r18, 0xFF	; 255
 de0:	3f 4f       	sbci	r19, 0xFF	; 255
 de2:	20 83       	st	Z, r18
 de4:	31 83       	std	Z+1, r19	; 0x01
 de6:	8c 93       	st	X, r24
 de8:	26 81       	ldd	r18, Z+6	; 0x06
 dea:	37 81       	ldd	r19, Z+7	; 0x07
 dec:	2f 5f       	subi	r18, 0xFF	; 255
 dee:	3f 4f       	sbci	r19, 0xFF	; 255
 df0:	26 83       	std	Z+6, r18	; 0x06
 df2:	37 83       	std	Z+7, r19	; 0x07
 df4:	14 c0       	rjmp	.+40     	; 0xe1e <fputc+0x6e>
 df6:	8b 01       	movw	r16, r22
 df8:	ec 01       	movw	r28, r24
 dfa:	fb 01       	movw	r30, r22
 dfc:	00 84       	ldd	r0, Z+8	; 0x08
 dfe:	f1 85       	ldd	r31, Z+9	; 0x09
 e00:	e0 2d       	mov	r30, r0
 e02:	09 95       	icall
 e04:	89 2b       	or	r24, r25
 e06:	e1 f6       	brne	.-72     	; 0xdc0 <fputc+0x10>
 e08:	d8 01       	movw	r26, r16
 e0a:	16 96       	adiw	r26, 0x06	; 6
 e0c:	8d 91       	ld	r24, X+
 e0e:	9c 91       	ld	r25, X
 e10:	17 97       	sbiw	r26, 0x07	; 7
 e12:	01 96       	adiw	r24, 0x01	; 1
 e14:	16 96       	adiw	r26, 0x06	; 6
 e16:	8d 93       	st	X+, r24
 e18:	9c 93       	st	X, r25
 e1a:	17 97       	sbiw	r26, 0x07	; 7
 e1c:	ce 01       	movw	r24, r28
 e1e:	df 91       	pop	r29
 e20:	cf 91       	pop	r28
 e22:	1f 91       	pop	r17
 e24:	0f 91       	pop	r16
 e26:	08 95       	ret

00000e28 <__ultoa_invert>:
 e28:	fa 01       	movw	r30, r20
 e2a:	aa 27       	eor	r26, r26
 e2c:	28 30       	cpi	r18, 0x08	; 8
 e2e:	51 f1       	breq	.+84     	; 0xe84 <__ultoa_invert+0x5c>
 e30:	20 31       	cpi	r18, 0x10	; 16
 e32:	81 f1       	breq	.+96     	; 0xe94 <__ultoa_invert+0x6c>
 e34:	e8 94       	clt
 e36:	6f 93       	push	r22
 e38:	6e 7f       	andi	r22, 0xFE	; 254
 e3a:	6e 5f       	subi	r22, 0xFE	; 254
 e3c:	7f 4f       	sbci	r23, 0xFF	; 255
 e3e:	8f 4f       	sbci	r24, 0xFF	; 255
 e40:	9f 4f       	sbci	r25, 0xFF	; 255
 e42:	af 4f       	sbci	r26, 0xFF	; 255
 e44:	b1 e0       	ldi	r27, 0x01	; 1
 e46:	3e d0       	rcall	.+124    	; 0xec4 <__ultoa_invert+0x9c>
 e48:	b4 e0       	ldi	r27, 0x04	; 4
 e4a:	3c d0       	rcall	.+120    	; 0xec4 <__ultoa_invert+0x9c>
 e4c:	67 0f       	add	r22, r23
 e4e:	78 1f       	adc	r23, r24
 e50:	89 1f       	adc	r24, r25
 e52:	9a 1f       	adc	r25, r26
 e54:	a1 1d       	adc	r26, r1
 e56:	68 0f       	add	r22, r24
 e58:	79 1f       	adc	r23, r25
 e5a:	8a 1f       	adc	r24, r26
 e5c:	91 1d       	adc	r25, r1
 e5e:	a1 1d       	adc	r26, r1
 e60:	6a 0f       	add	r22, r26
 e62:	71 1d       	adc	r23, r1
 e64:	81 1d       	adc	r24, r1
 e66:	91 1d       	adc	r25, r1
 e68:	a1 1d       	adc	r26, r1
 e6a:	20 d0       	rcall	.+64     	; 0xeac <__ultoa_invert+0x84>
 e6c:	09 f4       	brne	.+2      	; 0xe70 <__ultoa_invert+0x48>
 e6e:	68 94       	set
 e70:	3f 91       	pop	r19
 e72:	2a e0       	ldi	r18, 0x0A	; 10
 e74:	26 9f       	mul	r18, r22
 e76:	11 24       	eor	r1, r1
 e78:	30 19       	sub	r19, r0
 e7a:	30 5d       	subi	r19, 0xD0	; 208
 e7c:	31 93       	st	Z+, r19
 e7e:	de f6       	brtc	.-74     	; 0xe36 <__ultoa_invert+0xe>
 e80:	cf 01       	movw	r24, r30
 e82:	08 95       	ret
 e84:	46 2f       	mov	r20, r22
 e86:	47 70       	andi	r20, 0x07	; 7
 e88:	40 5d       	subi	r20, 0xD0	; 208
 e8a:	41 93       	st	Z+, r20
 e8c:	b3 e0       	ldi	r27, 0x03	; 3
 e8e:	0f d0       	rcall	.+30     	; 0xeae <__ultoa_invert+0x86>
 e90:	c9 f7       	brne	.-14     	; 0xe84 <__ultoa_invert+0x5c>
 e92:	f6 cf       	rjmp	.-20     	; 0xe80 <__ultoa_invert+0x58>
 e94:	46 2f       	mov	r20, r22
 e96:	4f 70       	andi	r20, 0x0F	; 15
 e98:	40 5d       	subi	r20, 0xD0	; 208
 e9a:	4a 33       	cpi	r20, 0x3A	; 58
 e9c:	18 f0       	brcs	.+6      	; 0xea4 <__ultoa_invert+0x7c>
 e9e:	49 5d       	subi	r20, 0xD9	; 217
 ea0:	31 fd       	sbrc	r19, 1
 ea2:	40 52       	subi	r20, 0x20	; 32
 ea4:	41 93       	st	Z+, r20
 ea6:	02 d0       	rcall	.+4      	; 0xeac <__ultoa_invert+0x84>
 ea8:	a9 f7       	brne	.-22     	; 0xe94 <__ultoa_invert+0x6c>
 eaa:	ea cf       	rjmp	.-44     	; 0xe80 <__ultoa_invert+0x58>
 eac:	b4 e0       	ldi	r27, 0x04	; 4
 eae:	a6 95       	lsr	r26
 eb0:	97 95       	ror	r25
 eb2:	87 95       	ror	r24
 eb4:	77 95       	ror	r23
 eb6:	67 95       	ror	r22
 eb8:	ba 95       	dec	r27
 eba:	c9 f7       	brne	.-14     	; 0xeae <__ultoa_invert+0x86>
 ebc:	00 97       	sbiw	r24, 0x00	; 0
 ebe:	61 05       	cpc	r22, r1
 ec0:	71 05       	cpc	r23, r1
 ec2:	08 95       	ret
 ec4:	9b 01       	movw	r18, r22
 ec6:	ac 01       	movw	r20, r24
 ec8:	0a 2e       	mov	r0, r26
 eca:	06 94       	lsr	r0
 ecc:	57 95       	ror	r21
 ece:	47 95       	ror	r20
 ed0:	37 95       	ror	r19
 ed2:	27 95       	ror	r18
 ed4:	ba 95       	dec	r27
 ed6:	c9 f7       	brne	.-14     	; 0xeca <__ultoa_invert+0xa2>
 ed8:	62 0f       	add	r22, r18
 eda:	73 1f       	adc	r23, r19
 edc:	84 1f       	adc	r24, r20
 ede:	95 1f       	adc	r25, r21
 ee0:	a0 1d       	adc	r26, r0
 ee2:	08 95       	ret

00000ee4 <_exit>:
 ee4:	f8 94       	cli

00000ee6 <__stop_program>:
 ee6:	ff cf       	rjmp	.-2      	; 0xee6 <__stop_program>
