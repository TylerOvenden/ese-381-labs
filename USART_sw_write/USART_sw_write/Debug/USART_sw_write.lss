
USART_sw_write.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00804000  000001ce  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031e8  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e3c  00000000  00000000  000034c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d2  00000000  00000000  00006300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000066d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016b1  00000000  00000000  00006718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001c9  00000000  00000000  00007dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00007f92  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ec:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  f0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ee ec       	ldi	r30, 0xCE	; 206
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a2 30       	cpi	r26, 0x02	; 2
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
 11a:	0e 94 c6 00 	call	0x18c	; 0x18c <main>
 11e:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <USART_sw_write>:

    }
	return 0;
}
 void USART_sw_write(char c) {
	 PORTB_OUT = 0x00; //start bit
 126:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	e0 ed       	ldi	r30, 0xD0	; 208
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	31 97       	sbiw	r30, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <USART_sw_write+0x8>
 132:	00 00       	nop
	 _delay_us(DELAY);
	for(int i = 0; i<8; i++){
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	1d c0       	rjmp	.+58     	; 0x174 <USART_sw_write+0x4e>
	 temp = (uint8_t) c;	//convert ascii to uint8_t
 13a:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
	 temp = temp >> i;   //move desired bit to front
 13e:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	04 2e       	mov	r0, r20
 146:	02 c0       	rjmp	.+4      	; 0x14c <USART_sw_write+0x26>
 148:	35 95       	asr	r19
 14a:	27 95       	ror	r18
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <USART_sw_write+0x22>
 150:	20 93 00 40 	sts	0x4000, r18	; 0x804000 <__DATA_REGION_ORIGIN__>
	 temp &= 0x01;  //isolate first bit
 154:	90 91 00 40 	lds	r25, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 158:	91 70       	andi	r25, 0x01	; 1
 15a:	90 93 00 40 	sts	0x4000, r25	; 0x804000 <__DATA_REGION_ORIGIN__>
	 PORTB_OUT = temp;
 15e:	90 91 00 40 	lds	r25, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 162:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 166:	e0 ed       	ldi	r30, 0xD0	; 208
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <USART_sw_write+0x44>
 16e:	00 00       	nop
	return 0;
}
 void USART_sw_write(char c) {
	 PORTB_OUT = 0x00; //start bit
	 _delay_us(DELAY);
	for(int i = 0; i<8; i++){
 170:	4f 5f       	subi	r20, 0xFF	; 255
 172:	5f 4f       	sbci	r21, 0xFF	; 255
 174:	48 30       	cpi	r20, 0x08	; 8
 176:	51 05       	cpc	r21, r1
 178:	04 f3       	brlt	.-64     	; 0x13a <USART_sw_write+0x14>
	 temp &= 0x01;  //isolate first bit
	 PORTB_OUT = temp;
	 _delay_us(DELAY);
	}
	
	PORTB_OUT = 0x01; //write end bit
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 180:	80 ed       	ldi	r24, 0xD0	; 208
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <USART_sw_write+0x5e>
 188:	00 00       	nop
 18a:	08 95       	ret

0000018c <main>:


volatile uint8_t temp = 0x02; 
	
int main(void)
{
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	1f 92       	push	r1
 192:	cd b7       	in	r28, 0x3d	; 61
 194:	de b7       	in	r29, 0x3e	; 62
	PORTB_DIR = 0x01; //set portb0 as output
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	PORTB_OUT = 0x01;	
 19c:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
	volatile char c;  
	c = 'd';
 1a0:	84 e6       	ldi	r24, 0x64	; 100
 1a2:	89 83       	std	Y+1, r24	; 0x01

for(int i = 0; i<20; i++){
 1a4:	00 e0       	ldi	r16, 0x00	; 0
 1a6:	10 e0       	ldi	r17, 0x00	; 0
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <main+0x36>

	USART_sw_write(c);
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	0e 94 93 00 	call	0x126	; 0x126 <USART_sw_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	87 ee       	ldi	r24, 0xE7	; 231
 1b4:	93 e0       	ldi	r25, 0x03	; 3
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <main+0x2a>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <main+0x30>
 1bc:	00 00       	nop
	PORTB_DIR = 0x01; //set portb0 as output
	PORTB_OUT = 0x01;	
	volatile char c;  
	c = 'd';

for(int i = 0; i<20; i++){
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
 1c2:	04 31       	cpi	r16, 0x14	; 20
 1c4:	11 05       	cpc	r17, r1
 1c6:	8c f3       	brlt	.-30     	; 0x1aa <main+0x1e>
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <main+0x3c>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
