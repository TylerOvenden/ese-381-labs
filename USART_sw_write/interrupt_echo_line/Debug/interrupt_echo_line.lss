
interrupt_echo_line.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000312  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00804000  00804000  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000331e  00000000  00000000  00000430  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e9f  00000000  00000000  0000374e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d0  00000000  00000000  000065ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00006ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016f3  00000000  00000000  00006b64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002c6  00000000  00000000  00008257  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  0000851d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 00 01 	jmp	0x200	; 0x200 <__vector_45>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a9 35       	cpi	r26, 0x59	; 89
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
 114:	0c 94 87 01 	jmp	0x30e	; 0x30e <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <main>:
volatile char chars[80];
volatile uint8_t temp;
int main(void)
{
	/* Replace with your application code */
	PORTB_DIR = 0xFE;
 11c:	8e ef       	ldi	r24, 0xFE	; 254
 11e:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	PORTB_PIN1CTRL = 0x08 || 0x03;
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	80 93 31 04 	sts	0x0431, r24	; 0x800431 <__TEXT_REGION_LENGTH__+0x7e0431>
	
	
	sei();
 128:	78 94       	sei
	while (1)
	{
		
		asm volatile ("nop");
 12a:	00 00       	nop
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0xe>

0000012e <USART_sw_read>:
	memset(chars, 0, sizeof chars);
	end = 0;
}

char USART_sw_read(){
	use = 0x00;
 12e:	10 92 04 40 	sts	0x4004, r1	; 0x804004 <use>
	//runs 8 times to get entire
	for(int i = 0;i< 8;i++){
 132:	20 e0       	ldi	r18, 0x00	; 0
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	27 c0       	rjmp	.+78     	; 0x186 <USART_sw_read+0x58>
		tempuse = PORTA_IN;
 138:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
 13c:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <tempuse>
		//isolates pin1
		tempuse &= 0x02;
 140:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <tempuse>
 144:	82 70       	andi	r24, 0x02	; 2
 146:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <tempuse>
		//shifts it once to right
		tempuse >>= 1;
 14a:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <tempuse>
 14e:	86 95       	lsr	r24
 150:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <tempuse>
		//move it to the left the neccasry amount of times
		tempuse = tempuse << i;
 154:	80 91 05 40 	lds	r24, 0x4005	; 0x804005 <tempuse>
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 2e       	mov	r0, r18
 15c:	02 c0       	rjmp	.+4      	; 0x162 <USART_sw_read+0x34>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <USART_sw_read+0x30>
 166:	80 93 05 40 	sts	0x4005, r24	; 0x804005 <tempuse>
		
		//sets the 1th bit of the char being formed
		use |= tempuse;
 16a:	90 91 05 40 	lds	r25, 0x4005	; 0x804005 <tempuse>
 16e:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <use>
 172:	89 2b       	or	r24, r25
 174:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <use>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	80 ed       	ldi	r24, 0xD0	; 208
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <USART_sw_read+0x4e>
 180:	00 00       	nop
}

char USART_sw_read(){
	use = 0x00;
	//runs 8 times to get entire
	for(int i = 0;i< 8;i++){
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	28 30       	cpi	r18, 0x08	; 8
 188:	31 05       	cpc	r19, r1
 18a:	b4 f2       	brlt	.-84     	; 0x138 <USART_sw_read+0xa>
		
		
		_delay_us(DELAY);
	}
	//converts the binary representation of the char into char
	cha = (char) use;
 18c:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <use>
 190:	80 93 58 40 	sts	0x4058, r24	; 0x804058 <cha>
	return cha;
 194:	80 91 58 40 	lds	r24, 0x4058	; 0x804058 <cha>
}
 198:	08 95       	ret

0000019a <USART_sw_write>:
 
 
 void USART_sw_write(char c) {
	 PORTB_OUT = 0x00; //start bit
 19a:	10 92 24 04 	sts	0x0424, r1	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 19e:	e0 ed       	ldi	r30, 0xD0	; 208
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <USART_sw_write+0x8>
 1a6:	00 00       	nop
	 _delay_us(DELAY);
	 for(int i = 0; i<8; i++){
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	1d c0       	rjmp	.+58     	; 0x1e8 <USART_sw_write+0x4e>
		 temp = (uint8_t) c;	//convert ascii to uint8_t
 1ae:	80 93 06 40 	sts	0x4006, r24	; 0x804006 <temp>
		 temp = temp >> i;   //move desired bit to front
 1b2:	20 91 06 40 	lds	r18, 0x4006	; 0x804006 <temp>
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	04 2e       	mov	r0, r20
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <USART_sw_write+0x26>
 1bc:	35 95       	asr	r19
 1be:	27 95       	ror	r18
 1c0:	0a 94       	dec	r0
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <USART_sw_write+0x22>
 1c4:	20 93 06 40 	sts	0x4006, r18	; 0x804006 <temp>
		 temp &= 0x01;  //isolate first bit
 1c8:	90 91 06 40 	lds	r25, 0x4006	; 0x804006 <temp>
 1cc:	91 70       	andi	r25, 0x01	; 1
 1ce:	90 93 06 40 	sts	0x4006, r25	; 0x804006 <temp>
		 PORTB_OUT = temp;
 1d2:	90 91 06 40 	lds	r25, 0x4006	; 0x804006 <temp>
 1d6:	90 93 24 04 	sts	0x0424, r25	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 1da:	e0 ed       	ldi	r30, 0xD0	; 208
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <USART_sw_write+0x44>
 1e2:	00 00       	nop
 
 
 void USART_sw_write(char c) {
	 PORTB_OUT = 0x00; //start bit
	 _delay_us(DELAY);
	 for(int i = 0; i<8; i++){
 1e4:	4f 5f       	subi	r20, 0xFF	; 255
 1e6:	5f 4f       	sbci	r21, 0xFF	; 255
 1e8:	48 30       	cpi	r20, 0x08	; 8
 1ea:	51 05       	cpc	r21, r1
 1ec:	04 f3       	brlt	.-64     	; 0x1ae <USART_sw_write+0x14>
		 temp &= 0x01;  //isolate first bit
		 PORTB_OUT = temp;
		 _delay_us(DELAY);
	 }
	 
	 PORTB_OUT = 0x01; //write end bit
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
 1f4:	80 ed       	ldi	r24, 0xD0	; 208
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <USART_sw_write+0x5e>
 1fc:	00 00       	nop
 1fe:	08 95       	ret

00000200 <__vector_45>:
		asm volatile ("nop");
	}
}


ISR (PORTB_PORT_vect) {
 200:	1f 92       	push	r1
 202:	0f 92       	push	r0
 204:	0f b6       	in	r0, 0x3f	; 63
 206:	0f 92       	push	r0
 208:	11 24       	eor	r1, r1
 20a:	0b b6       	in	r0, 0x3b	; 59
 20c:	0f 92       	push	r0
 20e:	2f 93       	push	r18
 210:	3f 93       	push	r19
 212:	4f 93       	push	r20
 214:	5f 93       	push	r21
 216:	6f 93       	push	r22
 218:	7f 93       	push	r23
 21a:	8f 93       	push	r24
 21c:	9f 93       	push	r25
 21e:	af 93       	push	r26
 220:	bf 93       	push	r27
 222:	cf 93       	push	r28
 224:	df 93       	push	r29
 226:	ef 93       	push	r30
 228:	ff 93       	push	r31
		cli();
 22a:	f8 94       	cli
	
	while(end == 0) {
 22c:	20 c0       	rjmp	.+64     	; 0x26e <__vector_45+0x6e>
	res = USART_sw_read();
 22e:	0e 94 97 00 	call	0x12e	; 0x12e <USART_sw_read>
 232:	80 93 57 40 	sts	0x4057, r24	; 0x804057 <res>
	//adds char to line 
	chars[items] = res;
 236:	e0 91 00 40 	lds	r30, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 23a:	f0 91 01 40 	lds	r31, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 23e:	80 91 57 40 	lds	r24, 0x4057	; 0x804057 <res>
 242:	e9 5f       	subi	r30, 0xF9	; 249
 244:	ff 4b       	sbci	r31, 0xBF	; 191
 246:	80 83       	st	Z, r24
	items++;
 248:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 24c:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 250:	01 96       	adiw	r24, 0x01	; 1
 252:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 256:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	//checks if control character entered
	if(res == 0x0D)
 25a:	80 91 57 40 	lds	r24, 0x4057	; 0x804057 <res>
 25e:	8d 30       	cpi	r24, 0x0D	; 13
 260:	31 f4       	brne	.+12     	; 0x26e <__vector_45+0x6e>
		end = 1;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <end>
 26a:	90 93 03 40 	sts	0x4003, r25	; 0x804003 <end+0x1>


ISR (PORTB_PORT_vect) {
		cli();
	
	while(end == 0) {
 26e:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <end>
 272:	90 91 03 40 	lds	r25, 0x4003	; 0x804003 <end+0x1>
 276:	89 2b       	or	r24, r25
 278:	d1 f2       	breq	.-76     	; 0x22e <__vector_45+0x2e>
 27a:	c0 e0       	ldi	r28, 0x00	; 0
 27c:	d0 e0       	ldi	r29, 0x00	; 0
 27e:	13 c0       	rjmp	.+38     	; 0x2a6 <__vector_45+0xa6>
	}
	//send every character 
	for(int i = 0; i<items-1;i++){
	//capitalizes the char
	
	USART_sw_write(toupper(chars[i]));	
 280:	fe 01       	movw	r30, r28
 282:	e9 5f       	subi	r30, 0xF9	; 249
 284:	ff 4b       	sbci	r31, 0xBF	; 191
 286:	80 81       	ld	r24, Z
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 7f 01 	call	0x2fe	; 0x2fe <toupper>
 28e:	0e 94 cd 00 	call	0x19a	; 0x19a <USART_sw_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 292:	2f ef       	ldi	r18, 0xFF	; 255
 294:	89 ef       	ldi	r24, 0xF9	; 249
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <__vector_45+0x98>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <__vector_45+0xa2>
 2a2:	00 00       	nop
	if(res == 0x0D)
		end = 1;
	
	}
	//send every character 
	for(int i = 0; i<items-1;i++){
 2a4:	21 96       	adiw	r28, 0x01	; 1
 2a6:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2aa:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	c8 17       	cp	r28, r24
 2b2:	d9 07       	cpc	r29, r25
 2b4:	2c f3       	brlt	.-54     	; 0x280 <__vector_45+0x80>
	
	USART_sw_write(toupper(chars[i]));	
	_delay_ms(80);
	}
	//clears array of characters
	items = 0;
 2b6:	10 92 00 40 	sts	0x4000, r1	; 0x804000 <__DATA_REGION_ORIGIN__>
 2ba:	10 92 01 40 	sts	0x4001, r1	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
	memset(chars, 0, sizeof chars);
 2be:	80 e5       	ldi	r24, 0x50	; 80
 2c0:	e7 e0       	ldi	r30, 0x07	; 7
 2c2:	f0 e4       	ldi	r31, 0x40	; 64
 2c4:	df 01       	movw	r26, r30
 2c6:	1d 92       	st	X+, r1
 2c8:	8a 95       	dec	r24
 2ca:	e9 f7       	brne	.-6      	; 0x2c6 <__vector_45+0xc6>
	end = 0;
 2cc:	10 92 02 40 	sts	0x4002, r1	; 0x804002 <end>
 2d0:	10 92 03 40 	sts	0x4003, r1	; 0x804003 <end+0x1>
}
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0b be       	out	0x3b, r0	; 59
 2f4:	0f 90       	pop	r0
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	0f 90       	pop	r0
 2fa:	1f 90       	pop	r1
 2fc:	18 95       	reti

000002fe <toupper>:
 2fe:	91 11       	cpse	r25, r1
 300:	08 95       	ret
 302:	81 56       	subi	r24, 0x61	; 97
 304:	8a 51       	subi	r24, 0x1A	; 26
 306:	08 f4       	brcc	.+2      	; 0x30a <toupper+0xc>
 308:	80 52       	subi	r24, 0x20	; 32
 30a:	85 58       	subi	r24, 0x85	; 133
 30c:	08 95       	ret

0000030e <_exit>:
 30e:	f8 94       	cli

00000310 <__stop_program>:
 310:	ff cf       	rjmp	.-2      	; 0x310 <__stop_program>
