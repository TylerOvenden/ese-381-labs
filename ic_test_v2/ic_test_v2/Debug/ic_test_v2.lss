
ic_test_v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00804000  000002b0  00000324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000368  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000325f  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002db5  00000000  00000000  00003627  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000482  00000000  00000000  000063dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00006860  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000174f  00000000  00000000  00006894  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000143  00000000  00000000  00007fe3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00008126  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ec:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  f0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e0 eb       	ldi	r30, 0xB0	; 176
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a4 31       	cpi	r26, 0x14	; 20
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
 11a:	0e 94 93 00 	call	0x126	; 0x126 <main>
 11e:	0c 94 56 01 	jmp	0x2ac	; 0x2ac <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <main>:
#define XORSTATE 3
#define NANDCO 4

//B
int main(void)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	64 97       	sbiw	r28, 0x14	; 20
 130:	cd bf       	out	0x3d, r28	; 61
 132:	de bf       	out	0x3e, r29	; 62
	PORTA_DIR = 0x1F; //setting pins 7-5 to inputs for switch
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	PORTB_DIR = 0xFB;  //setting portb 3 as an input
 13a:	8b ef       	ldi	r24, 0xFB	; 251
 13c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	PORTC_DIR = 0xE7; //setting pins 7-5, 2-0 as inputs
 140:	87 ee       	ldi	r24, 0xE7	; 231
 142:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	PORTD_DIR = 0xFF;  //setting PORTD as outputs, using this for 
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	20 93 60 04 	sts	0x0460, r18	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
	//the inputs in 
	PORTE_DIR = 0x00; //
 14c:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7e0480>
	
	//clear the leds
	PORTC_OUT = 0xFF;
 150:	84 e4       	ldi	r24, 0x44	; 68
 152:	94 e0       	ldi	r25, 0x04	; 4
 154:	fc 01       	movw	r30, r24
 156:	20 83       	st	Z, r18
	PORTD_OUT = 0xFF;	
 158:	e4 e6       	ldi	r30, 0x64	; 100
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	20 83       	st	Z, r18
	PORTC.OUT &= 0x8F;
	PORTC.OUT &= ~temptest;
	 //PORTC.OUT = temptest;
	*/
	
	PORTD_OUT = 0x20;
 15e:	30 e2       	ldi	r19, 0x20	; 32
 160:	30 83       	st	Z, r19
	PORTA_PIN7CTRL = PORT_PULLUPEN_bm;
 162:	38 e0       	ldi	r19, 0x08	; 8
 164:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <__TEXT_REGION_LENGTH__+0x7e0417>
	PORTA_PIN6CTRL = PORT_PULLUPEN_bm;
 168:	30 93 16 04 	sts	0x0416, r19	; 0x800416 <__TEXT_REGION_LENGTH__+0x7e0416>
	PORTA_PIN5CTRL = PORT_PULLUPEN_bm;
 16c:	30 93 15 04 	sts	0x0415, r19	; 0x800415 <__TEXT_REGION_LENGTH__+0x7e0415>
	
	
	PORTB_OUT |= TOGGLEPOWER;
 170:	e4 e2       	ldi	r30, 0x24	; 36
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	40 81       	ld	r20, Z
 176:	40 62       	ori	r20, 0x20	; 32
 178:	40 83       	st	Z, r20
	PORTB_PIN3CTRL = PORT_PULLUPEN_bm;
 17a:	30 93 33 04 	sts	0x0433, r19	; 0x800433 <__TEXT_REGION_LENGTH__+0x7e0433>
	
	
	//array of all the outputs, 
	uint8_t outputs[5][4] = {
 17e:	34 e1       	ldi	r19, 0x14	; 20
 180:	e0 e0       	ldi	r30, 0x00	; 0
 182:	f0 e4       	ldi	r31, 0x40	; 64
 184:	de 01       	movw	r26, r28
 186:	11 96       	adiw	r26, 0x01	; 1
 188:	01 90       	ld	r0, Z+
 18a:	0d 92       	st	X+, r0
 18c:	3a 95       	dec	r19
 18e:	e1 f7       	brne	.-8      	; 0x188 <main+0x62>
		{0x0F, 0x0F, 0x0F, 0x00}
	};
	
     int ic = -1;
	//turn on leds for POS
		PORTC_OUT = POST;
 190:	38 e1       	ldi	r19, 0x18	; 24
 192:	fc 01       	movw	r30, r24
 194:	30 83       	st	Z, r19
		//_delay_ms(1000);

	
		PORTC_OUT |= 0xFF;
 196:	30 81       	ld	r19, Z
 198:	20 83       	st	Z, r18
		{0x00, 0x0F, 0x0F, 0x0F},
		{0x00, 0x0F, 0x0F, 0x00},
		{0x0F, 0x0F, 0x0F, 0x00}
	};
	
     int ic = -1;
 19a:	4f ef       	ldi	r20, 0xFF	; 255
 19c:	5f ef       	ldi	r21, 0xFF	; 255
		bool success = true;
   
   
    while (1) 
    {
		PORTD_OUT = 0x00;
 19e:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
		PORTB_OUT &= ~TOGGLEPOWER;
 1a2:	e4 e2       	ldi	r30, 0x24	; 36
 1a4:	f4 e0       	ldi	r31, 0x04	; 4
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	80 83       	st	Z, r24
		uint8_t push = PORTB_IN;
 1ac:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
		push &= 0x04; //isolate PB2 for push button
		//checks if push button is pushed
		if(push == 0x00){
 1b0:	82 fd       	sbrc	r24, 2
 1b2:	f5 cf       	rjmp	.-22     	; 0x19e <main+0x78>
		
		PORTC.OUT |= 0xFF;
 1b4:	e0 e4       	ldi	r30, 0x40	; 64
 1b6:	f4 e0       	ldi	r31, 0x04	; 4
 1b8:	84 81       	ldd	r24, Z+4	; 0x04
 1ba:	8f ef       	ldi	r24, 0xFF	; 255
 1bc:	84 83       	std	Z+4, r24	; 0x04
		
		uint8_t test = PORTA_IN;
 1be:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
		test &= ISOSWITCH; //make mask
 1c2:	80 7e       	andi	r24, 0xE0	; 224
		//check which state the dip switch is representing
		if(test == 0x00){
 1c4:	11 f4       	brne	.+4      	; 0x1ca <main+0xa4>
			ic = NANDSTATE;
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
			} 
		if(test == 0x20)
 1ca:	80 32       	cpi	r24, 0x20	; 32
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <main+0xac>
			{
			ic = ANDSTATE;	
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	50 e0       	ldi	r21, 0x00	; 0
		
		}
		if(test == 0x40){
 1d2:	80 34       	cpi	r24, 0x40	; 64
 1d4:	11 f4       	brne	.+4      	; 0x1da <main+0xb4>
			ic = ORSTATE;
 1d6:	42 e0       	ldi	r20, 0x02	; 2
 1d8:	50 e0       	ldi	r21, 0x00	; 0
		}
		if(test == 0x60)
 1da:	80 36       	cpi	r24, 0x60	; 96
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <main+0xbc>
		{
			ic = XORSTATE;
 1de:	43 e0       	ldi	r20, 0x03	; 3
 1e0:	50 e0       	ldi	r21, 0x00	; 0
			
		}
		
		if(test == 0x80){
 1e2:	80 38       	cpi	r24, 0x80	; 128
 1e4:	11 f4       	brne	.+4      	; 0x1ea <main+0xc4>
			ic = NANDCO;
 1e6:	44 e0       	ldi	r20, 0x04	; 4
 1e8:	50 e0       	ldi	r21, 0x00	; 0
		}
		//change this 


		if(ic != -1)
 1ea:	4f 3f       	cpi	r20, 0xFF	; 255
 1ec:	ff ef       	ldi	r31, 0xFF	; 255
 1ee:	5f 07       	cpc	r21, r31
 1f0:	61 f0       	breq	.+24     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
		{
		    uint8_t testShift = test >> 5;
			testShift &= TWOZERO; //isolate bits 3-1			
 1f2:	82 95       	swap	r24
 1f4:	86 95       	lsr	r24
 1f6:	87 70       	andi	r24, 0x07	; 7
			PORTC.OUT |= 0xFF;
 1f8:	e0 e4       	ldi	r30, 0x40	; 64
 1fa:	f4 e0       	ldi	r31, 0x04	; 4
 1fc:	94 81       	ldd	r25, Z+4	; 0x04
 1fe:	9f ef       	ldi	r25, 0xFF	; 255
 200:	94 83       	std	Z+4, r25	; 0x04
			PORTC.OUT &= ~testShift;
 202:	94 81       	ldd	r25, Z+4	; 0x04
 204:	80 95       	com	r24
 206:	89 23       	and	r24, r25
 208:	84 83       	std	Z+4, r24	; 0x04
		success = true;
		//checks gates
			
			
		//turn on power
		PORTB_OUT |= TOGGLEPOWER;
 20a:	e4 e2       	ldi	r30, 0x24	; 36
 20c:	f4 e0       	ldi	r31, 0x04	; 4
 20e:	80 81       	ld	r24, Z
 210:	80 62       	ori	r24, 0x20	; 32
 212:	80 83       	st	Z, r24
		
		
		
		for(int i = 0; i<4;i++){
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	30 c0       	rjmp	.+96     	; 0x27a <__EEPROM_REGION_LENGTH__+0x7a>
			
			//turn on blue led
			PORTC.OUT &= 0x7F;
 21a:	e0 e4       	ldi	r30, 0x40	; 64
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	24 81       	ldd	r18, Z+4	; 0x04
 220:	2f 77       	andi	r18, 0x7F	; 127
 222:	24 83       	std	Z+4, r18	; 0x04
			if(i == 0){
 224:	00 97       	sbiw	r24, 0x00	; 0
 226:	11 f4       	brne	.+4      	; 0x22c <__EEPROM_REGION_LENGTH__+0x2c>
				PORTD_OUT = ZEROZERO;
 228:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			}
			if(i == 1){
 22c:	81 30       	cpi	r24, 0x01	; 1
 22e:	91 05       	cpc	r25, r1
 230:	19 f4       	brne	.+6      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
				PORTD_OUT = ZEROONE;
 232:	25 e5       	ldi	r18, 0x55	; 85
 234:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			}
			if(i == 2){
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	91 05       	cpc	r25, r1
 23c:	19 f4       	brne	.+6      	; 0x244 <__EEPROM_REGION_LENGTH__+0x44>
				PORTD_OUT = ONEZERO;
 23e:	2a ea       	ldi	r18, 0xAA	; 170
 240:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			}
			if(i == 3){
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	91 05       	cpc	r25, r1
 248:	19 f4       	brne	.+6      	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
				PORTD_OUT = ONEONE;
 24a:	2f ef       	ldi	r18, 0xFF	; 255
 24c:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			}
			//propergation delay
			//
			__asm("nop");
 250:	00 00       	nop
			
			//clears bits 7-4 of PORTE, where the IC outputs are stored
			//ends loop if IC output doesn't match the value in the array of results
			uint8_t check = PORTE_IN;
 252:	20 91 88 04 	lds	r18, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7e0488>
			check &= CLEARMOST;
 256:	2f 70       	andi	r18, 0x0F	; 15
			if(check != outputs[ic][i]){
 258:	fa 01       	movw	r30, r20
 25a:	ee 0f       	add	r30, r30
 25c:	ff 1f       	adc	r31, r31
 25e:	ee 0f       	add	r30, r30
 260:	ff 1f       	adc	r31, r31
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	70 e0       	ldi	r23, 0x00	; 0
 266:	6c 0f       	add	r22, r28
 268:	7d 1f       	adc	r23, r29
 26a:	e6 0f       	add	r30, r22
 26c:	f7 1f       	adc	r31, r23
 26e:	e8 0f       	add	r30, r24
 270:	f9 1f       	adc	r31, r25
 272:	30 81       	ld	r19, Z
 274:	23 13       	cpse	r18, r19
 276:	06 c0       	rjmp	.+12     	; 0x284 <__EEPROM_REGION_LENGTH__+0x84>
		//turn on power
		PORTB_OUT |= TOGGLEPOWER;
		
		
		
		for(int i = 0; i<4;i++){
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	84 30       	cpi	r24, 0x04	; 4
 27c:	91 05       	cpc	r25, r1
 27e:	6c f2       	brlt	.-102    	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
			testShift &= TWOZERO; //isolate bits 3-1			
			PORTC.OUT |= 0xFF;
			PORTC.OUT &= ~testShift;
		}
		 
		success = true;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	01 c0       	rjmp	.+2      	; 0x286 <__EEPROM_REGION_LENGTH__+0x86>
			//clears bits 7-4 of PORTE, where the IC outputs are stored
			//ends loop if IC output doesn't match the value in the array of results
			uint8_t check = PORTE_IN;
			check &= CLEARMOST;
			if(check != outputs[ic][i]){
			success = false;
 284:	80 e0       	ldi	r24, 0x00	; 0
			break;
				}
			}
			//turns off blue led
			PORTC.OUT |= 0xFF;
 286:	e0 e4       	ldi	r30, 0x40	; 64
 288:	f4 e0       	ldi	r31, 0x04	; 4
 28a:	94 81       	ldd	r25, Z+4	; 0x04
 28c:	9f ef       	ldi	r25, 0xFF	; 255
 28e:	94 83       	std	Z+4, r25	; 0x04
			//turns on green led
			if(!success){
 290:	81 11       	cpse	r24, r1
 292:	03 c0       	rjmp	.+6      	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
 
			 PORTC.OUT &= 0xDF;
 294:	94 81       	ldd	r25, Z+4	; 0x04
 296:	9f 7d       	andi	r25, 0xDF	; 223
 298:	94 83       	std	Z+4, r25	; 0x04
	
			}
			//turns on red led
			if(success){
 29a:	88 23       	and	r24, r24
 29c:	09 f4       	brne	.+2      	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
 29e:	7f cf       	rjmp	.-258    	; 0x19e <main+0x78>
				PORTC.OUT &= 0xBF;
 2a0:	e0 e4       	ldi	r30, 0x40	; 64
 2a2:	f4 e0       	ldi	r31, 0x04	; 4
 2a4:	84 81       	ldd	r24, Z+4	; 0x04
 2a6:	8f 7b       	andi	r24, 0xBF	; 191
 2a8:	84 83       	std	Z+4, r24	; 0x04
 2aa:	79 cf       	rjmp	.-270    	; 0x19e <main+0x78>

000002ac <_exit>:
 2ac:	f8 94       	cli

000002ae <__stop_program>:
 2ae:	ff cf       	rjmp	.-2      	; 0x2ae <__stop_program>
