
ic_test_unknown.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001a  00804000  00000334  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000334  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000032f9  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002dda  00000000  00000000  0000374d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c6  00000000  00000000  00006527  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000069f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001772  00000000  00000000  00006a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018e  00000000  00000000  00008196  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00008324  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ec:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  f0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e4 e3       	ldi	r30, 0x34	; 52
 108:	f3 e0       	ldi	r31, 0x03	; 3
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	aa 31       	cpi	r26, 0x1A	; 26
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
 11a:	0e 94 93 00 	call	0x126	; 0x126 <main>
 11e:	0c 94 98 01 	jmp	0x330	; 0x330 <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <main>:
#define NANDCO 4
#define MYSTERY 5

//B
int main(void)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	6e 97       	sbiw	r28, 0x1e	; 30
 130:	cd bf       	out	0x3d, r28	; 61
 132:	de bf       	out	0x3e, r29	; 62
	PORTA_DIR = 0x1F; //setting pins 7-5 to inputs for switch
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	PORTB_DIR = 0xFB;  //setting portb 3 as an input
 13a:	8b ef       	ldi	r24, 0xFB	; 251
 13c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	PORTC_DIR = 0xE7; //setting pins 7-5, 2-0 as inputs
 140:	87 ee       	ldi	r24, 0xE7	; 231
 142:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	PORTD_DIR = 0xFF;  //setting PORTD as outputs, using this for 
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	80 93 60 04 	sts	0x0460, r24	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
	//the inputs in 
	PORTE_DIR = 0x00; //
 14c:	10 92 80 04 	sts	0x0480, r1	; 0x800480 <__TEXT_REGION_LENGTH__+0x7e0480>
	
	//clear the leds
	PORTC_OUT = 0xFF;
 150:	24 e4       	ldi	r18, 0x44	; 68
 152:	34 e0       	ldi	r19, 0x04	; 4
 154:	d9 01       	movw	r26, r18
 156:	8c 93       	st	X, r24
	PORTD_OUT = 0xFF;
 158:	e4 e6       	ldi	r30, 0x64	; 100
 15a:	f4 e0       	ldi	r31, 0x04	; 4
 15c:	80 83       	st	Z, r24
	PORTC.OUT &= 0x8F;
	PORTC.OUT &= ~temptest;
	 //PORTC.OUT = temptest;
	*/
	
	PORTD_OUT = 0x20;
 15e:	90 e2       	ldi	r25, 0x20	; 32
 160:	90 83       	st	Z, r25
	PORTA_PIN7CTRL = PORT_PULLUPEN_bm;
 162:	98 e0       	ldi	r25, 0x08	; 8
 164:	90 93 17 04 	sts	0x0417, r25	; 0x800417 <__TEXT_REGION_LENGTH__+0x7e0417>
	PORTA_PIN6CTRL = PORT_PULLUPEN_bm;
 168:	90 93 16 04 	sts	0x0416, r25	; 0x800416 <__TEXT_REGION_LENGTH__+0x7e0416>
	PORTA_PIN5CTRL = PORT_PULLUPEN_bm;
 16c:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <__TEXT_REGION_LENGTH__+0x7e0415>
	
	
	
	PORTB_PIN3CTRL = PORT_PULLUPEN_bm;
 170:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <__TEXT_REGION_LENGTH__+0x7e0433>
	
	
	//array of all the outputs, 
	uint8_t outputs[5][4] = {
 174:	94 e1       	ldi	r25, 0x14	; 20
 176:	e0 e0       	ldi	r30, 0x00	; 0
 178:	f0 e4       	ldi	r31, 0x40	; 64
 17a:	de 01       	movw	r26, r28
 17c:	11 96       	adiw	r26, 0x01	; 1
 17e:	01 90       	ld	r0, Z+
 180:	0d 92       	st	X+, r0
 182:	9a 95       	dec	r25
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x58>
		{0x00, 0x0F, 0x0F, 0x00},
		{0x0F, 0x0F, 0x0F, 0x00}
	};
	
	//array of all states to test
	uint8_t states[4] = {ZEROONE, ZEROONE, ONEZERO, ONEONE};
 186:	95 e5       	ldi	r25, 0x55	; 85
 188:	9d 8b       	std	Y+21, r25	; 0x15
 18a:	9e 8b       	std	Y+22, r25	; 0x16
 18c:	9a ea       	ldi	r25, 0xAA	; 170
 18e:	9f 8b       	std	Y+23, r25	; 0x17
 190:	88 8f       	std	Y+24, r24	; 0x18
		
//array of what to display for each gate		
	uint8_t gates[6] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x07};
 192:	96 e0       	ldi	r25, 0x06	; 6
 194:	e4 e1       	ldi	r30, 0x14	; 20
 196:	f0 e4       	ldi	r31, 0x40	; 64
 198:	de 01       	movw	r26, r28
 19a:	59 96       	adiw	r26, 0x19	; 25
 19c:	01 90       	ld	r0, Z+
 19e:	0d 92       	st	X+, r0
 1a0:	9a 95       	dec	r25
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0x76>
	 int found = -1;
	 
//int representing the gates	 
     int ic = -1;
	//turn on leds for POS
		PORTC_OUT = POST;
 1a4:	98 e1       	ldi	r25, 0x18	; 24
 1a6:	f9 01       	movw	r30, r18
 1a8:	90 83       	st	Z, r25
		//_delay_ms(1000);
	
		int testthihng;	
	
		PORTC_OUT |= 0xFF;
 1aa:	90 81       	ld	r25, Z
 1ac:	80 83       	st	Z, r24
//array of what to display for each gate		
	uint8_t gates[6] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x07};
	 int found = -1;
	 
//int representing the gates	 
     int ic = -1;
 1ae:	2f ef       	ldi	r18, 0xFF	; 255
 1b0:	3f ef       	ldi	r19, 0xFF	; 255
		bool success = true;
    /* R_eplace with your application code */
    while (1) 
    {
		//floats IC inputs & turns off power
		PORTD_OUT = 0x00;
 1b2:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
		PORTB_OUT &= ~TOGGLEPOWER;
 1b6:	e4 e2       	ldi	r30, 0x24	; 36
 1b8:	f4 e0       	ldi	r31, 0x04	; 4
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 7d       	andi	r24, 0xDF	; 223
 1be:	80 83       	st	Z, r24
		uint8_t push = PORTB_IN;
 1c0:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
		push &= 0x04; //isolate PB2 for push button
		//checks if push button is pushed
		if(push == 0x00){
 1c4:	82 fd       	sbrc	r24, 2
 1c6:	f5 cf       	rjmp	.-22     	; 0x1b2 <main+0x8c>
		
		//turns power for IC on
		PORTB_OUT |= TOGGLEPOWER;
 1c8:	80 81       	ld	r24, Z
 1ca:	80 62       	ori	r24, 0x20	; 32
 1cc:	80 83       	st	Z, r24
		PORTC.OUT |= 0xFF;
 1ce:	e0 e4       	ldi	r30, 0x40	; 64
 1d0:	f4 e0       	ldi	r31, 0x04	; 4
 1d2:	84 81       	ldd	r24, Z+4	; 0x04
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	84 83       	std	Z+4, r24	; 0x04
		
		uint8_t test = PORTA_IN;
 1d8:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
		test &= ISOSWITCH; //make mask
 1dc:	80 7e       	andi	r24, 0xE0	; 224
		//check which state the dip switch is representing
		if(test == 0x00){
 1de:	11 f4       	brne	.+4      	; 0x1e4 <main+0xbe>
			ic = NANDSTATE;
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
			} 
		if(test == 0x20)
 1e4:	80 32       	cpi	r24, 0x20	; 32
 1e6:	11 f4       	brne	.+4      	; 0x1ec <main+0xc6>
			{
			ic = ANDSTATE;	
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
		
		}
		if(test == 0x40){
 1ec:	80 34       	cpi	r24, 0x40	; 64
 1ee:	11 f4       	brne	.+4      	; 0x1f4 <main+0xce>
			ic = ORSTATE;
 1f0:	22 e0       	ldi	r18, 0x02	; 2
 1f2:	30 e0       	ldi	r19, 0x00	; 0
		}
		if(test == 0x60)
 1f4:	80 36       	cpi	r24, 0x60	; 96
 1f6:	11 f4       	brne	.+4      	; 0x1fc <main+0xd6>
		{
			ic = XORSTATE;
 1f8:	23 e0       	ldi	r18, 0x03	; 3
 1fa:	30 e0       	ldi	r19, 0x00	; 0
			
		}
		
		if(test == 0x80){
 1fc:	80 38       	cpi	r24, 0x80	; 128
 1fe:	11 f4       	brne	.+4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
			ic = NANDCO;
 200:	24 e0       	ldi	r18, 0x04	; 4
 202:	30 e0       	ldi	r19, 0x00	; 0
			ic = MYSTERY;
		}
		//change this 


		if(ic > -1 & ic < MYSTERY)
 204:	25 30       	cpi	r18, 0x05	; 5
 206:	31 05       	cpc	r19, r1
 208:	60 f4       	brcc	.+24     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
		{
		    uint8_t testShift = test >> 5;
			testShift &= TWOZERO; //isolate bits 3-1			
 20a:	82 95       	swap	r24
 20c:	86 95       	lsr	r24
 20e:	87 70       	andi	r24, 0x07	; 7
			PORTC.OUT |= 0xFF;
 210:	e0 e4       	ldi	r30, 0x40	; 64
 212:	f4 e0       	ldi	r31, 0x04	; 4
 214:	94 81       	ldd	r25, Z+4	; 0x04
 216:	9f ef       	ldi	r25, 0xFF	; 255
 218:	94 83       	std	Z+4, r25	; 0x04
			PORTC.OUT &= ~testShift;
 21a:	94 81       	ldd	r25, Z+4	; 0x04
 21c:	80 95       	com	r24
 21e:	89 23       	and	r24, r25
 220:	84 83       	std	Z+4, r24	; 0x04
		}
		 

		if(ic != MYSTERY ){
 222:	25 30       	cpi	r18, 0x05	; 5
 224:	31 05       	cpc	r19, r1
 226:	29 f5       	brne	.+74     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
 228:	3d c0       	rjmp	.+122    	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
		//checks gates

		for(int i = 0; i<4;i++){

			//turn on blue led
			PORTC.OUT &= 0x7F;
 22a:	e0 e4       	ldi	r30, 0x40	; 64
 22c:	f4 e0       	ldi	r31, 0x04	; 4
 22e:	44 81       	ldd	r20, Z+4	; 0x04
 230:	4f 77       	andi	r20, 0x7F	; 127
 232:	44 83       	std	Z+4, r20	; 0x04
			PORTD_OUT = states[i];
 234:	e5 e1       	ldi	r30, 0x15	; 21
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	ec 0f       	add	r30, r28
 23a:	fd 1f       	adc	r31, r29
 23c:	e8 0f       	add	r30, r24
 23e:	f9 1f       	adc	r31, r25
 240:	40 81       	ld	r20, Z
 242:	40 93 64 04 	sts	0x0464, r20	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			if(i == 3){
				PORTD_OUT = ONEONE;
			}*/
			//propergation delay
			//
			__asm("nop");
 246:	00 00       	nop
			
			//clears bits 7-4 of PORTE, where the IC outputs are stored
			//ends loop if IC output doesn't match the value in the array of results
			uint8_t check = PORTE_IN;
 248:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7e0488>
			check &= CLEARMOST;
 24c:	4f 70       	andi	r20, 0x0F	; 15
			if(check != outputs[ic][i]){
 24e:	f9 01       	movw	r30, r18
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	ee 0f       	add	r30, r30
 256:	ff 1f       	adc	r31, r31
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	70 e0       	ldi	r23, 0x00	; 0
 25c:	6c 0f       	add	r22, r28
 25e:	7d 1f       	adc	r23, r29
 260:	e6 0f       	add	r30, r22
 262:	f7 1f       	adc	r31, r23
 264:	e8 0f       	add	r30, r24
 266:	f9 1f       	adc	r31, r25
 268:	50 81       	ld	r21, Z
 26a:	45 13       	cpse	r20, r21
 26c:	09 c0       	rjmp	.+18     	; 0x280 <__EEPROM_REGION_LENGTH__+0x80>

		if(ic != MYSTERY ){
		success = true;
		//checks gates

		for(int i = 0; i<4;i++){
 26e:	01 96       	adiw	r24, 0x01	; 1
 270:	02 c0       	rjmp	.+4      	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	84 30       	cpi	r24, 0x04	; 4
 278:	91 05       	cpc	r25, r1
 27a:	bc f2       	brlt	.-82     	; 0x22a <__EEPROM_REGION_LENGTH__+0x2a>
			PORTC.OUT &= ~testShift;
		}
		 

		if(ic != MYSTERY ){
		success = true;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	01 c0       	rjmp	.+2      	; 0x282 <__EEPROM_REGION_LENGTH__+0x82>
			//clears bits 7-4 of PORTE, where the IC outputs are stored
			//ends loop if IC output doesn't match the value in the array of results
			uint8_t check = PORTE_IN;
			check &= CLEARMOST;
			if(check != outputs[ic][i]){
			success = false;
 280:	80 e0       	ldi	r24, 0x00	; 0
			break;
				}
			}
			//turns off blue led
			PORTC.OUT |= 0xFF;
 282:	e0 e4       	ldi	r30, 0x40	; 64
 284:	f4 e0       	ldi	r31, 0x04	; 4
 286:	94 81       	ldd	r25, Z+4	; 0x04
 288:	9f ef       	ldi	r25, 0xFF	; 255
 28a:	94 83       	std	Z+4, r25	; 0x04
			//turns on green led
			if(!success){
 28c:	81 11       	cpse	r24, r1
 28e:	03 c0       	rjmp	.+6      	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
 
			 PORTC.OUT &= 0xDF;
 290:	94 81       	ldd	r25, Z+4	; 0x04
 292:	9f 7d       	andi	r25, 0xDF	; 223
 294:	94 83       	std	Z+4, r25	; 0x04
		
			}
			//turns on red led
			if(success)
 296:	88 23       	and	r24, r24
 298:	29 f0       	breq	.+10     	; 0x2a4 <__EEPROM_REGION_LENGTH__+0xa4>
				PORTC.OUT &= 0xBF;
 29a:	e0 e4       	ldi	r30, 0x40	; 64
 29c:	f4 e0       	ldi	r31, 0x04	; 4
 29e:	84 81       	ldd	r24, Z+4	; 0x04
 2a0:	8f 7b       	andi	r24, 0xBF	; 191
 2a2:	84 83       	std	Z+4, r24	; 0x04
		
			
			}
			
			
				if(ic == MYSTERY){
 2a4:	25 30       	cpi	r18, 0x05	; 5
 2a6:	31 05       	cpc	r19, r1
 2a8:	09 f0       	breq	.+2      	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
 2aa:	83 cf       	rjmp	.-250    	; 0x1b2 <main+0x8c>
 2ac:	2e c0       	rjmp	.+92     	; 0x30a <__EEPROM_REGION_LENGTH__+0x10a>
						 for(int i = 0; i<5;i++){
							 
							 //if gate was found end main loop
							 if(ic != MYSTERY)
 2ae:	25 30       	cpi	r18, 0x05	; 5
 2b0:	31 05       	cpc	r19, r1
 2b2:	81 f5       	brne	.+96     	; 0x314 <__EEPROM_REGION_LENGTH__+0x114>
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	22 c0       	rjmp	.+68     	; 0x2fe <__EEPROM_REGION_LENGTH__+0xfe>
							 break;
							 for(int j = 0; j<4;j++){
								 PORTD_OUT = states[j];
 2ba:	e5 e1       	ldi	r30, 0x15	; 21
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	ec 0f       	add	r30, r28
 2c0:	fd 1f       	adc	r31, r29
 2c2:	e8 0f       	add	r30, r24
 2c4:	f9 1f       	adc	r31, r25
 2c6:	40 81       	ld	r20, Z
 2c8:	40 93 64 04 	sts	0x0464, r20	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
								 __asm("nop");
 2cc:	00 00       	nop
								 
						 //clears bits 7-4 of PORTE, where the IC outputs are stored
						 //ends inner loop if IC output doesn't match the value in the array of results
								 uint8_t check = PORTE_IN;
 2ce:	40 91 88 04 	lds	r20, 0x0488	; 0x800488 <__TEXT_REGION_LENGTH__+0x7e0488>
								 check &= CLEARMOST;
 2d2:	4f 70       	andi	r20, 0x0F	; 15
								 if(check != outputs[i][j]){
 2d4:	fb 01       	movw	r30, r22
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	ee 0f       	add	r30, r30
 2dc:	ff 1f       	adc	r31, r31
 2de:	a1 e0       	ldi	r26, 0x01	; 1
 2e0:	b0 e0       	ldi	r27, 0x00	; 0
 2e2:	ac 0f       	add	r26, r28
 2e4:	bd 1f       	adc	r27, r29
 2e6:	ea 0f       	add	r30, r26
 2e8:	fb 1f       	adc	r31, r27
 2ea:	e8 0f       	add	r30, r24
 2ec:	f9 1f       	adc	r31, r25
 2ee:	50 81       	ld	r21, Z
 2f0:	45 13       	cpse	r20, r21
 2f2:	08 c0       	rjmp	.+16     	; 0x304 <__EEPROM_REGION_LENGTH__+0x104>
									 break;
								 }
						//if made it to this statement, the gate was determined		 
								 if(j == 3)
 2f4:	83 30       	cpi	r24, 0x03	; 3
 2f6:	91 05       	cpc	r25, r1
 2f8:	09 f4       	brne	.+2      	; 0x2fc <__EEPROM_REGION_LENGTH__+0xfc>
								 ic = i;
 2fa:	9b 01       	movw	r18, r22
						 for(int i = 0; i<5;i++){
							 
							 //if gate was found end main loop
							 if(ic != MYSTERY)
							 break;
							 for(int j = 0; j<4;j++){
 2fc:	01 96       	adiw	r24, 0x01	; 1
 2fe:	84 30       	cpi	r24, 0x04	; 4
 300:	91 05       	cpc	r25, r1
 302:	dc f2       	brlt	.-74     	; 0x2ba <__EEPROM_REGION_LENGTH__+0xba>
			
			}
			
			
				if(ic == MYSTERY){
						 for(int i = 0; i<5;i++){
 304:	6f 5f       	subi	r22, 0xFF	; 255
 306:	7f 4f       	sbci	r23, 0xFF	; 255
 308:	02 c0       	rjmp	.+4      	; 0x30e <__EEPROM_REGION_LENGTH__+0x10e>
 30a:	60 e0       	ldi	r22, 0x00	; 0
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	65 30       	cpi	r22, 0x05	; 5
 310:	71 05       	cpc	r23, r1
 312:	6c f2       	brlt	.-102    	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
							 }
							 
						 }
						 
						//display the gates
					PORTC_OUT &= ~gates[ic];	 
 314:	a4 e4       	ldi	r26, 0x44	; 68
 316:	b4 e0       	ldi	r27, 0x04	; 4
 318:	9c 91       	ld	r25, X
 31a:	e9 e1       	ldi	r30, 0x19	; 25
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	ec 0f       	add	r30, r28
 320:	fd 1f       	adc	r31, r29
 322:	e2 0f       	add	r30, r18
 324:	f3 1f       	adc	r31, r19
 326:	80 81       	ld	r24, Z
 328:	80 95       	com	r24
 32a:	89 23       	and	r24, r25
 32c:	8c 93       	st	X, r24
 32e:	41 cf       	rjmp	.-382    	; 0x1b2 <main+0x8c>

00000330 <_exit>:
 330:	f8 94       	cli

00000332 <__stop_program>:
 332:	ff cf       	rjmp	.-2      	; 0x332 <__stop_program>
