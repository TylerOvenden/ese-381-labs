
ic_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00804000  000002b2  00000326  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003372  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e5a  00000000  00000000  0000373e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004e8  00000000  00000000  00006598  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00006a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017a9  00000000  00000000  00006ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a6  00000000  00000000  0000825d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00008403  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
   c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  60:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  68:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  6c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  70:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  74:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  78:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  7c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  80:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  84:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  88:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  8c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  90:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  94:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  98:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  9c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  a8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ac:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  b8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  bc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  c8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  cc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  d8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  dc:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  e8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  ec:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
  f0:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e2 eb       	ldi	r30, 0xB2	; 178
 108:	f2 e0       	ldi	r31, 0x02	; 2
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a4 31       	cpi	r26, 0x14	; 20
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>
 11a:	0e 94 93 00 	call	0x126	; 0x126 <main>
 11e:	0c 94 57 01 	jmp	0x2ae	; 0x2ae <_exit>

00000122 <__bad_interrupt>:
 122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <main>:
#define XORSTATE 3
#define NANDCO 4

//B
int main(void)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	cd b7       	in	r28, 0x3d	; 61
 12c:	de b7       	in	r29, 0x3e	; 62
 12e:	64 97       	sbiw	r28, 0x14	; 20
 130:	cd bf       	out	0x3d, r28	; 61
 132:	de bf       	out	0x3e, r29	; 62
	PORTA_DIR = 0x1F; //setting pins 7-5 to inputs for switch
 134:	8f e1       	ldi	r24, 0x1F	; 31
 136:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	PORTB_DIR = 0xFB;  //setting portb 3 as an input
 13a:	8b ef       	ldi	r24, 0xFB	; 251
 13c:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7e0420>
	PORTC_DIR = 0xE0; //setting pins 7-5 as inputs
 140:	80 ee       	ldi	r24, 0xE0	; 224
 142:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7e0440>
	PORTD_DIR = 0xFF;  //setting PORTD as outputs, using this for 
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	20 93 60 04 	sts	0x0460, r18	; 0x800460 <__TEXT_REGION_LENGTH__+0x7e0460>
	//the inputs in 
	PORTE_DIR = 0x0F; //
 14c:	8f e0       	ldi	r24, 0x0F	; 15
 14e:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <__TEXT_REGION_LENGTH__+0x7e0480>
	
	//clear the leds
	PORTC_OUT = 0xFF;
 152:	84 e4       	ldi	r24, 0x44	; 68
 154:	94 e0       	ldi	r25, 0x04	; 4
 156:	dc 01       	movw	r26, r24
 158:	2c 93       	st	X, r18
	PORTD_OUT = 0xFF;
 15a:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
	
	PORTA_PIN7CTRL = PORT_PULLUPEN_bm;
 15e:	38 e0       	ldi	r19, 0x08	; 8
 160:	30 93 17 04 	sts	0x0417, r19	; 0x800417 <__TEXT_REGION_LENGTH__+0x7e0417>
	PORTA_PIN6CTRL = PORT_PULLUPEN_bm;
 164:	30 93 16 04 	sts	0x0416, r19	; 0x800416 <__TEXT_REGION_LENGTH__+0x7e0416>
	PORTA_PIN5CTRL = PORT_PULLUPEN_bm;
 168:	30 93 15 04 	sts	0x0415, r19	; 0x800415 <__TEXT_REGION_LENGTH__+0x7e0415>
	
	
	
	PORTB_PIN3CTRL = PORT_PULLUPEN_bm;
 16c:	30 93 33 04 	sts	0x0433, r19	; 0x800433 <__TEXT_REGION_LENGTH__+0x7e0433>
	
	
	//array of all the outputs, 
	uint8_t outputs[5][4] = {
 170:	34 e1       	ldi	r19, 0x14	; 20
 172:	e0 e0       	ldi	r30, 0x00	; 0
 174:	f0 e4       	ldi	r31, 0x40	; 64
 176:	de 01       	movw	r26, r28
 178:	11 96       	adiw	r26, 0x01	; 1
 17a:	01 90       	ld	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	3a 95       	dec	r19
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x54>
		{0x0F, 0x0F, 0x0F, 0x00}
	};
	
     int ic = -1;
	//turn on leds for POST
		PORTB_OUT |= SEVENTOFIVE;
 182:	e4 e2       	ldi	r30, 0x24	; 36
 184:	f4 e0       	ldi	r31, 0x04	; 4
 186:	30 81       	ld	r19, Z
 188:	3f 61       	ori	r19, 0x1F	; 31
 18a:	30 83       	st	Z, r19
		PORTC_OUT |= SEVENTOFIVE;
 18c:	dc 01       	movw	r26, r24
 18e:	3c 91       	ld	r19, X
 190:	3f 61       	ori	r19, 0x1F	; 31
 192:	3c 93       	st	X, r19
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	bf e3       	ldi	r27, 0x3F	; 63
 196:	3d e0       	ldi	r19, 0x0D	; 13
 198:	43 e0       	ldi	r20, 0x03	; 3
 19a:	b1 50       	subi	r27, 0x01	; 1
 19c:	30 40       	sbci	r19, 0x00	; 0
 19e:	40 40       	sbci	r20, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0x74>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0x7e>
 1a4:	00 00       	nop
		_delay_ms(1000);
		PORTB_OUT |= 0xFF;
 1a6:	30 81       	ld	r19, Z
 1a8:	20 83       	st	Z, r18
		PORTC_OUT |= 0xFF;
 1aa:	dc 01       	movw	r26, r24
 1ac:	3c 91       	ld	r19, X
 1ae:	2c 93       	st	X, r18
		{0x00, 0x0F, 0x0F, 0x0F},
		{0x00, 0x0F, 0x0F, 0x00},
		{0x0F, 0x0F, 0x0F, 0x00}
	};
	
     int ic = -1;
 1b0:	4f ef       	ldi	r20, 0xFF	; 255
 1b2:	5f ef       	ldi	r21, 0xFF	; 255
		PORTC_OUT |= 0xFF;
		bool success = true;
    /* R_eplace with your application code */
    while (1) 
    {
		uint8_t push = PORTB_IN;
 1b4:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
		push &= 0x04; //isolate PB2 for push button
		//checks if push button is pushed
		if(push == 0x00){
 1b8:	82 fd       	sbrc	r24, 2
 1ba:	fc cf       	rjmp	.-8      	; 0x1b4 <main+0x8e>
		
		PORTC.OUT |= 0xFF;
 1bc:	e0 e4       	ldi	r30, 0x40	; 64
 1be:	f4 e0       	ldi	r31, 0x04	; 4
 1c0:	84 81       	ldd	r24, Z+4	; 0x04
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	84 83       	std	Z+4, r24	; 0x04
		
		uint8_t test = PORTA_IN;
 1c6:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <__TEXT_REGION_LENGTH__+0x7e0408>
		test &= ISOSWITCH; //make mask
 1ca:	80 7e       	andi	r24, 0xE0	; 224
		//check which state the dip switch is representing
		if(test == 0x00){
 1cc:	11 f4       	brne	.+4      	; 0x1d2 <main+0xac>
			ic = NANDSTATE;
 1ce:	40 e0       	ldi	r20, 0x00	; 0
 1d0:	50 e0       	ldi	r21, 0x00	; 0
			} 
		if(test == 0x20)
 1d2:	80 32       	cpi	r24, 0x20	; 32
 1d4:	11 f4       	brne	.+4      	; 0x1da <main+0xb4>
			{
			ic = ANDSTATE;	
 1d6:	41 e0       	ldi	r20, 0x01	; 1
 1d8:	50 e0       	ldi	r21, 0x00	; 0
		
		}
		if(test == 0x40){
 1da:	80 34       	cpi	r24, 0x40	; 64
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <main+0xbc>
			ic = ORSTATE;
 1de:	42 e0       	ldi	r20, 0x02	; 2
 1e0:	50 e0       	ldi	r21, 0x00	; 0
		}
		if(test == 0x60)
 1e2:	80 36       	cpi	r24, 0x60	; 96
 1e4:	11 f4       	brne	.+4      	; 0x1ea <main+0xc4>
		{
			ic = XORSTATE;
 1e6:	43 e0       	ldi	r20, 0x03	; 3
 1e8:	50 e0       	ldi	r21, 0x00	; 0
			
		}
		
		if(test == 0x80){
 1ea:	80 38       	cpi	r24, 0x80	; 128
 1ec:	11 f4       	brne	.+4      	; 0x1f2 <main+0xcc>
			ic = NANDCO;
 1ee:	44 e0       	ldi	r20, 0x04	; 4
 1f0:	50 e0       	ldi	r21, 0x00	; 0
		}
		if(ic != -1)
 1f2:	4f 3f       	cpi	r20, 0xFF	; 255
 1f4:	bf ef       	ldi	r27, 0xFF	; 255
 1f6:	5b 07       	cpc	r21, r27
 1f8:	19 f0       	breq	.+6      	; 0x200 <__EEPROM_REGION_LENGTH__>
		{
			PORTB.OUT = ~test;
 1fa:	80 95       	com	r24
 1fc:	80 93 24 04 	sts	0x0424, r24	; 0x800424 <__TEXT_REGION_LENGTH__+0x7e0424>
			ic = XORSTATE;
			
		}
		
		if(test == 0x80){
			ic = NANDCO;
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	33 c0       	rjmp	.+102    	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
		//checks gates

		for(int i = 0; i<4;i++){

			//turn on blue led
			PORTC.OUT |= 0x7F;
 206:	e0 e4       	ldi	r30, 0x40	; 64
 208:	f4 e0       	ldi	r31, 0x04	; 4
 20a:	24 81       	ldd	r18, Z+4	; 0x04
 20c:	2f 67       	ori	r18, 0x7F	; 127
 20e:	24 83       	std	Z+4, r18	; 0x04
			if(i == 0){
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	11 f4       	brne	.+4      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
				PORTD_OUT = ZEROZERO;
 214:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			}
			if(i == 1){
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	91 05       	cpc	r25, r1
 21c:	19 f4       	brne	.+6      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
				PORTD_OUT = ZEROONE;
 21e:	25 e5       	ldi	r18, 0x55	; 85
 220:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			}
			if(i == 2){
 224:	82 30       	cpi	r24, 0x02	; 2
 226:	91 05       	cpc	r25, r1
 228:	19 f4       	brne	.+6      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
				PORTD_OUT = ONEZERO;
 22a:	2a ea       	ldi	r18, 0xAA	; 170
 22c:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
			}
			if(i == 3){
 230:	83 30       	cpi	r24, 0x03	; 3
 232:	91 05       	cpc	r25, r1
 234:	19 f4       	brne	.+6      	; 0x23c <__EEPROM_REGION_LENGTH__+0x3c>
				PORTD_OUT = ONEONE;
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	20 93 64 04 	sts	0x0464, r18	; 0x800464 <__TEXT_REGION_LENGTH__+0x7e0464>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 23c:	e1 e2       	ldi	r30, 0x21	; 33
 23e:	ea 95       	dec	r30
 240:	f1 f7       	brne	.-4      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 242:	00 00       	nop
			//propergation delay
			_delay_us(100);
			
			//clears bits 7-4 of PORTE, where the IC outputs are stored
			//ends loop if IC output doesn't match the value in the array of results
			uint8_t check = PORTE_OUT;
 244:	20 91 84 04 	lds	r18, 0x0484	; 0x800484 <__TEXT_REGION_LENGTH__+0x7e0484>
			check &= CLEARMOST;
 248:	2f 70       	andi	r18, 0x0F	; 15
			if(check != outputs[ic][i]){
 24a:	fa 01       	movw	r30, r20
 24c:	ee 0f       	add	r30, r30
 24e:	ff 1f       	adc	r31, r31
 250:	ee 0f       	add	r30, r30
 252:	ff 1f       	adc	r31, r31
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	70 e0       	ldi	r23, 0x00	; 0
 258:	6c 0f       	add	r22, r28
 25a:	7d 1f       	adc	r23, r29
 25c:	e6 0f       	add	r30, r22
 25e:	f7 1f       	adc	r31, r23
 260:	e8 0f       	add	r30, r24
 262:	f9 1f       	adc	r31, r25
 264:	30 81       	ld	r19, Z
 266:	23 13       	cpse	r18, r19
 268:	06 c0       	rjmp	.+12     	; 0x276 <__EEPROM_REGION_LENGTH__+0x76>
		}
		
		success = true;
		//checks gates

		for(int i = 0; i<4;i++){
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	84 30       	cpi	r24, 0x04	; 4
 26e:	91 05       	cpc	r25, r1
 270:	54 f2       	brlt	.-108    	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
		if(ic != -1)
		{
			PORTB.OUT = ~test;
		}
		
		success = true;
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	01 c0       	rjmp	.+2      	; 0x278 <__EEPROM_REGION_LENGTH__+0x78>
			//clears bits 7-4 of PORTE, where the IC outputs are stored
			//ends loop if IC output doesn't match the value in the array of results
			uint8_t check = PORTE_OUT;
			check &= CLEARMOST;
			if(check != outputs[ic][i]){
			success = false;
 276:	80 e0       	ldi	r24, 0x00	; 0
			break;
				}
			}
			//turns off blue led
			PORTC.OUT |= 0xFF;
 278:	e0 e4       	ldi	r30, 0x40	; 64
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	94 81       	ldd	r25, Z+4	; 0x04
 27e:	9f ef       	ldi	r25, 0xFF	; 255
 280:	94 83       	std	Z+4, r25	; 0x04
			//turns on green led
			if(!success){
 282:	81 11       	cpse	r24, r1
 284:	03 c0       	rjmp	.+6      	; 0x28c <__EEPROM_REGION_LENGTH__+0x8c>
				PORTC.OUT |= 0xBF;
 286:	94 81       	ldd	r25, Z+4	; 0x04
 288:	9f 6b       	ori	r25, 0xBF	; 191
 28a:	94 83       	std	Z+4, r25	; 0x04
			}
			//turns on red led
			if(success){
 28c:	88 23       	and	r24, r24
 28e:	29 f0       	breq	.+10     	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
				PORTC.OUT |= 0xDF;
 290:	e0 e4       	ldi	r30, 0x40	; 64
 292:	f4 e0       	ldi	r31, 0x04	; 4
 294:	84 81       	ldd	r24, Z+4	; 0x04
 296:	8f 6d       	ori	r24, 0xDF	; 223
 298:	84 83       	std	Z+4, r24	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29a:	7f e3       	ldi	r23, 0x3F	; 63
 29c:	8d e0       	ldi	r24, 0x0D	; 13
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	71 50       	subi	r23, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
 2aa:	00 00       	nop
 2ac:	83 cf       	rjmp	.-250    	; 0x1b4 <main+0x8e>

000002ae <_exit>:
 2ae:	f8 94       	cli

000002b0 <__stop_program>:
 2b0:	ff cf       	rjmp	.-2      	; 0x2b0 <__stop_program>
