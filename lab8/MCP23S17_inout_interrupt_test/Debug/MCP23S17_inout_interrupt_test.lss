
MCP23S17_inout_interrupt_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00804000  00804000  00000358  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003150  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002df6  00000000  00000000  00003558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000426  00000000  00000000  0000634e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ac  00000000  00000000  00006774  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000016a7  00000000  00000000  00006820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000119  00000000  00000000  00007ec7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00007fe0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
   c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  68:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  6c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  70:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  74:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  78:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  7c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  80:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  84:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  88:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  8c:	0c 94 3a 01 	jmp	0x274	; 0x274 <__vector_35>
  90:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  94:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  98:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  9c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  a8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ac:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  b8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  bc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  c8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  cc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  d8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  dc:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  e8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  ec:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
  f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_clear_bss>:
 100:	20 e4       	ldi	r18, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
 108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
 10a:	a2 30       	cpi	r26, 0x02	; 2
 10c:	b2 07       	cpc	r27, r18
 10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
 110:	0e 94 35 01 	call	0x26a	; 0x26a <main>
 114:	0c 94 70 01 	jmp	0x2e0	; 0x2e0 <_exit>

00000118 <__bad_interrupt>:
 118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <MCP23S17_SPI_read>:
// Revision History     : Initial version
//
//**************************************************************************

uint8_t MCP23S17_SPI_read( uint8_t addr){
		check = SPI0_INTFLAGS;
 11c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 120:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
		check %=  SPI_IF_bm;
 124:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 128:	8f 77       	andi	r24, 0x7F	; 127
 12a:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
		//checks if flag for can write/read is set
		if(check !=  SPI_IF_bm){
 12e:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 132:	80 38       	cpi	r24, 0x80	; 128
 134:	49 f0       	breq	.+18     	; 0x148 <MCP23S17_SPI_read+0x2c>
			check = SPI0_INTFLAGS;
 136:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 13a:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
			check %=  SPI_IF_bm;
 13e:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 142:	8f 77       	andi	r24, 0x7F	; 127
 144:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
		}
		
		//puts opcode for writing into register
		SPI0_DATA = READ_opcode;
 148:	81 e4       	ldi	r24, 0x41	; 65
 14a:	80 93 44 09 	sts	0x0944, r24	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		check = SPI0_INTFLAGS;
 14e:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 152:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
		check %=  SPI_IF_bm;
 156:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 15a:	8f 77       	andi	r24, 0x7F	; 127
 15c:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
		//checks if flag for can write is set
		if(check !=  SPI_IF_bm){
 160:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 164:	80 38       	cpi	r24, 0x80	; 128
 166:	49 f0       	breq	.+18     	; 0x17a <MCP23S17_SPI_read+0x5e>
			check = SPI0_INTFLAGS;
 168:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 16c:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
			check %=  SPI_IF_bm;
 170:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 174:	8f 77       	andi	r24, 0x7F	; 127
 176:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
		}
		//reads
		uint8_t tem = SPI0_DATA;
 17a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
		return tem;
	
	
}
 17e:	08 95       	ret

00000180 <MCP23S17_SPI_write>:
//
// Revision History     : Initial version
//
//**************************************************************************
void MCP23S17_SPI_write(uint8_t addr, uint8_t data) {
	check = SPI0_INTFLAGS;
 180:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 184:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
	check %=  SPI_IF_bm;
 188:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <check>
 18c:	9f 77       	andi	r25, 0x7F	; 127
 18e:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
	//checks if flag for can write/read is set
	if(check !=  SPI_IF_bm){
 192:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <check>
 196:	90 38       	cpi	r25, 0x80	; 128
 198:	49 f0       	breq	.+18     	; 0x1ac <MCP23S17_SPI_write+0x2c>
		check = SPI0_INTFLAGS;
 19a:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 19e:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
		check %=  SPI_IF_bm;
 1a2:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <check>
 1a6:	9f 77       	andi	r25, 0x7F	; 127
 1a8:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
	}
	
	//puts opcode for writing into register
	SPI0_DATA = WRITE_opcode;
 1ac:	90 e4       	ldi	r25, 0x40	; 64
 1ae:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	check = SPI0_INTFLAGS;
 1b2:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1b6:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
	check %=  SPI_IF_bm;
 1ba:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <check>
 1be:	9f 77       	andi	r25, 0x7F	; 127
 1c0:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
	//checks if flag for can write is set
	if(check !=  SPI_IF_bm){
 1c4:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <check>
 1c8:	90 38       	cpi	r25, 0x80	; 128
 1ca:	49 f0       	breq	.+18     	; 0x1de <MCP23S17_SPI_write+0x5e>
		check = SPI0_INTFLAGS;
 1cc:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1d0:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
		check %=  SPI_IF_bm;
 1d4:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <check>
 1d8:	9f 77       	andi	r25, 0x7F	; 127
 1da:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <check>
	}
	//sends register opcode
	SPI0_DATA = addr;
 1de:	e4 e4       	ldi	r30, 0x44	; 68
 1e0:	f9 e0       	ldi	r31, 0x09	; 9
 1e2:	80 83       	st	Z, r24
	
	SPI0_DATA = WRITE_opcode;
 1e4:	80 e4       	ldi	r24, 0x40	; 64
 1e6:	80 83       	st	Z, r24
	check = SPI0_INTFLAGS;
 1e8:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 1ec:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
	check %=  SPI_IF_bm;
 1f0:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 1f4:	8f 77       	andi	r24, 0x7F	; 127
 1f6:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
	//checks if flag for can write is set
	if(check !=  SPI_IF_bm){
 1fa:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 1fe:	80 38       	cpi	r24, 0x80	; 128
 200:	49 f0       	breq	.+18     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
		check = SPI0_INTFLAGS;
 202:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
 206:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
		check %=  SPI_IF_bm;
 20a:	80 91 01 40 	lds	r24, 0x4001	; 0x804001 <check>
 20e:	8f 77       	andi	r24, 0x7F	; 127
 210:	80 93 01 40 	sts	0x4001, r24	; 0x804001 <check>
	}
	//sends data
	SPI0_DATA = data;
 214:	60 93 44 09 	sts	0x0944, r22	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	
	//deselects SS
	PORTF_OUT = 0x02;
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	80 93 a4 04 	sts	0x04A4, r24	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7e04a4>
 21e:	08 95       	ret

00000220 <MCP23S17_SPI_initalize>:
//
//**************************************************************************
void MCP23S17_SPI_initalize() {
	
	
	PORTA_DIR = 0xD0;
 220:	80 ed       	ldi	r24, 0xD0	; 208
 222:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
	PORTF_DIR = 0x04;
 226:	84 e0       	ldi	r24, 0x04	; 4
 228:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7e04a0>
	
	PORTF_PIN3CTRL = 0x08;
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	80 93 b3 04 	sts	0x04B3, r24	; 0x8004b3 <__TEXT_REGION_LENGTH__+0x7e04b3>
	//configures SPI
	SPI0_CTRLA = SPI_ENABLE_bm || SPI_MASTER_bm || SPI_DORDMSB_bm;
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	80 93 40 09 	sts	0x0940, r24	; 0x800940 <__TEXT_REGION_LENGTH__+0x7e0940>
	SPI0_CTRLB = SPI_MODE1_bp;
 238:	80 93 41 09 	sts	0x0941, r24	; 0x800941 <__TEXT_REGION_LENGTH__+0x7e0941>
	SPI0_INTCTRL = SPI_IE_bm;
 23c:	80 93 42 09 	sts	0x0942, r24	; 0x800942 <__TEXT_REGION_LENGTH__+0x7e0942>
	//configures MCP23S17 registers
	MCP23S17_SPI_write(IOCONaddr_b0, BANK);
 240:	60 e8       	ldi	r22, 0x80	; 128
 242:	8a e0       	ldi	r24, 0x0A	; 10
 244:	0e 94 c0 00 	call	0x180	; 0x180 <MCP23S17_SPI_write>
	MCP23S17_SPI_write(IODIRAaddr_b1, 0x00);
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	80 e0       	ldi	r24, 0x00	; 0
 24c:	0e 94 c0 00 	call	0x180	; 0x180 <MCP23S17_SPI_write>
	MCP23S17_SPI_write(IODIRBaddr_b1, 0xFF);
 250:	6f ef       	ldi	r22, 0xFF	; 255
 252:	80 e1       	ldi	r24, 0x10	; 16
 254:	0e 94 c0 00 	call	0x180	; 0x180 <MCP23S17_SPI_write>
	MCP23S17_SPI_write(GPPUAaddr_b1, 0xFF );
 258:	6f ef       	ldi	r22, 0xFF	; 255
 25a:	86 e0       	ldi	r24, 0x06	; 6
 25c:	0e 94 c0 00 	call	0x180	; 0x180 <MCP23S17_SPI_write>
	MCP23S17_SPI_write(INTCONAaddr_b1, 0xFF);
 260:	6f ef       	ldi	r22, 0xFF	; 255
 262:	84 e0       	ldi	r24, 0x04	; 4
 264:	0e 94 c0 00 	call	0x180	; 0x180 <MCP23S17_SPI_write>
 268:	08 95       	ret

0000026a <main>:
void MCP23S17_SPI_write(uint8_t, uint8_t);
void MCP23S17_SPI_initalize();
uint8_t MCP23S17_SPI_read( uint8_t);
int main(void)
{
	MCP23S17_SPI_initalize();
 26a:	0e 94 10 01 	call	0x220	; 0x220 <MCP23S17_SPI_initalize>
	
		sei();
 26e:	78 94       	sei
	/* Replace with your application code */
	while (1)
	{
		
			asm volatile ("nop");
 270:	00 00       	nop
 272:	fe cf       	rjmp	.-4      	; 0x270 <main+0x6>

00000274 <__vector_35>:
// References           : none
//
// Revision History     : Initial version
//
//**************************************************************************
ISR (PORTF_PORT_vect) {
 274:	1f 92       	push	r1
 276:	0f 92       	push	r0
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	0f 92       	push	r0
 27c:	11 24       	eor	r1, r1
 27e:	0b b6       	in	r0, 0x3b	; 59
 280:	0f 92       	push	r0
 282:	2f 93       	push	r18
 284:	3f 93       	push	r19
 286:	4f 93       	push	r20
 288:	5f 93       	push	r21
 28a:	6f 93       	push	r22
 28c:	7f 93       	push	r23
 28e:	8f 93       	push	r24
 290:	9f 93       	push	r25
 292:	af 93       	push	r26
 294:	bf 93       	push	r27
 296:	ef 93       	push	r30
 298:	ff 93       	push	r31
	cli();
 29a:	f8 94       	cli
	//char res = USART_sw_read();

	 values = MCP23S17_SPI_read(INTCAPAaddr_b1);
 29c:	88 e0       	ldi	r24, 0x08	; 8
 29e:	0e 94 8e 00 	call	0x11c	; 0x11c <MCP23S17_SPI_read>
 2a2:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
	MCP23S17_SPI_write(OLATBaddr_b1, ~values);
 2a6:	60 91 00 40 	lds	r22, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2aa:	60 95       	com	r22
 2ac:	8a e1       	ldi	r24, 0x1A	; 26
 2ae:	0e 94 c0 00 	call	0x180	; 0x180 <MCP23S17_SPI_write>
	//clears the flags
	 PORTF_INTFLAGS = PORT_INT3_bm;
 2b2:	88 e0       	ldi	r24, 0x08	; 8
 2b4:	80 93 a9 04 	sts	0x04A9, r24	; 0x8004a9 <__TEXT_REGION_LENGTH__+0x7e04a9>
	sei();
 2b8:	78 94       	sei

	return;
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	bf 91       	pop	r27
 2c0:	af 91       	pop	r26
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	7f 91       	pop	r23
 2c8:	6f 91       	pop	r22
 2ca:	5f 91       	pop	r21
 2cc:	4f 91       	pop	r20
 2ce:	3f 91       	pop	r19
 2d0:	2f 91       	pop	r18
 2d2:	0f 90       	pop	r0
 2d4:	0b be       	out	0x3b, r0	; 59
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <_exit>:
 2e0:	f8 94       	cli

000002e2 <__stop_program>:
 2e2:	ff cf       	rjmp	.-2      	; 0x2e2 <__stop_program>
